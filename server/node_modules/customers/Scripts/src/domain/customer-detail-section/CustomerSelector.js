export default function CustomerSelector(whenItemSelected,noSelectionCallback) {
    let visible = ko.observable(false);
    let selectableCustomers = ko.observableArray();
    let mandatorySelection = ko.observable(false);

    function show(customers) {
        mandatorySelection(false);        
        showModal(customers);
    }

    function showWithMandatorySelection(customers) {
        mandatorySelection(true);
        showModal(customers);
    }

    function showModal(customers) {
        visible(true);
        selectableCustomers().length = 0;
        ko.utils.arrayPushAll(selectableCustomers, _.map(customers, (x) => SelectableCustomer(x, select)));
    }

    function select(selected) {
        visible(false);
        setTimeout(()=>whenItemSelected(selected), 500);
    }
    
    function selectWithoutTimeout(selected) {
        visible(false);
        whenItemSelected(selected);
    }

    function close(){
        visible(false);   
        setTimeout(()=> noSelectionCallback(), 500); 
    }
    
    return { visible, selectableCustomers, show, showWithMandatorySelection, select, selectWithoutTimeout, close, mandatorySelection };
}

export function SelectableCustomer(customer, whenSelected) {

    function select() {
        whenSelected(customer);
    }

    return { select, customer };
}