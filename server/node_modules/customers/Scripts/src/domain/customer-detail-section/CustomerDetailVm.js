import CustomerSelector from './CustomerSelector';

export default function CustomerDetailVm({actionFactory, newCustomerCallback, customerEditedCallback, translator, isMissing = () => false, hideFormAfterSaving = true}) {

    let availableCountries = ko.observableArray([]);
    let isShown = ko.observable(false);
    let hideForm = hideFormAfterSaving;
    let isCompany = ko.observable(false);
    let name = ko.observable("").extend({
        required: {
            message: translator.translate('SharedDomain.Validation.Required.Message')
        }
    });
    let firstSurname = ko.observable("");
    let secondSurname = ko.observable("");
    let taxId = ko.observable("");
    let address = ko.observable("");
    let city = ko.observable("");
    let state = ko.observable("");
    let country = ko.observable("");
    let phoneNumber = ko.observable("");
    let email = ko.observable("").extend({
        email: {
            message: translator.translate('SharedDomain.Validation.Email.Message')
        }
    });
    let birthDate = ko.observable("");
    let canSaveCustomer = ko.computed(() => isValid());
    let customerSelector = CustomerSelector(whenCustomerSelected, callServerToCreateCustomer);
    let isEdition = ko.observable(false);
    let customerId;
    const showCancel = ko.observable(true);
    const id = ko.observable();
    const disabled = ko.observable(false);
    const gender = ko.observable();
    const postalCode = ko.observable();
    const company = ko.observable();
    const genderOptions = [
        {description: translator.translate('SharedDomain.Gender.Male'), id: 'Male'}, 
        {description: translator.translate('SharedDomain.Gender.Female'), id:'Female'}
    ];
    let onCustomerCreatedCallback = newCustomerCallback;
    let onCustomerEditedCallback = customerEditedCallback;

    function isValid() {
        return name.isValid() && email.isValid();
    }

    function show({customerId, whenSuccess, showCancelButton = true} = {}) {
        showCancel(showCancelButton);
        if (customerId) {
            showEdition({customerId, whenSuccess});
        } else {
            showCreation({whenSuccess});
        }
    }

    function showEdition({customerId, whenSuccess} = {}) {
        isEdition(true);
        onCustomerEditedCallback = whenSuccess || onCustomerEditedCallback;
        actionFactory.customer.getAllCountries((countries) => {
            ko.utils.arrayPushAll(availableCountries, countries);
            actionFactory.customer.getCustomer(customerId, whenCustomerArrived);
        });
    }

    function showCreation({whenSuccess} = {}) {
        isEdition(false);
        onCustomerCreatedCallback = whenSuccess || onCustomerCreatedCallback;
        actionFactory.customer.getAllCountries((countries) => {
            ko.utils.arrayPushAll(availableCountries, countries);
            whenCustomerArrived({});
        });
    }

    function hide() {
        isEdition(false);
        isShown(false);
    }

    function saveCustomer() {
        isEdition() ? editCustomer() : createCustomer();     
    }

    function createCustomer() {
        if (checkCustomerCoincidencesConditions()) {
            searchLikeName();
        }
        else callServerToCreateCustomer();
    }

    function callServerToCreateCustomer(){
        actionFactory.customer.createCustomer(toJson(), whenCustomerCreated);
    }

    function searchLikeName() {
        actionFactory.customer.searchCustomersDescriptions({ name: name(), firstSurname: firstSurname() }, whenCustomersLikeNameArrived);
    }

    function editCustomer(){
        actionFactory.customer.editCustomer(toJson(), whenCustomerEdited);   
    }
    
    function searchByTaxId() {
        if (isEdition()) return;
        
        if (taxId()) {
            actionFactory.customer.searchCustomersDescriptions({ taxId: taxId() }, whenCustomerByTaxIdArrived);
        }
    }

    function checkCustomerCoincidencesConditions(){
        if (isEdition()) return false;
        if (customerSelector.visible()) return false;
        if (!isCompany() && (!name() || !firstSurname())) return false;
        if (isCompany() && !name()) return false;
        return true;
    }

    function whenCustomerSelected(selectedCustomer) {
        if (!selectedCustomer) return;
        hide();
        onCustomerCreatedCallback(toCustomerDescription(selectedCustomer));
    }

    function toCustomerDescription(customer) {
        let description = `${customer.id} - ${customer.name}`;
        if (customer.firstSurname) {
            description += ` ${customer.firstSurname}`;
        }
        if (customer.secondSurname) {
            description += `${customer.secondSurname}`;
        }
        if (customer.taxId) {
            description += ` - ${customer.taxId}`;
        }
        return {
            id: customer.id,
            description: description
        };
    }

    function whenCustomerCreated(newCustomer) {
        if (hideForm) hide();
        onCustomerCreatedCallback(newCustomer);
    }
    
    function whenCustomerEdited(editCustomer) {
        if (hideForm) hide();
        onCustomerEditedCallback(editCustomer);
    }

    function whenCustomerArrived(receivedCustomer) {
        isShown(true);
        loadCustomerProperties(receivedCustomer);
    }

    function whenCustomerByTaxIdArrived(customers) {
        if (customers.length == 0) return;
        customerSelector.showWithMandatorySelection(customers);
    }

    function whenCustomersLikeNameArrived(customers) {
        if (customers.length == 0) callServerToCreateCustomer();
        else customerSelector.show(customers);
    }

    function toJson() {
        return {
            isCompany: isCompany(),
            name: name(),
            firstSurname: firstSurname(),
            secondSurname: secondSurname(),
            taxId: taxId(),
            address: address(),
            city: city(),
            state: state(),
            country: country(),
            phoneNumber: phoneNumber(),
            email: email(),
            birthDate: birthDate(),
            id: customerId,
            disabled: disabled(),
            gender: gender(),
            postalCode: postalCode(),
            company: company()
        };
    }

    function loadCustomerProperties(receivedCustomer) {
        customerId = receivedCustomer.id;
        isCompany(receivedCustomer.isCompany);
        name(receivedCustomer.name);
        firstSurname(receivedCustomer.firstSurname);
        secondSurname(receivedCustomer.secondSurname);
        taxId(receivedCustomer.taxId);
        address(receivedCustomer.address);
        city(receivedCustomer.city);
        state(receivedCustomer.state);
        country(receivedCustomer.country);
        phoneNumber(receivedCustomer.phoneNumber);
        email(receivedCustomer.email);
        birthDate(receivedCustomer.birthDate);
        id(receivedCustomer.id);
        disabled(receivedCustomer.disabled);
        gender(receivedCustomer.gender || undefined) ;
        postalCode(receivedCustomer.postalCode);
        company(receivedCustomer.company);
    }
    
    function setIsCompany(isCompanyValue){
        isCompany(isCompanyValue);
    }

    function isNameMissing(){
        return name() == "" || name() == undefined;
    }

    return {
        isShown,
        hide,
        show,
        canSaveCustomer,
        createCustomer,
        searchByTaxId,
        searchLikeName,
        isCompany,
        name,
        firstSurname,
        secondSurname,
        taxId,
        address,
        state,
        country,
        phoneNumber,
        email,
        birthDate,
        city,
        company,
        customerSelector,
        availableCountries,
        isEdition,
        showCancel,
        id,
        disabled,
        gender,
        postalCode,
        saveCustomer,
        isMissing,
        isNameMissing,
        setIsCompany,
        translator,
        genderOptions,
        props: {
            isShown,
            hide,
            show,
            canSaveCustomer,
            createCustomer,
            searchByTaxId,
            searchLikeName,
            isCompany,
            name,
            firstSurname,
            secondSurname,
            taxId,
            address,
            state,
            country,
            phoneNumber,
            email,
            birthDate,
            city,
            company,
            customerSelector,
            availableCountries,
            isEdition,
            showCancel,
            id,
            disabled,
            gender,
            postalCode,
            saveCustomer,
            isMissing,
            isNameMissing,
            setIsCompany,
            translator,
            genderOptions
        }
    };
}