require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

String.prototype.shortDateFormat = function () {
    return moment(undefined).format('L');
};

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var DialogPublisher = (function () {

    var onSuccessCallback = function onSuccessCallback() {};
    var onWarningCallback = function onWarningCallback() {};
    var onErrorCallback = function onErrorCallback() {};
    var confirmationCallback = function confirmationCallback() {};

    function success(_ref) {
        var message = _ref.message;
        var htmlTemplate = _ref.htmlTemplate;

        onSuccessCallback({ message: message, htmlTemplate: htmlTemplate });
    }

    function onSuccess(callback) {
        onSuccessCallback = callback;
    }

    function onWarning(callback) {
        onWarningCallback = callback;
    }

    function warning(_ref2) {
        var title = _ref2.title;
        var message = _ref2.message;
        var htmlTemplate = _ref2.htmlTemplate;

        onWarningCallback({ title: title, message: message, htmlTemplate: htmlTemplate });
    }

    function onError(callback) {
        onErrorCallback = callback;
    }

    function error(_ref3) {
        var title = _ref3.title;
        var message = _ref3.message;
        var htmlTemplate = _ref3.htmlTemplate;

        onErrorCallback({ title: title, message: message, htmlTemplate: htmlTemplate });
    }

    function onConfirmation(callback) {
        confirmationCallback = callback;
    }

    function confirmation(_ref4) {
        var title = _ref4.title;
        var message = _ref4.message;
        var callback = _ref4.callback;

        confirmationCallback({ title: title, message: message, callback: callback });
    }

    return {
        success: success,
        onSuccess: onSuccess,
        warning: warning,
        onWarning: onWarning,
        error: error,
        onError: onError,
        onConfirmation: onConfirmation,
        confirmation: confirmation
    };
})();
exports.DialogPublisher = DialogPublisher;

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = DialogViewModel;

function DialogViewModel(translator) {

    var visible = ko.observable(false);
    var header = ko.observable('');
    var bodyTemplate = ko.observable('modalBody');
    var body = ko.observable('');
    var closeButton = ko.observable(translator.translate("SharedDomain.Close.Action"));
    var content = ko.observable();
    var footerTemplate = ko.observable('information_footer');
    var okButton = ko.observable(translator.translate("SharedDomain.AcceptButton.Text"));
    var okCallback = undefined;
    var closeCallback = undefined;
    var showCallout = ko.observable(false);
    var calloutStyle = ko.observable();
    var calloutTimeout = ko.observable();
    var htmlTemplate = ko.observable('default_template');
    var htmlData = ko.observable();

    function setHtmlTemplate(htmlTemplateName) {
        htmlTemplate('default_template');
        if (htmlTemplateName) {
            htmlTemplate(htmlTemplateName);
        }
    }

    function error(_ref) {
        var title = _ref.title;
        var message = _ref.message;
        var htmlTemplateName = _ref.htmlTemplateName;
        var callback = _ref.callback;

        showCallout(false);
        calloutTimeout(undefined);
        calloutStyle("error");
        header(title);
        bodyTemplate('modalBody');
        body(message);
        title = title ? title + '.' : " ";
        message != undefined ? content(title + message) : content(title);
        setHtmlTemplate(htmlTemplateName);
        closeCallback = callback;
        showCallout(true);
    }

    function warning(_ref2) {
        var title = _ref2.title;
        var message = _ref2.message;
        var htmlTemplateName = _ref2.htmlTemplateName;

        showCallout(false);
        calloutTimeout(undefined);
        calloutStyle("warning");
        header(title);
        bodyTemplate('modalBody');
        body(message);
        message != undefined ? content(title + '. ' + message) : content(title);
        setHtmlTemplate(htmlTemplateName);
        showCallout(true);
    }

    function success(_ref3) {
        var message = _ref3.message;
        var htmlTemplateName = _ref3.htmlTemplateName;
        var callback = _ref3.callback;

        showCallout(false);
        calloutTimeout(5000);
        calloutStyle("success");
        content(message);
        setHtmlTemplate(htmlTemplateName);
        showCallout(true);
        closeCallback = callback;
    }

    function confirmation(_ref4) {
        var title = _ref4.title;
        var message = _ref4.message;
        var callback = _ref4.callback;

        okCallback = callback;
        footerTemplate('confirmation_footer');
        header(title);
        bodyTemplate('modalBody');
        body(message);
        closeButton(translator.translate("SharedDomain.CancelButton.Text"));
        visible(true);
    }

    function ask(_ref5) {
        var title = _ref5.title;
        var message = _ref5.message;
        var yesButton = _ref5.yesButton;
        var noButton = _ref5.noButton;
        var yesCallback = _ref5.yesCallback;
        var noCallback = _ref5.noCallback;

        okCallback = yesCallback;
        closeCallback = noCallback;
        footerTemplate('ask_footer');
        header(title);
        bodyTemplate('modalBody');
        body(message);
        okButton(yesButton);
        closeButton(noButton);
        visible(true);
    }

    function info(_ref6) {
        var title = _ref6.title;
        var message = _ref6.message;
        var htmlTemplateName = _ref6.htmlTemplateName;

        showCallout(false);
        calloutTimeout(5000);
        calloutStyle("info");
        header(title);
        bodyTemplate('modalBody');
        body(message);
        message != undefined ? content(title + '. ' + message) : content(title);
        setHtmlTemplate(htmlTemplateName);
        showCallout(true);
    }

    function ok() {
        visible(false);
        if (okCallback) {
            setTimeout(okCallback, 1000);
        }
    }

    function okWithoutTimeout() {
        visible(false);
        if (okCallback) {
            okCallback();
        }
    }

    function close() {
        visible(false);
        if (closeCallback) {
            setTimeout(closeCallback, 1000);
        }
    }

    function closeWithoutTimeout() {
        visible(false);
        if (closeCallback) {
            closeCallback();
        }
    }

    return {
        visible: visible,
        header: header,
        body: body,
        closeButton: closeButton,
        bodyTemplate: bodyTemplate,
        footerTemplate: footerTemplate,
        okButton: okButton,
        ok: ok,
        okWithoutTimeout: okWithoutTimeout,
        close: close,
        confirmation: confirmation,
        ask: ask,
        showCallout: showCallout,
        calloutStyle: calloutStyle,
        content: content,
        success: success,
        calloutTimeout: calloutTimeout,
        htmlTemplate: htmlTemplate,
        htmlData: htmlData,
        error: error,
        warning: warning,
        closeWithoutTimeout: closeWithoutTimeout,
        info: info
    };
}

module.exports = exports['default'];

},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = History;

function History() {

    function add(filters) {
        window.history.pushState(undefined, '', currentUrl(filters));
    }

    function back(defaultUrl) {
        if (document.referrer == "") {
            window.location = defaultUrl;
        } else {
            window.location = document.referrer;
        }
    }

    function currentUrl(filters) {
        return document.location.origin + document.location.pathname + '?' + $.param(filters);
    }

    return {
        add: add,
        currentUrl: currentUrl,
        back: back
    };
}

module.exports = exports['default'];

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = NotificationPusher;

function NotificationPusher() {

    function send(title, body, icon) {
        Push.create(title, {
            body: body,
            icon: icon,
            onClick: function onClick() {
                window.focus();
                this.close();
            }
        });
    }

    return {
        send: send
    };
}

module.exports = exports["default"];

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = TranslationService;

function TranslationService(translationsJson, cultureName) {

    function translate(key, parameters) {
        var translation = translationsJson[key];
        if (!translation) return "!" + key + "!";
        if (parameters) {
            for (var i = 0; i < parameters.length; i++) {
                translation = translation.replace("{" + i + "}", parameters[i]);
            }
        }

        return translation || key;
    }

    return {
        translate: translate,
        cultureName: cultureName
    };
}

module.exports = exports["default"];

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var UserPermissions = {
    Workshop: {
        CreateAppointment: 2139
    }
};
exports.UserPermissions = UserPermissions;

},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = UserRightsService;

function UserRightsService(userPermissions) {

    function hasPermission(permissionId) {
        var userPermission = _.find(userPermissions, function (x) {
            return x.PermissionDefinition == permissionId;
        });
        if (userPermission != undefined) return userPermission.HasPermission;
        return false;
    }

    return { hasPermission: hasPermission };
}

module.exports = exports["default"];

},{}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = validationService;

function validationService() {

    function initValidation() {
        ko.validation.init({
            registerExtenders: true,
            messagesOnModified: false,
            insertMessages: false,
            parseInputAttributes: true,
            messageTemplate: null
        }, true);

        registerExtenders();
    }

    function registerExtenders() {
        ko.validation.rules['matchs'] = {
            validator: function validator(value, fieldToCompare) {
                return value === ko.unwrap(fieldToCompare);
            },
            message: 'The fields must have the same value'
        };

        ko.validation.registerExtenders();
    }

    return {
        initValidation: initValidation
    };
}

module.exports = exports['default'];

},{}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = ComponentRegister;

var _dependencyProviderFactory = require("./dependencyProviderFactory");

function ComponentRegister(name, definition) {
    ko.components.register(name, {
        viewModel: {
            createViewModel: function createViewModel(params) {
                var script = definition.script.create ? definition.script.create : definition.script;
                var scriptInstance = script(params, _dependencyProviderFactory.DependencyProviderFactory.get());
                if (definition.script.onCreated) {
                    definition.script.onCreated(scriptInstance, params);
                }
                return scriptInstance;
            }
        },
        template: definition.template
    });
}

module.exports = exports["default"];

},{"./dependencyProviderFactory":58}],11:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"col-lg-5 col-xs-6 callout-container\" data-bind=\"fadeVisible: showCallout\">\n    <div id=\"callout\" data-bind=\"fadeVisible: showCallout, css: calloutStyle, template: { name: htmlTemplate, data: htmlData }\"></div>\n</div>\n<script type=\"text/html\" id=\"default_template\">\n    <button type=\"button\" class=\"close\" data-bind=\"click: close\">×</button>\n    <span data-bind=\"text: message\"></span>\n</script>";
module.exports = exports["default"];

},{}],12:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _componentRegister = require("../../componentRegister");

var _componentRegister2 = _interopRequireDefault(_componentRegister);

var _calloutWindowTemplate = require("./callout-window-template");

var _calloutWindowTemplate2 = _interopRequireDefault(_calloutWindowTemplate);

(0, _componentRegister2["default"])('callout-window', {
    script: function script(props) {
        var showCallout = props.visible;
        var message = props.text;
        var htmlTemplate = props.html ? props.html.template : ko.observable();
        var htmlData = props.html ? props.html.data : ko.observable();
        var actionResult = props.actionResult;
        var calloutStyle = ko.observable();
        var iconStyle = ko.observable();
        var activeTimeout = undefined;
        var closeCallback = function closeCallback() {};

        actionResult.subscribe(function () {
            return setStyle();
        });

        setTemplate();
        setStyle();
        configTimeout(props.timeout);
        if (props.closeCallback) closeCallback = props.closeCallback;

        function close() {
            if (activeTimeout) clearTimeout(activeTimeout);
            showCallout(false);
            closeCallback();
        }

        function determineCssByResult(actionResult) {
            var stylesMap = {
                'success': { alert: "alert alert-success", icon: "icon fa fa-check" },
                'info': { alert: "alert alert-info", icon: "icon fa fa-info" },
                'warning': { alert: "alert alert-warning", icon: "icon fa fa-warning" },
                'error': { alert: "alert alert-error", icon: "icon fa fa-ban" }
            };

            return stylesMap[actionResult] || stylesMap['info'];
        }

        function configTimeout(timeout) {
            showCallout.subscribe(function () {
                if (showCallout()) {
                    if (activeTimeout) clearTimeout(activeTimeout);
                    var calloutTimeout = ko.unwrap(timeout);
                    if (calloutTimeout) {
                        activeTimeout = setTimeout(close, ko.unwrap(timeout));
                    } else {
                        activeTimeout = null;
                    }
                }
            });
        }

        function setTemplate() {
            if (!htmlTemplate()) {
                htmlTemplate("default_template");
            }
            if (htmlTemplate() == "default_template") {
                htmlData({ close: close, iconStyle: iconStyle, message: message });
            }
        }

        function setStyle() {
            var style = determineCssByResult(actionResult());
            calloutStyle(style.alert);
            iconStyle(style.icon);
        }

        return { showCallout: showCallout, message: message, calloutStyle: calloutStyle, iconStyle: iconStyle, close: close, htmlTemplate: htmlTemplate, htmlData: htmlData };
    },
    template: _calloutWindowTemplate2["default"]
});

},{"../../componentRegister":10,"./callout-window-template":11}],13:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"row margin\">\n    <div class=\"tab-content table-responsive\">\n        <div class=\"tab-pane active\">\n            <table class=\"table table-hover table-striped\" data-bind=\"attr: { id: tableId }\">\n                <thead>\n                    <tr data-bind=\"foreach: columns\">\n                        <th data-bind=\"text: label, attr: { class: 'text-' + align }\"></th>\n                    </tr>\n                </thead>\n                <tbody data-bind=\"foreach: { data: rows, as: 'row', afterRender: whenRowRendered }\">\n                    <tr data-bind=\"foreach: { data: $parent.columns, as: 'col' }\">\n                        <td data-bind=\"template: { name: col.type, \n                                                    data: { tdValue: row[col.name], tdClass: 'text-' + col.align } },\n                                        attr: { 'data-order': row[col.name] }\"></td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n\n<script type=\"text/html\" id=\"text\">\n    <div data-bind=\"text: tdValue, attr: { class: tdClass }\"></div>\n</script>\n<script type=\"text/html\" id=\"date\">\n    <div data-bind=\"shortDateText: tdValue, attr: { class: tdClass }\"></div>\n</script>\n<script type=\"text/html\" id=\"icon\">\n    <div data-bind=\"attr: { class: tdClass }\">\n        <img data-bind=\"attr: { src: './Content/img/' + tdValue }\" class=\"table-icon\" />\n    </div>\n</script>";
module.exports = exports["default"];

},{}],14:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = DataTable;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _componentRegister = require("../../componentRegister");

var _componentRegister2 = _interopRequireDefault(_componentRegister);

var _dataTableTemplate = require('./data-table-template');

var _dataTableTemplate2 = _interopRequireDefault(_dataTableTemplate);

(0, _componentRegister2['default'])('data-table', {
    script: {
        create: function create(props) {
            return DataTable({ id: props.id, columnsDefinition: props.columns, rows: props.rows });
        },
        onCreated: function onCreated(script) {
            return script.initialize();
        }
    },
    template: _dataTableTemplate2['default']
});

function DataTable(_ref) {
    var id = _ref.id;
    var columnsDefinition = _ref.columnsDefinition;
    var rows = _ref.rows;

    var columns = ko.observableArray([]);

    function initialize() {
        buildColumns();
    }

    function whenRowRendered(element) {
        if (element[1].rowIndex != rows().length) return;
        create();
    }

    function create() {
        return $('#' + id).DataTable({
            retrieve: true,
            ordering: true,
            searching: false,
            paging: false,
            info: true
        });
    }

    function buildColumns() {
        ko.utils.arrayPushAll(columns, _.map(columnsDefinition, function (colDefinition) {
            return buildColumn(colDefinition);
        }));
    }

    function buildColumn(colDefinition) {
        return {
            name: colDefinition.name,
            label: colDefinition.label,
            type: colDefinition.type || 'text',
            align: colDefinition.align || 'left'
        };
    }

    return {
        initialize: initialize,
        tableId: id,
        columns: columns,
        rows: rows,
        whenRowRendered: whenRowRendered
    };
}

module.exports = exports['default'];

},{"../../componentRegister":10,"./data-table-template":13}],15:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div id=\"dialogs\">\n    <div data-bind=\"modal: {\n                    visible: visible,\n                    header: { data: { label: header} },\n                    body: { name: bodyTemplate, data: { content: body } },\n                    footer: { name: footerTemplate, data: { primaryLabel: okButton, okAction: ok, closeLabel: closeButton, closeAction: close} },\n                    dialogCss: 'modal-auto-width'\n                }\">\n    </div>\n\n    <script type=\"text/html\" id=\"modalBody\">\n        <div data-bind=\"html: content\"></div>\n    </script>\n\n    <script type=\"text/html\" id=\"no_footer\">\n    </script>\n\n    <script type=\"text/html\" id=\"information_footer\">\n        <a href=\"#\" class=\"btn btn-default\" data-bind=\"html: closeLabel\" data-dismiss=\"modal\"></a>\n    </script>\n\n    <script type=\"text/html\" id=\"confirmation_footer\">\n        <a href=\"#\" class=\"btn btn-primary\" data-bind=\"click: okAction, html: primaryLabel\"></a>\n        <a href=\"#\" class=\"btn btn-default\" data-bind=\"html: closeLabel\" data-dismiss=\"modal\"></a>\n    </script>\n\n    <script type=\"text/html\" id=\"ask_footer\">\n        <a href=\"#\" class=\"btn btn-primary\" data-bind=\"click: okAction, html: primaryLabel\"></a>\n        <a href=\"#\" class=\"btn btn-default\" data-bind=\"click: closeAction, html: closeLabel\"></a>\n    </script>\n\n    <div class=\"row\">\n        <callout-window params=\"visible: showCallout, text: content , html: { template: htmlTemplate, data: htmlData }, actionResult: calloutStyle, timeout: calloutTimeout, closeCallback: closeWithoutTimeout\"></callout-window>\n    </div>\n</div>";
module.exports = exports["default"];

},{}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = Dialogs;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _componentRegister = require("../../componentRegister");

var _componentRegister2 = _interopRequireDefault(_componentRegister);

var _dialogPresenterTemplate = require("./dialog-presenter-template");

var _dialogPresenterTemplate2 = _interopRequireDefault(_dialogPresenterTemplate);

var _Dialogs = require("../../Dialogs");

var _Dialogs2 = _interopRequireDefault(_Dialogs);

(0, _componentRegister2["default"])('dialog-presenter', {
    script: {
        create: function create(props, dependencyProvider) {
            return Dialogs({ dialogPublisher: dependencyProvider.getDialogPublisher(), translator: dependencyProvider.getTranslator() });
        },
        onCreated: function onCreated(script) {
            script.initialize();
        }
    },
    template: _dialogPresenterTemplate2["default"]
});

function Dialogs(_ref) {
    var dialogPublisher = _ref.dialogPublisher;
    var translator = _ref.translator;

    var dialogsVm = (0, _Dialogs2["default"])(translator);

    function initialize() {
        dialogPublisher.onSuccess(dgSuccess);
        dialogPublisher.onError(dgError);
        dialogPublisher.onWarning(dgWarning);
        dialogPublisher.onConfirmation(dgConfirmation);
    }

    function dgSuccess(_ref2) {
        var message = _ref2.message;
        var htmlTemplateName = _ref2.htmlTemplateName;

        dialogsVm.success({ message: message, htmlTemplateName: htmlTemplateName });
    }

    function dgError(_ref3) {
        var title = _ref3.title;
        var message = _ref3.message;
        var htmlTemplateName = _ref3.htmlTemplateName;

        dialogsVm.error({ title: title, message: message, htmlTemplateName: htmlTemplateName });
    }

    function dgWarning(_ref4) {
        var title = _ref4.title;
        var message = _ref4.message;
        var htmlTemplateName = _ref4.htmlTemplateName;

        dialogsVm.warning({ title: title, message: message, htmlTemplateName: htmlTemplateName });
    }

    function dgConfirmation(_ref5) {
        var title = _ref5.title;
        var message = _ref5.message;
        var callback = _ref5.callback;

        dialogsVm.confirmation({ title: title, message: message, callback: callback });
    }

    return {
        visible: dialogsVm.visible,
        header: dialogsVm.header,
        body: dialogsVm.body,
        closeButton: dialogsVm.closeButton,
        bodyTemplate: dialogsVm.bodyTemplate,
        footerTemplate: dialogsVm.footerTemplate,
        okButton: dialogsVm.okButton,
        ok: dialogsVm.ok,
        okWithoutTimeout: dialogsVm.okWithoutTimeout,
        close: dialogsVm.close,
        confirmation: dialogsVm.confirmation,
        ask: dialogsVm.ask,
        showCallout: dialogsVm.showCallout,
        calloutStyle: dialogsVm.calloutStyle,
        content: dialogsVm.content,
        success: dialogsVm.success,
        calloutTimeout: dialogsVm.calloutTimeout,
        htmlTemplate: dialogsVm.htmlTemplate,
        htmlData: dialogsVm.htmlData,
        error: dialogsVm.error,
        warning: dialogsVm.warning,
        closeWithoutTimeout: dialogsVm.closeWithoutTimeout,
        info: dialogsVm.info,
        initialize: initialize
    };
}

module.exports = exports["default"];

},{"../../Dialogs":3,"../../componentRegister":10,"./dialog-presenter-template":15}],17:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = "\n<button data-bind=\"click: click, enable: enable, text: text, visible: visible, attr: { class: style }\"></button>";
module.exports = exports["default"];

},{}],18:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _componentRegister = require("../../componentRegister");

var _componentRegister2 = _interopRequireDefault(_componentRegister);

var _formButtonTemplate = require('./form-button-template');

var _formButtonTemplate2 = _interopRequireDefault(_formButtonTemplate);

(0, _componentRegister2['default'])('form-button', {
    script: function script(props) {
        var btnType = props.type || 'default';
        var enable = props.enable || true;
        var visible = props.visible || true;
        var style = "btn btn-" + btnType;

        return {
            click: props.click,
            text: props.text,
            enable: enable,
            visible: visible,
            style: style
        };
    },
    template: _formButtonTemplate2['default']
});

},{"../../componentRegister":10,"./form-button-template":17}],19:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"col-lg-12 col-md-12 form-group\">\n    <label class=\"col-lg-3 col-md-3 control-label\" data-bind=\"text: props.label\"></label>\n    <div class=\"col-lg-9 col-md-9 control-label\">\n        <input class=\"control-data\" type=\"checkbox\" data-bind=\"checked: props.isChecked\" />\n    </div>\n</div>";
module.exports = exports["default"];

},{}],20:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _labeledCheckboxTemplate = require('./labeled-checkbox-template');

var _labeledCheckboxTemplate2 = _interopRequireDefault(_labeledCheckboxTemplate);

ko.components.register('labeled-checkbox', {
    viewModel: function viewModel(params) {
        return {
            props: params
        };
    },
    template: _labeledCheckboxTemplate2['default']
});

},{"./labeled-checkbox-template":19}],21:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"col-lg-12 form-group\" data-bind=\"visible: props.isVisible\">\n    <label class=\"col-lg-3 col-md-12 control-label fix-aligment-two-lines-label\" data-bind=\"text: props.label\"></label>\n    <div class=\"col-lg-9 col-md-12\">\n        <input class=\"control-data\" data-bind=\"datetimepicker: props.value,\n                                                endDate: today,\n                                                viewMode: 'decades',\n                                                css: {'missing-field': props.isMissing}\" />\n        <div class=\"text-red\" data-bind=\"visible: props.isMissing, text: props.missingText\"></div>\n    </div>\n</div>";
module.exports = exports["default"];

},{}],22:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _labeledDateInputTemplate = require('./labeled-date-input-template');

var _labeledDateInputTemplate2 = _interopRequireDefault(_labeledDateInputTemplate);

ko.components.register('labeled-date-input', {
    viewModel: function viewModel(params) {
        var today = moment.utc().format();

        return {
            props: params,
            today: today
        };
    },
    template: _labeledDateInputTemplate2['default']
});

},{"./labeled-date-input-template":21}],23:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"col-lg-12 col-md-12 form-group\" data-bind=\"visible: isVisible\">\n    <div class=\"col-lg-4 col-md-4\">\n        <label class=\"control-label\" data-bind=\"text: label\"></label>\n    </div>\n    <div class=\"col-lg-8 col-md-8\">\n        <input type=\"text\" class=\"control-data\" data-bind=\"value: value, valueUpdate: 'afterkeydown', css: getInputCssClasses()\"/>\n        <!-- ko if: showValidationMessage() -->\n        <div class=\"no-horizontal-padding\">\n            <div class=\"validation-box\">\n                <span class=\"text-red\" data-bind=\"validationMessage: value\"></span>\n            </div>\n        </div>\n        <!-- /ko -->\n    </div>\n</div>";
module.exports = exports["default"];

},{}],24:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _labeledInputTextTemplate = require('./labeled-input-text-template');

var _labeledInputTextTemplate2 = _interopRequireDefault(_labeledInputTextTemplate);

ko.components.register('labeled-input-text', {
    viewModel: function viewModel(props) {
        var inputSize = props.inputSize || "small";
        var isVisible = props.isVisible || true;
        var isValid = props.isValid || function () {
            return true;
        };
        var hideValidationMessage = props.hideValidationMessage;
        var inputSizeClass = getInputSizeCssClass();

        function getInputCssClasses() {
            var additionalClasses = {};
            additionalClasses['missing-field'] = !isValid();
            additionalClasses[inputSizeClass] = true;
            return additionalClasses;
        }

        function getInputSizeCssClass() {
            if (inputSize === "small") {
                return "width-sm";
            }
            if (inputSize === 'medium') {
                return 'width-md';
            }
            throw 'The input size ' + inputSize + ' does not exist for labeled input component';
        }

        function showValidationMessage() {
            var validationMessageMustBeShown = true;
            if (hideValidationMessage !== undefined) validationMessageMustBeShown = false;
            return !isValid() && validationMessageMustBeShown;
        }

        return {
            label: props.label,
            value: props.value,
            isValid: isValid,
            isVisible: isVisible,
            getInputCssClasses: getInputCssClasses,
            showValidationMessage: showValidationMessage
        };
    },
    template: _labeledInputTextTemplate2['default']
});

},{"./labeled-input-text-template":23}],25:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n <div class=\"col-lg-12 form-group\" data-bind=\"visible: props.isVisible\">\n    <label class=\"col-lg-3 col-md-12 control-label\" data-bind=\"text: getLabelText()\"></label>\n    <div class=\"col-lg-9 col-md-12\">\n        <input type=\"text\" class=\"control-data\" data-bind=\"value: props.value, valueUpdate: 'afterkeydown',\n                        css: getInputCssClasses(), attr: { maxlength: props.valueMaxLength }\"/>\n        <div class=\"text-red\" data-bind=\"visible: props.isMissing, text: props.missingText\"></div>\n        <!-- ko if: !props.isValid() -->\n        <div class=\"no-horizontal-padding\" data-bind=\" template:{name:'validation_message', data: {field: props.value}}\"></div>\n        <!-- /ko -->\n    </div>\n</div>";
module.exports = exports["default"];

},{}],26:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _labeledInputWithMissingTemplate = require('./labeled-input-with-missing-template');

var _labeledInputWithMissingTemplate2 = _interopRequireDefault(_labeledInputWithMissingTemplate);

ko.components.register('labeled-input-with-missing', {
    viewModel: function viewModel(params) {
        var props = params;
        props.isVisible = props.isVisible || true;
        props.isMissing = props.isMissing || false;
        props.missingText = props.missingText || "";
        props.inputSize = props.inputSize || "medium";
        props.isMandatory = props.isMandatory || false;
        props.isValid = props.isValid || function () {
            return true;
        };

        function getLabelText() {
            var labelText = props.label;
            if (props.isMandatory) {
                return labelText + "*";
            }
            return labelText;
        }

        function getInputCssClasses() {
            var additionalClasses = {};
            additionalClasses['missing-field'] = props.isMissing || !props.isValid();
            additionalClasses[getInputSizeCssClass()] = true;
            return additionalClasses;
        }

        function getInputSizeCssClass() {
            if (props.inputSize === "small") {
                return "width-sm";
            }
            if (props.inputSize === 'medium') {
                return 'width-md';
            }
            throw 'The input size ' + props.inputSize + ' does not exist for labeled input component';
        }

        return {
            props: props,
            getInputCssClasses: getInputCssClasses,
            getLabelText: getLabelText
        };
    },
    template: _labeledInputWithMissingTemplate2['default']
});

},{"./labeled-input-with-missing-template":25}],27:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"col-lg-12 form-group\" data-bind=\"visible: props.isVisible\">\n    <label class=\"col-lg-3 col-md-12 control-label\" data-bind=\"text: props.label\"></label>\n    <div class=\"col-lg-9 col-md-12\">\n        <select class=\"width-md\" data-bind=\"options: props.options,\n                                            optionsText: props.textProperty,\n                                            optionsValue: props.valueProperty,\n                                            value: props.value,\n                                            optionsCaption: props.hint,\n                                            css: {'missing-field': props.isMissing}\">\n        </select>\n        <div class=\"text-red\" data-bind=\"visible: props.isMissing, text: props.missingText\"></div>\n    </div>\n</div>";
module.exports = exports["default"];

},{}],28:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _labeledOptionsTemplate = require('./labeled-options-template');

var _labeledOptionsTemplate2 = _interopRequireDefault(_labeledOptionsTemplate);

ko.components.register('labeled-options', {
    viewModel: function viewModel(props) {
        return { props: props };
    },

    template: _labeledOptionsTemplate2['default']
});

},{"./labeled-options-template":27}],29:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<label class=\"with-margin-rigth clickable\" data-bind=\"text: props.label\"></label>\n<div class=\"radio-orange\" data-bind=\"click: props.onClick, css: { 'checked': props.isChecked() }\">\n    <input type=\"radio\" class=\"without-opacity\">\n</div> ";
module.exports = exports["default"];

},{}],30:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _labeledRadioButtonTemplate = require('./labeled-radio-button-template');

var _labeledRadioButtonTemplate2 = _interopRequireDefault(_labeledRadioButtonTemplate);

ko.components.register('labeled-radio-button', {
    viewModel: function viewModel(params) {
        return { props: params };
    },
    template: _labeledRadioButtonTemplate2['default']
});

},{"./labeled-radio-button-template":29}],31:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"col-lg-12 form-group\">\n    <label class=\"col-lg-3 col-md-12 control-label\" data-bind=\"text: props.label\"></label>\n    <div class=\"col-lg-9 col-md-12\">\n        <div class=\"width-md\">\n            <select data-bind=\"optionsSelect2: props.options,\n                    optionsCaption: props.hint,\n                    valueSelect2: props.value,\n                    optionsText: props.textProperty,\n                    isMissing: props.isMissing\"></select>\n            <div class=\"text-red\" data-bind=\"visible: props.isMissing, text: props.missingText\"></div>\n        </div>\n    </div>\n</div>";
module.exports = exports["default"];

},{}],32:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _labeledSearchableOptionsTemplate = require('./labeled-searchable-options-template');

var _labeledSearchableOptionsTemplate2 = _interopRequireDefault(_labeledSearchableOptionsTemplate);

ko.components.register('labeled-searchable-options', {
    viewModel: function viewModel(props) {
        return { props: props };
    },
    template: _labeledSearchableOptionsTemplate2['default']
});

},{"./labeled-searchable-options-template":31}],33:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"margin col-lg-12 col-md-12 form-group\">\n    <label class=\"col-lg-3 col-md-6 control-label\" data-bind=\"text: props.label\"></label>\n    <div class=\"col-lg-9 col-md-6\">\n        <label class=\"inline-control-data\" data-bind=\"text: props.value\" />\n    </div>\n</div>";
module.exports = exports["default"];

},{}],34:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _labeledValueTemplate = require('./labeled-value-template');

var _labeledValueTemplate2 = _interopRequireDefault(_labeledValueTemplate);

ko.components.register('labeled-value', {
    viewModel: function viewModel(params) {
        return { props: params };
    },
    template: _labeledValueTemplate2['default']
});

},{"./labeled-value-template":33}],35:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"box-tools\">\n    <form data-bind=\"submit: function() { search(); }\">\n        <div class=\"input-group input-group-sm pull-right\">\n            <input type=\"text\" data-bind=\"value: searchTerm, attr: {placeholder: labels.search}\" class=\"form-control\">\n            <div class=\"input-group-btn\">\n                <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fa fa-search\"></i></button>\n                <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: clear\"><i class=\"fa fa-remove\"></i></button>\n            </div>\n        </div>\n    </form>\n</div>";
module.exports = exports["default"];

},{}],36:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _componentRegister = require("../../componentRegister");

var _componentRegister2 = _interopRequireDefault(_componentRegister);

var _searchBoxTemplate = require("./search-box-template");

var _searchBoxTemplate2 = _interopRequireDefault(_searchBoxTemplate);

(0, _componentRegister2["default"])('search-box', {
    script: {
        create: function create(props, dependencyProvider) {
            var translator = dependencyProvider.getTranslator();

            function clear() {
                props.searchTerm('');
                if (props.onClear) props.onClear();
            }

            function getLabels() {
                return {
                    search: translator.translate("SharedDomain.SearchButton.Text")
                };
            }

            return {
                labels: getLabels(),
                searchTerm: props.searchTerm,
                search: props.onSearch,
                clear: clear
            };
        }
    },
    template: _searchBoxTemplate2["default"]
});

},{"../../componentRegister":10,"./search-box-template":35}],37:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = ColumnsDefinitionBuilder;

function ColumnsDefinitionBuilder() {
    var definitions = [];

    function addColumn(name, label) {
        var type = arguments.length <= 2 || arguments[2] === undefined ? 'text' : arguments[2];
        var align = arguments.length <= 3 || arguments[3] === undefined ? 'left' : arguments[3];
        var hideWhen = arguments.length <= 4 || arguments[4] === undefined ? 'never' : arguments[4];

        definitions.push({ name: name, label: label, type: type, align: align, hideWhen: hideWhen });
    }

    function build() {
        return definitions;
    }

    return {
        build: build,
        addColumn: addColumn
    };
}

module.exports = exports['default'];

},{}],38:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"row margin\">\n    <div class=\"tab-content table-responsive\">\n        <div class=\"tab-pane active\">\n            <table class=\"table table-hover table-striped\">\n                <thead>\n                    <tr data-bind=\"foreach: {data: columns, as: 'head'}\">\n                        <th data-bind=\"text: head.label, attr: { class: head.align + ' ' + head.class}\"></th>\n                    </tr>\n                </thead>\n                <tbody data-bind=\"foreach: {data: rows, as: 'row'}\">\n                    <tr data-bind=\"foreach: {data: $parent.columns, as: 'col'}, click: $parent.onRowClick.bind($data)\">\n                        <td data-bind=\"attr: {class: col.class}, template: { name: col.type, data: { tdValue: row[col.name], tdClass: col.align } }\"></td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n\n<script type=\"text/html\" id=\"text\">\n    <div data-bind=\"text: tdValue, attr: { class: tdClass }\"></div>\n</script>\n<script type=\"text/html\" id=\"date\">\n    <div data-bind=\"shortDateText: tdValue, attr: { class: tdClass }\"></div>\n</script>\n<script type=\"text/html\" id=\"icon\">\n    <div data-bind=\"attr: { class: tdClass }\">\n        <img data-bind=\"attr: { src: './Content/img/' + tdValue }\" class=\"table-icon\" />\n    </div>\n</script>";
module.exports = exports["default"];

},{}],39:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = SearchResultsTable;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _componentRegister = require("../../componentRegister");

var _componentRegister2 = _interopRequireDefault(_componentRegister);

var _searchResultsTableTemplate = require('./search-results-table-template');

var _searchResultsTableTemplate2 = _interopRequireDefault(_searchResultsTableTemplate);

(0, _componentRegister2['default'])('search-results-table', {
    script: {
        create: function create(props) {
            return SearchResultsTable({ columnsDefinition: props.columns, rows: props.rows, whenRowClick: props.whenRowClick });
        }
    },
    template: _searchResultsTableTemplate2['default']
});

function SearchResultsTable(_ref) {
    var columnsDefinition = _ref.columnsDefinition;
    var rows = _ref.rows;
    var whenRowClick = _ref.whenRowClick;

    var onRowClick = whenRowClick || function () {};

    function buildColumns() {
        return _.map(columnsDefinition, function (colDefinition) {
            return buildColumn(colDefinition);
        });
    }

    function buildColumn(colDefinition) {
        return {
            name: colDefinition.name,
            label: colDefinition.label,
            type: colDefinition.type || 'text',
            align: getCssForAlignment(colDefinition.align),
            'class': getCssForHiding(colDefinition.hideWhen)
        };
    }

    function getCssForHiding(hideWhen) {
        var hideWhenDictionary = {
            'never': '',
            'extra-small': 'hidden-xs',
            'small': 'hidden-sm hidden-xs',
            'medium': 'hidden-md hidden-sm hidden-xs',
            'large': 'hidden-lg hidden-md hidden-sm hidden-xs'
        };
        return hideWhenDictionary[hideWhen];
    }

    function getCssForAlignment(align) {
        if (!align) return "text-left";
        return "text-" + align;
    }

    return {
        columns: buildColumns(),
        rows: rows,
        onRowClick: onRowClick
    };
}

module.exports = exports['default'];

},{"../../componentRegister":10,"./search-results-table-template":38}],40:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"pull-right\">\n    <label data-bind=\"text: label\"></label>\n    <select data-bind=\"options: values,\n                       value: value,\n                       event: {change:  onChange }\" class=\"input-sm\">\n    </select>\n</div>";
module.exports = exports["default"];

},{}],41:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = SearchSelectTop;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _componentRegister = require('../../componentRegister');

var _componentRegister2 = _interopRequireDefault(_componentRegister);

var _searchSelectTopTemplate = require('./search-select-top-template');

var _searchSelectTopTemplate2 = _interopRequireDefault(_searchSelectTopTemplate);

(0, _componentRegister2['default'])('search-select-top', {
    script: function script(props, dependencyProvider) {
        var defaultValue = props.defaultValue;
        var values = props.values;
        var translator = dependencyProvider.getTranslator();
        var callBack = props.onChange;

        return SearchSelectTop({ defaultValue: defaultValue, values: values, translator: translator, callBack: callBack });
    },
    template: _searchSelectTopTemplate2['default']
});

function SearchSelectTop(_ref) {
    var defaultValue = _ref.defaultValue;
    var values = _ref.values;
    var translator = _ref.translator;
    var callBack = _ref.callBack;

    var value = ko.observable(defaultValue);
    var label = translator.translate('SharedDomain.ShowResults.Label');

    function onChange() {
        callBack(value());
    }

    return {
        values: values,
        value: value,
        label: label,
        onChange: onChange
    };
}

module.exports = exports['default'];

},{"../../componentRegister":10,"./search-select-top-template":40}],42:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"form-group\">\n    <!-- ko if: label != undefined -->\n    <label class=\"col-sm-2\" data-bind=\"text: label\"></label>\n    <!-- /ko -->\n    <div data-bind=\"css: {'col-sm-10': (label != undefined), 'col-md-12': (label == undefined)}\">\n        <!-- ko ifnot: urlToSearch -->        \n        <select class=\"form-control\" data-bind=\"optionsSelect2: options,\n                                                optionsCaption: placeholder,\n                                                valueSelect2: selected,\n                                                optionsText: optionsText,\n                                                enable: enabled,\n                                                allowClearSelect2: allowUnselect,\n                                                dropdownCssClass: 'bigdrop'\">\n        </select>\n        <!-- /ko -->\n\n        <!-- ko if: urlToSearch -->\n        <select class=\"form-control\" data-bind=\"optionsRemoteSelect2: urlToSearch,\n                                               placeholderSelect2: placeholder,\n                                               valueSelect2: selected,\n                                               optionsText: optionsText,\n                                               allowClearSelect2: allowUnselect,\n                                               minimumInputLengthSelect2: minInputLength\"></select>\n        <!-- /ko -->\n    </div>\n</div>";
module.exports = exports["default"];

},{}],43:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = ListSelectorScript;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _componentRegister = require('../../componentRegister');

var _componentRegister2 = _interopRequireDefault(_componentRegister);

var _searchSelectTemplate = require('./search-select-template');

var _searchSelectTemplate2 = _interopRequireDefault(_searchSelectTemplate);

(0, _componentRegister2['default'])('search-select', {
    script: function script(props) {
        var params = {
            label: props.label,
            placeholder: props.placeholder,
            options: props.options,
            enableEvents: props.enableEvents,
            allowUnselect: props.allowUnselect != undefined ? props.allowUnselect : true,
            selected: props.selected,
            whenSelected: props.whenSelected,
            urlToSearch: props.urlToSearch,
            optionsText: props.optionsText || 'description'
        };
        return new ListSelectorScript(params);
    },
    template: _searchSelectTemplate2['default']
});

function ListSelectorScript(_ref) {
    var label = _ref.label;
    var placeholder = _ref.placeholder;
    var options = _ref.options;
    var selected = _ref.selected;
    var enableEvents = _ref.enableEvents;
    var allowUnselect = _ref.allowUnselect;
    var whenSelected = _ref.whenSelected;
    var urlToSearch = _ref.urlToSearch;
    var optionsText = _ref.optionsText;

    var enabled = ko.computed(function () {
        return options != undefined && options().length > 0;
    });
    var eventsEnabled = ko.unwrap(enableEvents) || true;
    var minInputLength = 3;

    selected.subscribe(function (optionSelected) {
        if (eventsEnabled && whenSelected) {
            whenSelected(optionSelected);
        }
    });

    return {
        label: label,
        placeholder: placeholder,
        options: options,
        enabled: enabled,
        selected: selected,
        allowUnselect: allowUnselect,
        urlToSearch: urlToSearch,
        minInputLength: minInputLength,
        optionsText: optionsText
    };
}

module.exports = exports['default'];

},{"../../componentRegister":10,"./search-select-template":42}],44:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"row box-body\">\n    <!-- ko with: $parent -->\n    <!-- ko template: { nodes: $componentTemplateNodes } -->\n    <!-- /ko -->\n    <!-- /ko -->\n</div>";
module.exports = exports["default"];

},{}],45:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _sectionBodyTemplate = require('./section-body-template');

var _sectionBodyTemplate2 = _interopRequireDefault(_sectionBodyTemplate);

ko.components.register('section-body', {
    viewModel: function viewModel(props) {
        return { props: props };
    },
    template: _sectionBodyTemplate2['default']
});

},{"./section-body-template":44}],46:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"box box-detail\">\n    <div class=\"box-header\">\n        <h3 class=\"box-title width-full\">\n            <button type=\"button\" class=\"btn btn-collapse pull-right\" data-toggle=\"collapse\" data-bind=\"click: toggleVisibility, attr: { 'data-target': '#' + collapsableElementId }\">\n                <i data-bind=\" css: { 'fa-minus': !collapsed(), 'fa-plus': collapsed }\" class=\"fa\"></i>\n            </button>\n            <div data-bind=\"text: title\"></div>\n        </h3>\n    </div>\n    <!-- ko with: $parent -->\n    <!-- ko template: { nodes: $componentTemplateNodes } --><!-- /ko --> \n    <!-- /ko --> \n</div>";
module.exports = exports["default"];

},{}],47:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = SectionBoxVm;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _sectionBoxCollapsableTemplate = require('./section-box-collapsable-template');

var _sectionBoxCollapsableTemplate2 = _interopRequireDefault(_sectionBoxCollapsableTemplate);

function SectionBoxVm(params) {
    var title = params.title;
    var collapsableElementId = params.collapsableElementId;
    var whenExpanded = params.whenExpanded;
    var collapsed = ko.observable(true);

    function toggleVisibility() {
        if (collapsed()) {
            collapsed(false);
            if (whenExpanded) {
                whenExpanded();
            }
            return;
        }
        collapsed(true);
    }

    return {
        collapsed: collapsed,
        collapsableElementId: collapsableElementId,
        toggleVisibility: toggleVisibility,
        title: title
    };
}

ko.components.register('section-box-collapsable', {
    viewModel: SectionBoxVm,
    template: _sectionBoxCollapsableTemplate2['default']
});
module.exports = exports['default'];

},{"./section-box-collapsable-template":46}],48:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"box box-detail\">\n    <div class=\"box-header\" data-bind=\"visible: headerVisible\">\n        <h3 class=\"box-title\" data-bind=\"text: props.title\"></h3>\n    </div>\n    <div data-bind=\"if: props.isShown, visible: props.isShown\" style=\"display: none\">\n        <!-- ko with: $parent -->\n        <!-- ko template: { nodes: $componentTemplateNodes } --><!-- /ko --> \n        <!-- /ko --> \n    </div>\n</div>";
module.exports = exports["default"];

},{}],49:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _sectionBoxTemplate = require('./section-box-template');

var _sectionBoxTemplate2 = _interopRequireDefault(_sectionBoxTemplate);

ko.components.register('section-box', {
    viewModel: function viewModel(props) {

        var headerVisible = _.isObject(props.title);

        return {
            props: props,
            headerVisible: headerVisible
        };
    },
    template: _sectionBoxTemplate2['default']
});

},{"./section-box-template":48}],50:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"box-footer\">\n    <div class=\"pull-right\">\n        <!-- ko with: $parent -->\n        <!-- ko template: { nodes: $componentTemplateNodes } --><!-- /ko --> \n        <!-- /ko -->\n    </div>\n</div>";
module.exports = exports["default"];

},{}],51:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _sectionFooterTemplate = require('./section-footer-template');

var _sectionFooterTemplate2 = _interopRequireDefault(_sectionFooterTemplate);

ko.components.register('section-footer', {
    viewModel: function viewModel(props) {
        return { props: props };
    },
    template: _sectionFooterTemplate2['default']
});

},{"./section-footer-template":50}],52:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
                    value: true
});
exports["default"] = "\n<!-- ko if: label -->\n<label data-bind=\"text: label\"></label>\n<!-- /ko -->\n<select data-bind=\"options: options,\n                    optionsValue: 'id',\n                    optionsText: 'description',\n                    value: value,\n                    event: { change: function() { if(onSelected) { onSelected(); }} }\" class=\"input-sm\"></select>";
module.exports = exports["default"];

},{}],53:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _componentRegister = require('../../componentRegister');

var _componentRegister2 = _interopRequireDefault(_componentRegister);

var _simpleSelectTemplate = require('./simple-select-template');

var _simpleSelectTemplate2 = _interopRequireDefault(_simpleSelectTemplate);

(0, _componentRegister2['default'])('simple-select', {
    script: {
        create: function create(props) {
            return {
                label: props.label,
                options: props.options,
                value: props.value,
                onSelected: props.onSelected
            };
        }
    },
    template: _simpleSelectTemplate2['default']
});

},{"../../componentRegister":10,"./simple-select-template":52}],54:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _componentRegister = require("../../componentRegister");

var _componentRegister2 = _interopRequireDefault(_componentRegister);

(0, _componentRegister2["default"])('spinner', {
    script: function script(props) {
        return {
            visible: props.show
        };
    },
    template: "<div class=\"overlay\" data-bind=\"visible: visible\"><i class=\"fa fa-refresh fa-spinner\"></i></div>"
});

},{"../../componentRegister":10}],55:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<i data-bind=\"visible: isVisible, text: translator.translate('SharedDomain.NoResults')\" \n    class=\"no-results-text\">\n</i>";
module.exports = exports["default"];

},{}],56:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _tableEmptyContentTemplate = require('./table-empty-content-template');

var _tableEmptyContentTemplate2 = _interopRequireDefault(_tableEmptyContentTemplate);

ko.components.register('table-empty-content', {
    viewModel: function viewModel(params) {
        return {
            translator: params.translator,
            isVisible: params.isVisible
        };
    },

    template: _tableEmptyContentTemplate2['default']
});

},{"./table-empty-content-template":55}],57:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = DependencyProvider;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _translationService = require("./translationService");

var _translationService2 = _interopRequireDefault(_translationService);

var _validator = require("./validator");

var _validator2 = _interopRequireDefault(_validator);

var _dialogPublisher = require("./dialogPublisher");

var _errorDialogPublisher = require("./errorDialogPublisher");

var _errorDialogPublisher2 = _interopRequireDefault(_errorDialogPublisher);

function DependencyProvider() {
    var translatorInstance = undefined;
    var restClientInstance = undefined;
    var errorDialogPublisher = undefined;
    var baseUrlInstance = undefined;
    var apiBaseUrlInstance = undefined;

    function createTranslator(translations, cultureName) {
        translatorInstance = (0, _translationService2["default"])(translations, cultureName);
    }

    function createErrorDialogPublisher(errorMessages) {
        errorDialogPublisher = (0, _errorDialogPublisher2["default"])(getDialogPublisher(), errorMessages);
    }

    function getErrorDialogPublisher() {
        return errorDialogPublisher;
    }

    function setRestClient(restClient) {
        restClientInstance = restClient;
    }

    function getRestClient() {
        return restClientInstance;
    }

    function getTranslator() {
        return translatorInstance;
    }

    function getValidator() {
        return (0, _validator2["default"])(translatorInstance);
    }

    function getDialogPublisher() {
        return _dialogPublisher.DialogPublisher;
    }

    function getBaseUrl() {
        return baseUrlInstance;
    }

    function setBaseUrl(baseUrl) {
        baseUrlInstance = baseUrl;
    }

    function getApiBaseUrl() {
        return apiBaseUrlInstance;
    }

    function setApiBaseUrl(apiBaseUrl) {
        apiBaseUrlInstance = apiBaseUrl;
    }

    return {
        createTranslator: createTranslator,
        getTranslator: getTranslator,
        setRestClient: setRestClient,
        getRestClient: getRestClient,
        getValidator: getValidator,
        getDialogPublisher: getDialogPublisher,
        createErrorDialogPublisher: createErrorDialogPublisher,
        getErrorDialogPublisher: getErrorDialogPublisher,
        getBaseUrl: getBaseUrl,
        setBaseUrl: setBaseUrl,
        getApiBaseUrl: getApiBaseUrl,
        setApiBaseUrl: setApiBaseUrl
    };
}

module.exports = exports["default"];

},{"./dialogPublisher":59,"./errorDialogPublisher":61,"./translationService":82,"./validator":84}],58:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _dependencyProvider = require('./dependencyProvider');

var _dependencyProvider2 = _interopRequireDefault(_dependencyProvider);

var DependencyProviderFactory = (function () {

    var dependencyProvider = undefined;

    function get() {
        if (!dependencyProvider) {
            dependencyProvider = (0, _dependencyProvider2['default'])();
        }
        return dependencyProvider;
    }

    return {
        get: get
    };
})();
exports.DependencyProviderFactory = DependencyProviderFactory;

},{"./dependencyProvider":57}],59:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var DialogPublisher = (function () {

    var onSuccessCallback = function onSuccessCallback() {};
    var onWarningCallback = function onWarningCallback() {};
    var onErrorCallback = function onErrorCallback() {};
    var confirmationCallback = function confirmationCallback() {};

    function success(_ref) {
        var message = _ref.message;
        var htmlTemplate = _ref.htmlTemplate;

        onSuccessCallback({ message: message, htmlTemplate: htmlTemplate });
    }

    function onSuccess(callback) {
        onSuccessCallback = callback;
    }

    function onWarning(callback) {
        onWarningCallback = callback;
    }

    function warning(_ref2) {
        var title = _ref2.title;
        var message = _ref2.message;
        var htmlTemplate = _ref2.htmlTemplate;

        onWarningCallback({ title: title, message: message, htmlTemplate: htmlTemplate });
    }

    function onError(callback) {
        onErrorCallback = callback;
    }

    function error(_ref3) {
        var title = _ref3.title;
        var message = _ref3.message;
        var htmlTemplate = _ref3.htmlTemplate;

        onErrorCallback({ title: title, message: message, htmlTemplate: htmlTemplate });
    }

    function onConfirmation(callback) {
        confirmationCallback = callback;
    }

    function confirmation(_ref4) {
        var title = _ref4.title;
        var message = _ref4.message;
        var callback = _ref4.callback;

        confirmationCallback({ title: title, message: message, callback: callback });
    }

    return {
        success: success,
        onSuccess: onSuccess,
        warning: warning,
        onWarning: onWarning,
        error: error,
        onError: onError,
        onConfirmation: onConfirmation,
        confirmation: confirmation
    };
})();
exports.DialogPublisher = DialogPublisher;

},{}],60:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = ErrorMessagesExtractor;

function ErrorMessagesExtractor(messages, htmlTemplates, whenNotFoundMessage) {

    function extractErrorDetail(xhr) {
        if (xhr && xhr.responseText != '') {
            return $.parseJSON(xhr.responseText);
        }
        return {};
    }

    function extractMessageFor(errorType, errorDetail) {
        var message = messages[errorType];
        if (!message) return whenNotFoundMessage();
        return message(extractErrorDetail(errorDetail));
    }

    function extractHtmlFor(errorType, errorDetail) {
        var template = htmlTemplates[errorType];
        if (!template) return null;
        return template(extractErrorDetail(errorDetail));
    }

    return {
        extractMessageFor: extractMessageFor,
        extractHtmlFor: extractHtmlFor
    };
}

module.exports = exports['default'];

},{}],61:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = ErrorDialogPublisher;

function ErrorDialogPublisher(dialogPublisher, errorMessages) {

    function publish(errorType, title, xhr, errorCallback, handlerType) {
        var message = errorMessages['for'](errorType, xhr);
        var htmlTemplateName = errorMessages.htmlTemplateFor(errorType, xhr);
        if (handlerType == 'warning') {
            dialogPublisher.warning({ title: title, message: message, htmlTemplateName: htmlTemplateName });
        } else {
            dialogPublisher.error({ title: title, message: message, htmlTemplateName: htmlTemplateName });
        }
        if (errorCallback) {
            errorCallback();
        }
    }

    return {
        publish: publish
    };
}

module.exports = exports['default'];

},{}],62:[function(require,module,exports){
'use strict';

ko.components.register('action-button', {
    viewModel: {
        createViewModel: function createViewModel(params) {
            return {
                mainIcon: params.mainIcon || 'fa-ellipsis-h',
                visible: params.visible || true,
                enable: params.enable || true,
                actions: params.actions
            };
        }
    },
    template: '<span class="dropdown">\n            <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" data-bind="enable: enable, visible: visible">                <span><i class="fa" data-bind="css: mainIcon"></i></span>\n            </button>\n            <ul class="dropdown-menu pull-right" data-bind="foreach: actions">                <li><a href="#" data-bind="click: action, text: title, visible: isVisible"></a></li>            </ul>\n        </span>'
});

},{}],63:[function(require,module,exports){
"use strict";

ko.bindingHandlers.aidadaterangepicker = {
    update: function update(element, valueAccessor, allBindings) {
        var startDate = valueAccessor();
        var endDate = allBindings.get("endDate");
        var minDate = allBindings.get("minDate") || moment();
        var formatPattern = allBindings.get("formatPattern");
        var applyLabel = allBindings.get("applyLabel") || "Apply";
        var cancelLabel = allBindings.get("cancelLabel") || "Cancel";
        var sDate = moment(startDate());
        var eDate = moment(endDate());

        $(element).daterangepicker({
            timePicker: true,
            timePicker24Hour: true,
            timePickerIncrement: 15,
            locale: {
                format: formatPattern,
                applyLabel: applyLabel,
                cancelLabel: cancelLabel
            },
            startDate: sDate,
            endDate: eDate,
            buttonClasses: "btn",
            applyClass: "btn-primary",
            minDate: minDate
        });

        $(element).on('apply.daterangepicker', function (ev, picker) {
            startDate(toISO8601Format(picker.startDate));
            endDate(toISO8601Format(picker.endDate));
        });

        function toISO8601Format(date) {
            if (!date) return null;
            return moment(date, 'L').toISOString();
        }
    }
};

},{}],64:[function(require,module,exports){
'use strict';

ko.components.register('callout', {
    viewModel: {
        createViewModel: function createViewModel(params) {
            var showCallout = params.visible;
            var message = params.text;
            var htmlTemplate = params.html ? params.html.template : ko.observable();
            var htmlData = params.html ? params.html.data : ko.observable();
            var actionResult = params.actionResult;
            var calloutStyle = ko.observable();
            var iconStyle = ko.observable();
            var activeTimeout = undefined;
            var closeCallback = function closeCallback() {};

            actionResult.subscribe(function () {
                return setStyle();
            });

            setTemplate();
            setStyle();
            configTimeout(params.timeout);
            if (params.closeCallback) closeCallback = params.closeCallback;

            function closeCallout() {
                if (activeTimeout) clearTimeout(activeTimeout);
                showCallout(false);
                closeCallback();
            }

            function determineCssByResult(actionResult) {
                var stylesMap = {
                    'success': { alert: "alert alert-success", icon: "icon fa fa-check" },
                    'info': { alert: "alert alert-info", icon: "icon fa fa-info" },
                    'warning': { alert: "alert alert-warning", icon: "icon fa fa-warning" },
                    'error': { alert: "alert alert-error", icon: "icon fa fa-ban" }
                };

                return stylesMap[actionResult] || stylesMap['info'];
            }

            function configTimeout(timeout) {
                showCallout.subscribe(function () {
                    if (showCallout()) {
                        if (activeTimeout) clearTimeout(activeTimeout);
                        var calloutTimeout = ko.unwrap(timeout);
                        if (calloutTimeout) {
                            activeTimeout = setTimeout(closeCallout, ko.unwrap(timeout));
                        } else {
                            activeTimeout = null;
                        }
                    }
                });
            }

            function setTemplate() {
                if (!htmlTemplate()) {
                    htmlTemplate("default_template");
                }
                if (htmlTemplate() == "default_template") {
                    htmlData({ closeCallout: closeCallout, iconStyle: iconStyle, message: message });
                }
            }
            function setStyle() {
                var style = determineCssByResult(actionResult());
                calloutStyle(style.alert);
                iconStyle(style.icon);
            }

            return { showCallout: showCallout, message: message, calloutStyle: calloutStyle, iconStyle: iconStyle, closeCallout: closeCallout, htmlTemplate: htmlTemplate, htmlData: htmlData };
        }
    },

    template: '<div class="col-lg-5 col-xs-6 callout-container" data-bind="fadeVisible: showCallout">\
        <div id="callout" data-bind="fadeVisible: showCallout, css: calloutStyle, template: { name: htmlTemplate, data: htmlData }"></div>\
    </div>\
    <script type="text/html" id="default_template">\
            <button type="button" class="close" data-bind="click: closeCallout">×</button>\
            <span data-bind="text: message"></span>\
    </script>'
});

},{}],65:[function(require,module,exports){
'use strict';

ko.components.register('columncheckbox', {
    viewModel: {
        createViewModel: function createViewModel(params) {
            var select = params.select;
            var unselect = params.unselect;
            var checked = params.checked;

            checked.subscribe(function () {
                if (checked()) select();
                if (!checked()) unselect();
            });

            return { checked: checked };
        }
    },

    template: '<input id="columnChecker" type="checkbox" data-bind="checked: checked">'
});

},{}],66:[function(require,module,exports){
"use strict";

ko.bindingHandlers.datepicker = {
    init: function init(element, valueAccessor, allBindingsAccessor) {
        var selectedDate = getInitialValue();
        var endDate = allBindingsAccessor.get("endDate");
        var language = allBindingsAccessor.get("language");
        var startView = getStartView();
        var startDate = allBindingsAccessor.get("startDate");
        var clearButton = allBindingsAccessor.get("clearButton");
        var updating = false;

        $(element).datepicker({
            format: {
                toDisplay: function toDisplay(date) {
                    return moment(date).format('L');
                },
                toValue: function toValue(dateAsString) {
                    var date = moment(dateAsString, "L");
                    if (date.isValid()) {
                        return date.toDate();
                    }
                    return dateAsString ? moment(dateAsString).toDate() : null;
                }
            },
            endDate: endDate,
            language: language,
            startView: startView,
            startDate: startDate,
            clearBtn: clearButton,
            autoclose: true,
            orientation: "bottom auto"
        });

        $(element).on("changeDate", function () {
            updating = true;
            var date = $(element).datepicker('getFormattedDate');
            selectedDate(toISO8601Format(date));
            updating = false;
        });

        $(element).addClass("datepicker");

        selectedDate.subscribe(function () {
            if (updating) return;
            updateDatePickerValue();
        });

        function getInitialValue() {
            var initialDate = valueAccessor();
            if (initialDate()) {
                return initialDate;
            }

            if (allBindingsAccessor.get("initialValue")) {
                var initialValue = allBindingsAccessor.get("initialValue");
                initialDate(initialValue);
            }
            return initialDate;
        }

        function getStartView() {
            var DAY_VIEW = 0;
            if (allBindingsAccessor.get("startView")) {
                return allBindingsAccessor.get("startView");
            }
            return DAY_VIEW;
        }

        function updateDatePickerValue() {
            $(element).datepicker('update', selectedDate());
        }

        function toISO8601Format(date) {
            if (!date) return null;
            return moment(date, 'L').toISOString();
        }

        updateDatePickerValue();

        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            $(element).datepicker('destroy');
        });
    }
};

},{}],67:[function(require,module,exports){
"use strict";

ko.bindingHandlers.datetimepicker = {
    init: function init(element, valueAccessor, allBindingsAccessor) {
        var selectedDate = getInitialValue();
        var endDate = allBindingsAccessor.get("endDate");
        var startDate = allBindingsAccessor.get("startDate");
        var viewMode = getViewMode();
        var clearButton = allBindingsAccessor.get("clearButton");
        var inline = allBindingsAccessor.get("inline") ? allBindingsAccessor.get("inline") : false;
        var subscriptionToStartDate = undefined;

        subscribeToStartDateChanges();

        $(element).datetimepicker({
            format: 'L',
            locale: moment.locale(),
            minDate: ko.unwrap(startDate),
            maxDate: endDate,
            viewMode: viewMode,
            showClear: clearButton,
            showClose: clearButton,
            inline: inline,
            keepOpen: false
        });

        $(element).data("DateTimePicker").date(moment(selectedDate()));

        ko.utils.registerEventHandler(element, "dp.change", function (event) {
            if (ko.isObservable(selectedDate)) {
                selectedDate(toISO8601Format(event.date));
            }
        });

        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            var picker = $(element).data("DateTimePicker");
            if (picker) {
                picker.destroy();
            }
            if (subscriptionToStartDate) {
                subscriptionToStartDate.dispose();
            }
        });

        function subscribeToStartDateChanges() {
            if (ko.isObservable(startDate)) {
                subscriptionToStartDate = startDate.subscribe(function () {
                    var minDate = moment(startDate());
                    var maxDate = moment($(element).data("DateTimePicker").maxDate());
                    if (minDate.isSameOrBefore(maxDate)) {
                        $(element).data("DateTimePicker").minDate(minDate);
                    }
                });
            }
        }

        function getInitialValue() {
            var initialDate = valueAccessor();
            if (initialDate()) {
                return initialDate;
            }

            if (allBindingsAccessor.get("initialValue")) {
                var initialValue = allBindingsAccessor.get("initialValue");
                initialDate(initialValue);
            }
            return initialDate;
        }

        function getViewMode() {
            var DAY_VIEW = 'days';
            if (allBindingsAccessor.get("viewMode")) {
                return allBindingsAccessor.get("viewMode");
            }
            return DAY_VIEW;
        }

        function toISO8601Format(date) {
            if (!date) return null;
            return date.toISOString();
        }
    },
    update: function update(element, valueAccessor) {
        var datePicker = $(element).data("DateTimePicker");
        if (datePicker) {
            var koDate = valueAccessor();
            if (koDate()) {
                datePicker.date(moment(koDate()));
            } else {
                datePicker.clear();
            }
        }
    }
};

},{}],68:[function(require,module,exports){
"use strict";

ko.bindingHandlers.evenRowStyle = {
    init: function init(element, valueAccessor) {

        var rowIndex = $(element).index();
        var cssClassName = ko.unwrap(valueAccessor());

        if (rowIndex % 2 !== 0) {
            $(element).addClass(cssClassName);
        }
    }
};

},{}],69:[function(require,module,exports){
"use strict";

ko.extenders.uppercase = function (target) {
    var uppercaseObservable = ko.computed({
        read: target,
        write: function write(newValue) {
            var current = target();
            var valueToWrite = undefined;

            if (newValue) {
                valueToWrite = newValue.toUpperCase();
            }

            if (valueToWrite !== current) {
                target(valueToWrite);
            }
        }
    });

    uppercaseObservable(target());

    return uppercaseObservable;
};

},{}],70:[function(require,module,exports){
"use strict";

ko.bindingHandlers.fadeVisible = {
    init: function init(element, valueAccessor) {
        var value = valueAccessor();
        $(element).toggle(ko.unwrap(value));
    },
    update: function update(element, valueAccessor) {
        var value = valueAccessor();
        ko.unwrap(value) ? $(element).fadeIn() : $(element).fadeOut();
    }
};

},{}],71:[function(require,module,exports){
"use strict";

ko.bindingHandlers.featureTrack = {
    init: function init(element, valueAccessor, allBindingsAccessor) {
        var dataToTrack = valueAccessor();
        var trackerUrl = allBindingsAccessor.get("url");

        var inputType = getInputType(element);
        switch (inputType) {
            case "text":
                trackOnEnterKey();
                break;
            case "select":
                trackOnChange();
                break;
            default:
                trackOnClick();
        }

        function getInputType(element) {
            return element.tagName.toString().toLowerCase() === "input" ? $(element).prop("type").toLowerCase() : element.tagName.toLowerCase();
        }

        function trackOnEnterKey() {
            var INTRO = 13;
            $(element).keypress(function (evt) {
                if (evt.which == INTRO) {
                    track();
                }
            });
        }

        function trackOnChange() {
            $(element).change(track);
        }

        function trackOnClick() {
            $(element).click(track);
        }

        function track() {
            $.ajax({
                type: 'POST',
                url: trackerUrl,
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(dataToTrack),
                async: false
            });
        }
    }
};

},{}],72:[function(require,module,exports){
'use strict';

ko.bindingHandlers.imageWithPreload = {
        init: function init(element, valueAccessor) {
                var parameters = valueAccessor();
                var url = parameters.url;
                var imgCss = parameters.imgCss;
                var spinnerCss = parameters.spinnerCss || "fa fa-refresh fa-spin fa-2x text-center";

                $(element).addClass('text-center');

                var spinner = createSpinner(spinnerCss);
                var img = createImg(imgCss);

                img.load(function () {
                        return spinner.hide();
                });

                function createSpinner(spinnerCss) {
                        var spinner = $('<i></i>');
                        spinner.addClass(spinnerCss);
                        spinner.css('margin-top', '10%');
                        spinner.css('margin-bottom', '10%');
                        $(element).append(spinner);
                        return spinner;
                }

                function createImg(imgCss) {
                        var imgElement = $('<img>');
                        $(element).append(imgElement);
                        imgElement.attr('src', url);
                        imgElement.addClass(imgCss);
                        return imgElement;
                }
        }
};

},{}],73:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = KnockoutExtensionNumber;

function KnockoutExtensionNumber(ko) {
    function defineKnockoutNumberBinding(culture) {

        ko.bindingHandlers.numberText = {
            update: function update(element, valueAccessor, allBindings) {
                setFormatNumber(element, valueAccessor, allBindings);
            }
        };

        function setFormatNumber(element, valueAccessor, allBindings) {
            var value = ko.unwrap(valueAccessor());
            var minimumDigits = allBindings.get("minimumDigits");
            if (minimumDigits == undefined) {
                minimumDigits = 2;
            }
            var numberAsText = value != undefined ? value.toLocaleString(culture.name, { minimumFractionDigits: minimumDigits, maximumFractionDigits: 2 }) : '';
            ko.utils.setTextContent(element, numberAsText);
        }
    }

    return {
        defineKnockoutNumberBinding: defineKnockoutNumberBinding
    };
}

module.exports = exports["default"];

},{}],74:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = defineRemoteSelect2;

function defineRemoteSelect2(culture) {

    var cultureSelect2 = culture;

    function init(element, valueAccessor, allBindings) {
        var selectedValue = allBindings.get("valueSelect2");
        var visibles = allBindings.get("visiblesSelect2");
        var allowClear = allBindings.get("allowClearSelect2") || false;
        var placeholder = allBindings.get("placeholderSelect2") || "";
        var minimumInputLength = allBindings.get("minimumInputLengthSelect2") || "";
        var templateSelect2 = allBindings.get("templateSelect2");

        createRemoteSelect2();
        subscribeToSelect2ChangesToNotifyViewModel();

        hackPreventOpenOnClear(element);

        function createRemoteSelect2() {
            var remoteUrl = ko.unwrap(valueAccessor());
            var optionsText = allBindings.get("optionsText");

            $(element).select2({
                placeholder: placeholder,
                allowClear: allowClear,
                minimumInputLength: minimumInputLength,
                escapeMarkup: function escapeMarkup(markup) {
                    return markup;
                },
                templateResult: function templateResult(option) {
                    if (option.loading) return option.text;
                    return templateSelect2 ? renderTemplate(templateSelect2, option) : option.text;
                },
                language: cultureSelect2,
                ajax: {
                    url: remoteUrl,
                    delay: 250,
                    data: function data(params) {
                        return { query: params.term };
                    },
                    processResults: function processResults(data) {
                        if (visibles) {
                            ko.utils.arrayPushAll(visibles, data);
                        }
                        return {
                            results: _.map(data, function (item) {
                                var description = item.description;
                                if (optionsText) {
                                    description = optionsText(item);
                                }
                                //Bug: El Id debe ser string. https://github.com/select2/select2/issues/4052
                                return {
                                    id: item.id.toString(),
                                    text: description,
                                    associatedObject: item
                                };
                            })
                        };
                    }
                }
            });

            setSelectedValue();
        }

        function renderTemplate(template, option) {
            var temp = $("<div>");
            ko.applyBindingsToNode(temp[0], { template: { name: template, data: option } });
            var html = temp.html();
            temp.remove();
            return html;
        }

        function setSelectedValue() {
            if (selectedValue() && selectedValue().id) {
                var option = $("<option selected></option>").val(selectedValue().id).text(selectedValue().description);
                $(element).append(option).trigger('change');

                if (visibles) {
                    if (!_.find(visibles, function (x) {
                        return x.id == selectedValue().id;
                    })) {
                        visibles.push(selectedValue());
                    }
                }
            } else {
                if (selectedValue() == "") return;
                if (placeholder != "") {
                    $(element).select2('val', '');
                    return;
                }
                $(element).parent().find("[class=select2-selection__rendered]").text('');
            }
        }

        function subscribeToSelect2ChangesToNotifyViewModel() {
            $(element).on("change", function () {
                var objectSelected = $(element).select2('data')[0];
                if (objectSelected == undefined) {
                    selectedValue(undefined);
                    return;
                }

                if (IsActualValueDifferentThan(objectSelected)) {
                    selectedValue({ id: objectSelected.id, description: objectSelected.text, value: objectSelected.associatedObject });
                }
            });
        }

        function IsActualValueDifferentThan(objectSelected) {
            return !selectedValue() || !selectedValue().id || selectedValue().id != objectSelected.id;
        }

        selectedValue.subscribe(function () {
            setSelectedValue();
        });

        function hackPreventOpenOnClear(element) {
            $(element).on('select2:opening', function () {
                if ($(element).data('unselecting')) {
                    $(element).removeData('unselecting');
                    setTimeout(function () {
                        $(element).select2('close');
                    }, 1);
                }
            }).on('select2:unselecting', function () {
                $(element).data('unselecting', true);
            });
        }
    }

    ko.bindingHandlers.optionsRemoteSelect2 = {
        init: init
    };

    ko.bindingHandlers.isMissingRemoteSelect2 = {
        update: function update(element, valueAccessor) {
            if (valueAccessor()) {
                var $select2 = $(element);
                $select2.data('select2').$selection.addClass("missing-field");
            } else {
                var $select2 = $(element);
                $select2.data('select2').$selection.removeClass("missing-field");
            }
        }
    };
}

module.exports = exports["default"];

},{}],75:[function(require,module,exports){
"use strict";

var updatingComponent = undefined;

function init(element, valueAccessor, allBindings) {

    var initialOptions = ko.unwrap(valueAccessor());
    var selectedOption = allBindings.get("valueSelect2")();
    var subscriptionToViewModel = undefined;

    createSelect2ComponentWith(element, allBindings, initialOptions, selectedOption);
    subscribeToSelect2ChangesToNotifyViewModel();
    subscribeToViewModelChangesToNotifySelect2();
    cleanUpSubscriptionsWhenDomNodeIsDeleted();

    hackPreventOpenOnClear(element);

    function subscribeToViewModelChangesToNotifySelect2() {
        subscriptionToViewModel = valueAccessor().subscribe(function () {
            repaintElement(element, allBindings);
        });
        allBindings.get("valueSelect2").subscribe(function () {
            if (updatingComponent) return;

            var selectedOption = allBindings.get("valueSelect2")();
            var options = allBindings.get("optionsSelect2")();
            selectOption(element, options, selectedOption);
        });
    }

    function subscribeToSelect2ChangesToNotifyViewModel() {
        var selectedValue = allBindings.get("valueSelect2");
        $(element).on("change", function () {
            if (updatingComponent) return;

            updatingUI(function () {
                var objectSelected = $(element).select2('data')[0].associatedObject;
                selectedValue(objectSelected);
            });
        });
    }

    function hackPreventOpenOnClear(element) {
        $(element).on('select2:opening', function () {
            if ($(element).data('unselecting')) {
                $(element).removeData('unselecting');
                setTimeout(function () {
                    $(element).select2('close');
                }, 1);
            }
        }).on('select2:unselecting', function () {
            $(element).data('unselecting', true);
        });
    }

    function cleanUpSubscriptionsWhenDomNodeIsDeleted() {
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            subscriptionToViewModel.dispose();
        });
    }
}

function repaintElement(element, allBindings) {
    $(element).select2("destroy");
    var selectedValue = allBindings.get("valueSelect2")();
    var changedOptions = allBindings.get("optionsSelect2")();
    createSelect2ComponentWith(element, allBindings, changedOptions, selectedValue);
}

function createSelect2ComponentWith(element, allBindings, options, selectedOption) {
    var select2Config = createSelect2Configuration(element, allBindings, options);
    $(element).empty();
    $(element).append("<option></option>");
    $(element).select2(select2Config);

    selectOption(element, options, selectedOption);
}

function updatingUI(updateFunction) {
    updatingComponent = true;
    try {
        updateFunction();
    } finally {
        updatingComponent = false;
    }
}

function selectOption(element, options, selectedOption) {
    updatingUI(function () {
        var index = selectedOptionIndex(options, selectedOption);
        $(element).val(index).trigger("change");
    });
}

function selectedOptionIndex(options, selectedOption) {
    return _.findIndex(options, function (option) {
        return _.eq(option, selectedOption);
    });
}
function createSelect2Configuration(element, allBindings, options) {
    var select2Config = { allowClear: true };
    if (allBindings.has("allowClearSelect2")) {
        select2Config.allowClear = allBindings.get("allowClearSelect2");
    }
    if (allBindings.has("optionsCaption")) {
        select2Config.placeholder = allBindings.get("optionsCaption");
    }
    if (allBindings.has("dropdownCssClass")) {
        select2Config.dropdownCssClass = allBindings.get("dropdownCssClass");
    }

    var optionsText = allBindings.get("optionsText");
    select2Config.data = convertToSelect2Data(options, optionsText);

    return select2Config;
}

function convertToSelect2Data(options, optionsText) {
    var select2Data = [];
    for (var i = 0; i < options.length; i++) {
        var text = undefined;
        if ($.isFunction(optionsText)) {
            text = optionsText(options[i]);
        } else {
            text = options[i][optionsText];
        }
        select2Data.push({
            id: i,
            text: text,
            associatedObject: options[i]
        });
    }
    return select2Data;
}

ko.bindingHandlers.optionsSelect2 = {
    init: init
};

ko.bindingHandlers.isMissing = {
    update: function update(element, valueAccessor) {
        if (valueAccessor()) {
            var $select2 = $(element);
            $select2.data('select2').$selection.addClass("missing-field");
        } else {
            var $select2 = $(element);
            $select2.data('select2').$selection.removeClass("missing-field");
        }
    }
};

},{}],76:[function(require,module,exports){
'use strict';

ko.bindingHandlers.shortDateText = {
    init: function init() {
        return { 'controlsDescendantBindings': true };
    },
    update: function update(element, valueAccessor) {
        var valueAsISO8061 = ko.unwrap(valueAccessor());
        var dateAsText = valueAsISO8061 ? moment(valueAsISO8061).format('L') : '';
        ko.utils.setTextContent(element, dateAsText);
    }
};

},{}],77:[function(require,module,exports){
'use strict';

ko.bindingHandlers.shortDateTimeText = {
    init: function init() {
        return { 'controlsDescendantBindings': true };
    },
    update: function update(element, valueAccessor) {
        var valueAsISO8061 = ko.unwrap(valueAccessor());
        var dateAsText = valueAsISO8061 ? moment(valueAsISO8061).format('L') : '';
        var timeAsText = valueAsISO8061 ? moment(valueAsISO8061).format('LTS') : '';
        ko.utils.setTextContent(element, dateAsText + ' ' + timeAsText);
    }
};

},{}],78:[function(require,module,exports){
'use strict';

ko.bindingHandlers.shortTimeText = {
    init: function init() {
        return { 'controlsDescendantBindings': true };
    },
    update: function update(element, valueAccessor) {
        var valueAsISO8061 = ko.unwrap(valueAccessor());
        var timeAsText = valueAsISO8061 ? moment(valueAsISO8061).format('HH:mm') : '';
        ko.utils.setTextContent(element, timeAsText);
    }
};

},{}],79:[function(require,module,exports){
'use strict';

ko.bindingHandlers.htmlTooltip = {
    init: function init(element, valueAccesor) {
        $(element).tooltip({
            html: true,
            title: valueAccesor()
        }).addClass('html-tooltip');
    },
    update: function update(element, valueAccesor) {
        $(element).attr('title', valueAccesor()).tooltip('fixTitle');
    }
};

},{}],80:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = RestClient;

function RestClient(apiBasePath) {

    function get(resourceUrl, callback, errorCallback) {
        $.ajax({
            url: apiBasePath + resourceUrl,
            headers: {
                "SIMA-Session-Token": "0"
            },
            success: callback,
            error: errorCallback
        });
    }

    function post(resourceUrl, headers, data, callback, errorCallback) {
        $.ajax({
            url: apiBasePath + resourceUrl,
            type: 'POST',
            headers: headers,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(data),
            success: callback,
            error: errorCallback
        });
    }

    function remove(url, headers, callback, errorCallback) {
        $.ajax({
            url: apiBasePath + url,
            type: 'DELETE',
            headers: headers,
            success: callback,
            error: errorCallback
        });
    }

    function put(url, headers, data, callback, errorCallback) {
        $.ajax({
            url: apiBasePath + url,
            type: 'PUT',
            headers: headers,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(data),
            success: callback,
            error: errorCallback
        });
    }

    return { get: get, post: post, put: put, remove: remove };
}

module.exports = exports["default"];

},{}],81:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var SimaEventBus = (function () {
    var simaEvents = [];

    function getSimaEvent(eventName) {
        var eventNameInLower = eventName.toLowerCase();
        if (!simaEvents[eventNameInLower]) {
            simaEvents[eventNameInLower] = {
                subscriptions: []
            };
        }
        return simaEvents[eventNameInLower];
    }

    function subscribe(eventName, callback, scope) {
        if (scope == undefined) throw "Scope was not specified on options";
        if (typeof callback !== "function") throw "Callback was not specified on options";

        var subscription = { callback: callback, scope: scope.toLowerCase() };

        var subscriptions = getSimaEvent(eventName).subscriptions;
        for (var i = 0; i < subscriptions.length; i++) {
            if (subscriptions[i].scope === scope.toLowerCase()) {
                getSimaEvent(eventName).subscriptions[i] = subscription;
                return;
            }
        }
        getSimaEvent(eventName).subscriptions.push(subscription);
    }

    function unsubscribe(eventName, scope) {
        if (scope == undefined) throw "Scope was not specified on options";

        var subscriptions = getSimaEvent(eventName).subscriptions;
        _.remove(subscriptions, function (x) {
            return x.scope === scope.toLowerCase();
        });
    }

    function raise(eventName, data) {
        var subscriptions = getSimaEvent(eventName).subscriptions;

        for (var i = 0; i < subscriptions.length; i++) {
            (function (subscription, data) {
                try {
                    subscription.callback.call(null, data);
                } catch (ex) {}
            })(subscriptions[i], data);
        }
    }

    return {
        subscribe: subscribe,
        raise: raise,
        unsubscribe: unsubscribe
    };
})();
exports.SimaEventBus = SimaEventBus;

},{}],82:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = TranslationService;

function TranslationService(translationsJson, cultureName) {

    function translate(key, parameters) {
        var translation = translationsJson[key];
        if (!translation) return "!" + key + "!";
        if (parameters) {
            for (var i = 0; i < parameters.length; i++) {
                translation = translation.replace("{" + i + "}", parameters[i]);
            }
        }

        return translation || key;
    }

    return {
        translate: translate,
        cultureName: cultureName
    };
}

module.exports = exports["default"];

},{}],83:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = validationService;

function validationService() {

    function initValidation() {
        ko.validation.init({
            registerExtenders: true,
            messagesOnModified: false,
            insertMessages: false,
            parseInputAttributes: true,
            messageTemplate: null
        }, true);

        registerExtenders();
    }

    function registerExtenders() {
        ko.validation.rules['matchs'] = {
            validator: function validator(value, fieldToCompare) {
                return value === ko.unwrap(fieldToCompare);
            },
            message: 'The fields must have the same value'
        };

        ko.validation.registerExtenders();
    }

    return {
        initValidation: initValidation
    };
}

module.exports = exports['default'];

},{}],84:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = Validator;

function Validator(translator) {
    var validableProps = [];
    var validableRules = [];

    function addRequired(validableProp) {
        validableProp.extend({
            required: {
                message: translator.translate('SharedDomain.Validation.Required.Message')
            }
        });
        validableProps.push(validableProp);
    }

    function addEmail(validableProp) {
        validableProp.extend({
            email: {
                message: translator.translate('SharedDomain.Validation.Email.Message')
            }
        });
        validableProps.push(validableProp);
    }

    function addMinimum(validableProp, minValue) {
        validableProp.extend({
            min: {
                params: minValue,
                message: translator.translate('SharedDomain.Validation.Minimun', [minValue])
            }
        });
        validableProps.push(validableProp);
    }

    function addMaximum(validableProp, maxValue) {
        validableProp.extend({
            max: {
                params: maxValue,
                message: translator.translate('SharedDomain.Validation.Maximum', [maxValue])
            }
        });
        validableProps.push(validableProp);
    }

    function addNumber(validableProp) {
        validableProp.extend({
            number: {
                message: translator.translate('SharedDomain.Validation.Numeric')
            }
        });
        validableProps.push(validableProp);
    }

    function addMinimumLength(validableProp, minLength) {
        validableProp.extend({
            minLength: {
                params: minLength,
                message: translator.translate('SharedDomain.Validation.MinLength.Message', [minLength])
            }
        });
        validableProps.push(validableProp);
    }

    function addMaximumLength(validableProp, maxLength) {
        validableProp.extend({
            maxLength: {
                params: maxLength,
                message: translator.translate('SharedDomain.Validation.MaxLength.Message', [maxLength])
            }
        });
        validableProps.push(validableProp);
    }

    function addRule(validableRule) {
        validableRules.push(validableRule);
    }

    function isValid(validableProp) {
        return validableProp.isValid();
    }

    function isAllValid() {
        return validableProps.every(function (prop) {
            return prop.isValid();
        }) && validableRules.every(function (rule) {
            return rule();
        });
    }

    return {
        addRequired: addRequired,
        addEmail: addEmail,
        addMinimum: addMinimum,
        addMaximum: addMaximum,
        addMinimumLength: addMinimumLength,
        addMaximumLength: addMaximumLength,
        addNumber: addNumber,
        addRule: addRule,
        isValid: isValid,
        isAllValid: isAllValid
    };
}

module.exports = exports['default'];

},{}],"aida-core":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.exportApi = exportApi;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _dialogsErrorMessagesExtractor = require("./dialogs/errorMessagesExtractor");

var _dialogsErrorMessagesExtractor2 = _interopRequireDefault(_dialogsErrorMessagesExtractor);

var _componentsSearchResultsTableColumnDefinitionsBuilder = require("./components/search-results-table/columnDefinitionsBuilder");

var _componentsSearchResultsTableColumnDefinitionsBuilder2 = _interopRequireDefault(_componentsSearchResultsTableColumnDefinitionsBuilder);

var _componentRegister = require("./componentRegister");

var _componentRegister2 = _interopRequireDefault(_componentRegister);

var _dependencyProviderFactory = require("./dependencyProviderFactory");

var _DialogPublisher = require("./DialogPublisher");

var _Dialogs = require("./Dialogs");

var _Dialogs2 = _interopRequireDefault(_Dialogs);

var _History = require("./History");

var _History2 = _interopRequireDefault(_History);

var _restClient = require("./restClient");

var _restClient2 = _interopRequireDefault(_restClient);

var _TranslationService = require("./TranslationService");

var _TranslationService2 = _interopRequireDefault(_TranslationService);

var _UserRightsService = require("./UserRightsService");

var _UserRightsService2 = _interopRequireDefault(_UserRightsService);

var _validationService = require("./validationService");

var _validationService2 = _interopRequireDefault(_validationService);

var _validator = require("./validator");

var _validator2 = _interopRequireDefault(_validator);

var _knockoutComponentsKnockoutRemoteSelect2 = require("./knockoutComponents/knockout-remoteSelect2");

var _knockoutComponentsKnockoutRemoteSelect22 = _interopRequireDefault(_knockoutComponentsKnockoutRemoteSelect2);

function exportApi() {
    return {
        ErrorMessagesExtractor: _dialogsErrorMessagesExtractor2["default"],
        ColumnsDefinitionBuilder: _componentsSearchResultsTableColumnDefinitionsBuilder2["default"],
        ComponentRegister: _componentRegister2["default"],
        DependencyProviderFactory: _dependencyProviderFactory.DependencyProviderFactory,
        DialogPublisher: _DialogPublisher.DialogPublisher,
        DialogViewModel: _Dialogs2["default"],
        History: _History2["default"],
        RestClient: _restClient2["default"],
        TranslationService: _TranslationService2["default"],
        UserRightsService: _UserRightsService2["default"],
        ValidationService: _validationService2["default"],
        Validator: _validator2["default"],
        DefineRemoteSelect2: _knockoutComponentsKnockoutRemoteSelect22["default"]
    };
}

var aidaCore = require('aida-core').exportApi();
window.aidaCore = aidaCore;

},{"./DialogPublisher":2,"./Dialogs":3,"./History":4,"./TranslationService":6,"./UserRightsService":8,"./componentRegister":10,"./components/search-results-table/columnDefinitionsBuilder":37,"./dependencyProviderFactory":58,"./dialogs/errorMessagesExtractor":60,"./knockoutComponents/knockout-remoteSelect2":74,"./restClient":80,"./validationService":83,"./validator":84,"aida-core":"aida-core"}]},{},[1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,"aida-core",80,81,82,84])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
