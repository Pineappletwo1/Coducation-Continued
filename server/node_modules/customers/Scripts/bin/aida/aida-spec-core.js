require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = spyCallback;

function spyCallback() {
    var called = false;
    var switcher = function switcher() {
        return called;
    };
    var f = function f() {
        called = true;
    };
    var fWrapper = function fWrapper() {
        f();
    };
    fWrapper.isCalled = switcher;

    return fWrapper;
}

module.exports = exports["default"];

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = stubTranslationService;

function stubTranslationService() {
    return {
        translate: function translate(key) {
            return key;
        }
    };
}

module.exports = exports["default"];

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.exportApi = exportApi;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _stubTranslationService = require("./stubTranslationService");

var _stubTranslationService2 = _interopRequireDefault(_stubTranslationService);

var _spyCallback = require("./spyCallback");

var _spyCallback2 = _interopRequireDefault(_spyCallback);

function exportApi() {
    return {
        StubTranslationService: _stubTranslationService2["default"],
        SpyCallback: _spyCallback2["default"]
    };
}

var aidaSpecCore = require('aida-spec-core').exportApi();
window.aidaSpecCore = aidaSpecCore;

},{"./spyCallback":4,"./stubTranslationService":5,"aida-spec-core":"aida-spec-core"}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = spyCallback;

function spyCallback() {
    var called = false;
    var switcher = function switcher() {
        return called;
    };
    var f = function f() {
        called = true;
    };
    var fWrapper = function fWrapper() {
        f();
    };
    fWrapper.isCalled = switcher;

    return fWrapper;
}

module.exports = exports["default"];

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = stubTranslationService;

function stubTranslationService() {
    return {
        translate: function translate(key) {
            return key;
        }
    };
}

module.exports = exports["default"];

},{}],"aida-spec-core":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.exportApi = exportApi;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _stubTranslationService = require("./stubTranslationService");

var _stubTranslationService2 = _interopRequireDefault(_stubTranslationService);

var _spyCallback = require("./spyCallback");

var _spyCallback2 = _interopRequireDefault(_spyCallback);

function exportApi() {
    return {
        StubTranslationService: _stubTranslationService2["default"],
        SpyCallback: _spyCallback2["default"]
    };
}

var aidaSpecCore = require('aida-spec-core').exportApi();
window.aidaSpecCore = aidaSpecCore;

},{"./spyCallback":1,"./stubTranslationService":2,"aida-spec-core":"aida-spec-core"}]},{},[3,4,5])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJGOi9EZXZlbG9wL1NpbWEtMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9iaW4vdGVtcC9qcy9zcGVjL2NvcmUvc3B5Q2FsbGJhY2suanMiLCJGOi9EZXZlbG9wL1NpbWEtMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9iaW4vdGVtcC9qcy9zcGVjL2NvcmUvc3R1YlRyYW5zbGF0aW9uU2VydmljZS5qcyIsIkY6L0RldmVsb3AvU2ltYS0yL05FVC9JbmZyYXN0cnVjdHVyZS9JbmZyYXN0cnVjdHVyZS5Db3JlLldlYi9TY3JpcHRzL3NwZWMvY29yZS9zcGVjTWFpbi5qcyIsIkY6L0RldmVsb3AvU2ltYS0yL05FVC9JbmZyYXN0cnVjdHVyZS9JbmZyYXN0cnVjdHVyZS5Db3JlLldlYi9TY3JpcHRzL3NwZWMvY29yZS9zcHlDYWxsYmFjay5qcyIsIkY6L0RldmVsb3AvU2ltYS0yL05FVC9JbmZyYXN0cnVjdHVyZS9JbmZyYXN0cnVjdHVyZS5Db3JlLldlYi9TY3JpcHRzL3NwZWMvY29yZS9zdHViVHJhbnNsYXRpb25TZXJ2aWNlLmpzIiwiRjovRGV2ZWxvcC9TaW1hLTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvYmluL3RlbXAvanMvc3BlYy9jb3JlL3NwZWNNYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7cUJDQXdCLFdBQVc7O0FBQXBCLFNBQVMsV0FBVyxHQUFHO0FBQ2xDLFFBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztBQUNuQixRQUFNLFFBQVEsR0FBRyxTQUFYLFFBQVEsR0FBZTtBQUFFLGVBQU8sTUFBTSxDQUFDO0tBQUUsQ0FBQztBQUNoRCxRQUFNLENBQUMsR0FBRyxTQUFKLENBQUMsR0FBZTtBQUFFLGNBQU0sR0FBRyxJQUFJLENBQUM7S0FBRSxDQUFDO0FBQ3pDLFFBQU0sUUFBUSxHQUFHLFNBQVgsUUFBUSxHQUFlO0FBQUUsU0FBQyxFQUFFLENBQUM7S0FBRSxDQUFDO0FBQ3RDLFlBQVEsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDOztBQUU3QixXQUFPLFFBQVEsQ0FBQztDQUNuQjs7Ozs7Ozs7OztxQkNSdUIsc0JBQXNCOztBQUEvQixTQUFTLHNCQUFzQixHQUFHO0FBQzdDLFdBQU87QUFDSCxpQkFBUyxFQUFFLG1CQUFDLEdBQUc7bUJBQUssR0FBRztTQUFBO0tBQzFCLENBQUM7Q0FDTDs7Ozs7Ozs7Ozs7Ozs7c0NDSm1DLDBCQUEwQjs7OzsyQkFDdEMsZUFBZTs7OztBQUVoQyxTQUFTLFNBQVMsR0FBRztBQUN4QixXQUFPO0FBQ0gsOEJBQXNCLHFDQUFBO0FBQ3RCLG1CQUFXLDBCQUFBO0tBQ2QsQ0FBQztDQUNMOztBQUVELElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ3pELE1BQU0sQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDOzs7Ozs7OztxQkNYWCxXQUFXOztBQUFwQixTQUFTLFdBQVcsR0FBRztBQUNsQyxRQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDbkIsUUFBTSxRQUFRLEdBQUcsU0FBWCxRQUFRLEdBQWU7QUFBRSxlQUFPLE1BQU0sQ0FBQztLQUFFLENBQUM7QUFDaEQsUUFBTSxDQUFDLEdBQUcsU0FBSixDQUFDLEdBQWU7QUFBRSxjQUFNLEdBQUcsSUFBSSxDQUFDO0tBQUUsQ0FBQztBQUN6QyxRQUFNLFFBQVEsR0FBRyxTQUFYLFFBQVEsR0FBZTtBQUFFLFNBQUMsRUFBRSxDQUFDO0tBQUUsQ0FBQztBQUN0QyxZQUFRLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQzs7QUFFN0IsV0FBTyxRQUFRLENBQUM7Q0FDbkI7Ozs7Ozs7Ozs7cUJDUndCLHNCQUFzQjs7QUFBL0IsU0FBUyxzQkFBc0IsR0FBRztBQUM5QyxXQUFPO0FBQ0gsaUJBQVMsRUFBRSxtQkFBQyxHQUFHO21CQUFLLEdBQUc7U0FBQTtLQUMxQixDQUFDO0NBQ0w7Ozs7Ozs7Ozs7Ozs7O3NDQ0prQywwQkFBMEI7Ozs7MkJBQ3JDLGVBQWU7Ozs7QUFFaEMsU0FBUyxTQUFTLEdBQUc7QUFDeEIsV0FBTztBQUNILDhCQUFzQixxQ0FBQTtBQUN0QixtQkFBVywwQkFBQTtLQUNkLENBQUM7Q0FDTDs7QUFFRCxJQUFJLFlBQVksR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUN6RCxNQUFNLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzcHlDYWxsYmFjaygpIHtcclxuICAgIGxldCBjYWxsZWQgPSBmYWxzZTtcclxuICAgIGNvbnN0IHN3aXRjaGVyID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FsbGVkOyB9O1xyXG4gICAgY29uc3QgZiA9IGZ1bmN0aW9uICgpIHsgY2FsbGVkID0gdHJ1ZTsgfTtcclxuICAgIGNvbnN0IGZXcmFwcGVyID0gZnVuY3Rpb24gKCkgeyBmKCk7IH07XHJcbiAgICBmV3JhcHBlci5pc0NhbGxlZCA9IHN3aXRjaGVyO1xyXG4gICAgXHJcbiAgICByZXR1cm4gZldyYXBwZXI7XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdHViVHJhbnNsYXRpb25TZXJ2aWNlKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0cmFuc2xhdGU6IChrZXkpID0+IGtleVxyXG4gICAgfTtcclxufSIsIu+7v2ltcG9ydCBTdHViVHJhbnNsYXRpb25TZXJ2aWNlIGZyb20gXCIuL3N0dWJUcmFuc2xhdGlvblNlcnZpY2VcIjtcclxuaW1wb3J0IFNweUNhbGxiYWNrIGZyb20gXCIuL3NweUNhbGxiYWNrXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXhwb3J0QXBpKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBTdHViVHJhbnNsYXRpb25TZXJ2aWNlLFxyXG4gICAgICAgIFNweUNhbGxiYWNrXHJcbiAgICB9O1xyXG59XHJcblxyXG5sZXQgYWlkYVNwZWNDb3JlID0gcmVxdWlyZSgnYWlkYS1zcGVjLWNvcmUnKS5leHBvcnRBcGkoKTtcclxud2luZG93LmFpZGFTcGVjQ29yZSA9IGFpZGFTcGVjQ29yZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzcHlDYWxsYmFjaygpIHtcclxuICAgIGxldCBjYWxsZWQgPSBmYWxzZTtcclxuICAgIGNvbnN0IHN3aXRjaGVyID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FsbGVkOyB9O1xyXG4gICAgY29uc3QgZiA9IGZ1bmN0aW9uICgpIHsgY2FsbGVkID0gdHJ1ZTsgfTtcclxuICAgIGNvbnN0IGZXcmFwcGVyID0gZnVuY3Rpb24gKCkgeyBmKCk7IH07XHJcbiAgICBmV3JhcHBlci5pc0NhbGxlZCA9IHN3aXRjaGVyO1xyXG4gICAgXHJcbiAgICByZXR1cm4gZldyYXBwZXI7XHJcbn0iLCLvu79leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdHViVHJhbnNsYXRpb25TZXJ2aWNlKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0cmFuc2xhdGU6IChrZXkpID0+IGtleVxyXG4gICAgfTtcclxufSIsImltcG9ydCBTdHViVHJhbnNsYXRpb25TZXJ2aWNlIGZyb20gXCIuL3N0dWJUcmFuc2xhdGlvblNlcnZpY2VcIjtcclxuaW1wb3J0IFNweUNhbGxiYWNrIGZyb20gXCIuL3NweUNhbGxiYWNrXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXhwb3J0QXBpKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBTdHViVHJhbnNsYXRpb25TZXJ2aWNlLFxyXG4gICAgICAgIFNweUNhbGxiYWNrXHJcbiAgICB9O1xyXG59XHJcblxyXG5sZXQgYWlkYVNwZWNDb3JlID0gcmVxdWlyZSgnYWlkYS1zcGVjLWNvcmUnKS5leHBvcnRBcGkoKTtcclxud2luZG93LmFpZGFTcGVjQ29yZSA9IGFpZGFTcGVjQ29yZTsiXX0=
