require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _srcDomainCustomerDetailSectionCustomerDetailVm = require("../../src/domain/customer-detail-section/CustomerDetailVm");

var _srcDomainCustomerDetailSectionCustomerDetailVm2 = _interopRequireDefault(_srcDomainCustomerDetailSectionCustomerDetailVm);

var espana = { id: 'ESP', descripcion: 'Espana' };
var companyName = 'AIDA';

var targetCustomer = {
    isCompany: false,
    name: 'alfredo',
    firstSurname: 'casado',
    secondSurname: 'bernardez',
    taxId: '124',
    address: 'joaquin lorenzo',
    city: 'madrid',
    state: 'madrid',
    country: 'spain',
    phoneNumber: '12435',
    email: 'a@b.es',
    birthDate: '01012000',
    id: undefined,
    disabled: false,
    gender: 'M',
    postalCode: '123',
    company: companyName
};

describe("CustomerVm should", function () {

    var translator = aidaCore.TranslationService({});
    var customerCreated = { id: "customerId", company: companyName };
    var actionFactory = createActionFactoryMock({ customerCreated: customerCreated, customerReceived: targetCustomer, customersFound: [] });
    var newCustomerVm = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ actionFactory: actionFactory, newCustomerCallback: function newCustomerCallback(customerFromBackend) {
            return customerReceived = customerFromBackend;
        }, translator: translator });
    var customerReceived = undefined;

    it("call backend and callback when creating a customer", function () {
        spyOn(actionFactory.customer, "createCustomer").and.callThrough();

        fill(newCustomerVm)['with'](targetCustomer);
        newCustomerVm.isEdition(false);
        newCustomerVm.saveCustomer();

        expect(actionFactory.customer.createCustomer).toHaveBeenCalledWith(targetCustomer, jasmine.any(Function));
        expect(customerReceived.id).toBe(customerCreated.id);
        expect(customerReceived.company).toBe(customerCreated.company);
    });

    it("call backend and callback when editing a customer", function () {
        var customerVm = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ actionFactory: actionFactory, customerEditedCallback: function customerEditedCallback(customerFromBackend) {
                return customerReceived = customerFromBackend;
            }, translator: translator });
        spyOn(actionFactory.customer, "editCustomer").and.callThrough();

        fill(customerVm)['with'](targetCustomer);
        customerVm.isEdition(true);
        customerVm.saveCustomer();

        expect(actionFactory.customer.editCustomer).toHaveBeenCalledWith(targetCustomer, jasmine.any(Function));
        expect(customerReceived.id).toBe(customerCreated.id);
        expect(customerReceived.company).toBe(customerCreated.company);
    });

    it("show customers coincidences if necessary when creating a new customer", function () {
        var customerVm = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ actionFactory: actionFactory, newCustomerCallback: function newCustomerCallback(customerFromBackend) {
                return customerReceived = customerFromBackend;
            }, translator: translator });
        spyOn(actionFactory.customer, "searchCustomersDescriptions");

        fill(customerVm)['with'](targetCustomer);
        customerVm.isEdition(false);
        customerVm.saveCustomer();

        expect(actionFactory.customer.searchCustomersDescriptions).toHaveBeenCalledWith({ name: customerVm.name(), firstSurname: customerVm.firstSurname() }, jasmine.any(Function));
    });

    describe("validate", function () {
        it("customer is invalid when has not name", function () {
            var customer = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ translator: translator });
            expect(customer.canSaveCustomer()).toBe(false);
        });

        it("customer is valid when has name", function () {
            var customer = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ translator: translator });
            customer.name('anyName');
            expect(customer.canSaveCustomer()).toBe(true);
        });

        it("customer is valid if has an email and it is well formatted", function () {
            var customer = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ translator: translator });
            customer.name('anyName');
            customer.email('a@a.com');
            expect(customer.canSaveCustomer()).toBe(true);
        });

        it("customer is invalid if has an email and it is bad formatted", function () {
            var customer = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ translator: translator });
            customer.name('anyName');
            customer.email('a@');
            expect(customer.canSaveCustomer()).toBe(false);
        });
    });

    describe("show customer", function () {
        it("reset properties when call show without customerId", function () {
            var customer = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ actionFactory: actionFactory, translator: translator });
            customer.name('someName');
            customer.company(companyName);
            customer.show();

            expect(customer.isShown()).toBe(true);
            expect(customer.name()).toBe(undefined);
            expect(customer.company()).toBe(undefined);
        });

        it("get customer from backend when call show with customerid", function () {
            var customer = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ actionFactory: actionFactory, translator: translator });
            customer.show({ customerId: 'anyId' });

            expect(customer.name()).toBe(targetCustomer.name);
            expect(customer.firstSurname()).toBe(targetCustomer.firstSurname);
            expect(customer.secondSurname()).toBe(targetCustomer.secondSurname);
            expect(customer.taxId()).toBe(targetCustomer.taxId);
            expect(customer.address()).toBe(targetCustomer.address);
            expect(customer.city()).toBe(targetCustomer.city);
            expect(customer.state()).toBe(targetCustomer.state);
            expect(customer.country()).toBe(targetCustomer.country);
            expect(customer.phoneNumber()).toBe(targetCustomer.phoneNumber);
            expect(customer.email()).toBe(targetCustomer.email);
            expect(customer.birthDate()).toBe(targetCustomer.birthDate);
            expect(customer.gender()).toBe(targetCustomer.gender);
            expect(customer.postalCode()).toBe(targetCustomer.postalCode);
            expect(customer.id()).toBe(targetCustomer.id);
            expect(customer.disabled()).toBe(targetCustomer.disabled);
            expect(customer.company()).toBe(targetCustomer.company);
        });

        it("countries are loaded when show customer", function () {
            var customer = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ actionFactory: actionFactory, translator: translator });
            customer.show();

            expect(customer.availableCountries().length).toBe(1);
            expect(customer.availableCountries()[0].id).toBe(espana.id);
            expect(customer.availableCountries()[0].description).toBe(espana.description);
        });
    });

    describe("do not hide customer form", function () {
        it("after editing from customer detail view", function () {
            var customerVm = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ actionFactory: actionFactory, customerEditedCallback: function customerEditedCallback(customerFromBackend) {
                    return customerReceived = customerFromBackend;
                }, translator: translator, hideFormAfterSaving: false });

            fill(customerVm)['with'](targetCustomer);
            customerVm.show();
            customerVm.isEdition(true);
            customerVm.saveCustomer();

            expect(customerVm.isShown()).toBe(true);
        });
    });

    describe("detect coincidences", function () {
        it("show a selector with the customer if there is a customer with the same taxid", function () {
            var customersFound = [{ id: "customerId" }];
            var actionFactory = createActionFactoryMock({ customersFound: customersFound });
            var customerVm = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ actionFactory: actionFactory, translator: translator });
            customerVm.taxId("anyTaxId");

            customerVm.searchByTaxId();

            expect(customerVm.customerSelector.visible()).toBe(true);
            expect(customerVm.customerSelector.selectableCustomers()[0].customer).toBe(customersFound[0]);
        });

        it("not show a selector if there is not any customer with the same taxid", function () {
            var actionFactory = createActionFactoryMock({ customersFound: [] });
            var customerVm = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ actionFactory: actionFactory, translator: translator });
            customerVm.taxId("anyTaxId");

            customerVm.searchByTaxId();

            expect(customerVm.customerSelector.visible()).toBe(false);
        });

        it("not call search when taxId is empty", function () {
            var actionFactory = createActionFactoryMock({ customersFound: [{ id: "customerId" }] });
            var customerVm = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ actionFactory: actionFactory, translator: translator });

            customerVm.searchByTaxId();

            expect(actionFactory.isSearchCalled()).toBe(false);
        });

        it("show a selector with customers that match the name and surname", function () {
            var customersFound = [{ id: "customerId" }, { id: "customerAnotherId" }];
            var actionFactory = createActionFactoryMock({ customersFound: customersFound });
            var customerVm = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ actionFactory: actionFactory, translator: translator });
            customerVm.name("anyName");
            customerVm.firstSurname("anyFirstSurname");

            customerVm.searchLikeName();

            expect(customerVm.customerSelector.visible()).toBe(true);
            expect(customerVm.customerSelector.selectableCustomers()[0].customer).toBe(customersFound[0]);
            expect(customerVm.customerSelector.selectableCustomers()[1].customer).toBe(customersFound[1]);
        });

        it("not show a selector if there is not customer that matches name and surname", function () {
            var actionFactory = createActionFactoryMock({ customersFound: [] });
            spyOn(actionFactory.customer, "searchCustomersDescriptions");
            var customerVm = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ actionFactory: actionFactory, translator: translator, newCustomerCallback: function newCustomerCallback(customerFromBackend) {
                    return customerReceived = customerFromBackend;
                } });
            customerVm.name("anyName");
            customerVm.firstSurname("anyFirstSurname");

            customerVm.createCustomer();

            expect(actionFactory.customer.searchCustomersDescriptions).toHaveBeenCalled();
            expect(customerVm.customerSelector.visible()).toBe(false);
        });

        it("not call to search if name is undefined when trying to create a customer", function () {
            var actionFactory = createActionFactoryMock({ customersFound: [{ id: "customerId" }] });
            spyOn(actionFactory.customer, "searchCustomersDescriptions");
            var customerVm = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ actionFactory: actionFactory, translator: translator, newCustomerCallback: function newCustomerCallback(customerFromBackend) {
                    return customerReceived = customerFromBackend;
                } });
            customerVm.name();
            customerVm.firstSurname("anyFirstSurname");

            customerVm.createCustomer();

            expect(actionFactory.customer.searchCustomersDescriptions).not.toHaveBeenCalled();
        });

        it("not call to search if firstSurname is undefined", function () {
            var actionFactory = createActionFactoryMock({ customersFound: [{ id: "customerId" }] });
            spyOn(actionFactory.customer, "searchCustomersDescriptions");
            var customerVm = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ actionFactory: actionFactory, translator: translator, newCustomerCallback: function newCustomerCallback(customerFromBackend) {
                    return customerReceived = customerFromBackend;
                } });
            customerVm.name("anyName");
            customerVm.firstSurname();

            customerVm.createCustomer();

            expect(actionFactory.customer.searchCustomersDescriptions).not.toHaveBeenCalled();
        });
    });

    var customer = (0, _srcDomainCustomerDetailSectionCustomerDetailVm2['default'])({ actionFactory: actionFactory, translator: translator });

    describe("set isCompany", function () {
        ['true', 'false'].forEach(function (isCompanyValue) {
            it("as [${isCompanyValue}]", function () {

                customer.show();

                customer.setIsCompany(isCompanyValue);

                expect(customer.isCompany()).toBe(isCompanyValue);
            });
        });
    });

    describe("check missing fields", function () {

        it("return true if user has set name", function () {
            customer.name(undefined);

            expect(customer.isNameMissing()).toBe(true);
        });
    });
});

function createActionFactoryMock(_ref) {
    var customerCreated = _ref.customerCreated;
    var customerReceived = _ref.customerReceived;
    var customersFound = _ref.customersFound;

    var _isSearchCalled = false;
    return {
        customer: {
            createCustomer: function createCustomer(customer, callback) {
                callback(customerCreated);
            },
            editCustomer: function editCustomer(customer, callback) {
                callback(customerCreated);
            },
            getCustomer: function getCustomer(customer, callback) {
                return callback(customerReceived);
            },
            searchCustomersDescriptions: function searchCustomersDescriptions(filters, callback) {
                _isSearchCalled = true;
                callback(customersFound);
            },
            getAllCountries: function getAllCountries(callback) {
                return callback([espana]);
            }
        },
        isSearchCalled: function isSearchCalled() {
            return _isSearchCalled;
        }
    };
}

function fill(customerVm) {
    return {
        'with': function _with(customer) {
            _.forOwn(customer, function (value, key) {
                var observable = customerVm[key];
                if (typeof observable === 'function') {
                    observable(value);
                } else {
                    throw 'not found observable ' + key + ' in customerDetailVm';
                }
            });
        }
    };
}

},{"../../src/domain/customer-detail-section/CustomerDetailVm":3}],2:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _srcDomainCustomerDetailSectionCustomerSelector = require("../../src/domain/customer-detail-section/CustomerSelector");

var _srcDomainCustomerDetailSectionCustomerSelector2 = _interopRequireDefault(_srcDomainCustomerDetailSectionCustomerSelector);

describe("CustomerSelector should", function () {

    var customers = [{ id: 'customerId' }];

    it("call back with the selected item", function () {
        var selectedCustomer = undefined;
        var customerSelector = (0, _srcDomainCustomerDetailSectionCustomerSelector2["default"])(function (customer) {
            selectedCustomer = customer;
        });

        customerSelector.show(customers);
        customerSelector.selectWithoutTimeout(customers[0]);

        expect(selectedCustomer.id).toBe(customers[0].id);
    });

    it("not call back with the selected item when anyone is selected", function () {
        var selectedCustomer = undefined;
        var customerSelector = (0, _srcDomainCustomerDetailSectionCustomerSelector2["default"])(function (customer) {
            selectedCustomer = customer;
        });

        customerSelector.show(customers);
        customerSelector.close();

        expect(selectedCustomer).toBe(undefined);
    });

    it("call back with the selected item when has mandatory selection", function () {
        var selectedCustomer = undefined;
        var customerSelector = (0, _srcDomainCustomerDetailSectionCustomerSelector2["default"])(function (customer) {
            selectedCustomer = customer;
        });

        customerSelector.showWithMandatorySelection(customers);
        customerSelector.selectWithoutTimeout(customers[0]);

        expect(selectedCustomer.id).toBe(customers[0].id);
    });

    it("call back when no selected item", function () {
        var called = false;
        var noSelectionAction = function noSelectionAction() {
            called = true;
        };
        var customerSelector = (0, _srcDomainCustomerDetailSectionCustomerSelector2["default"])(function () {}, noSelectionAction);

        customerSelector.close();

        setTimeout(function () {
            return expect(called).toBe(true);
        }, 500); //Concensus
    });
});

describe("SelectableCustomer should", function () {

    var customer = { id: 'customerId' };

    it("call back with the customer", function () {
        var selectedCustomer = undefined;
        var selectableCustomer = (0, _srcDomainCustomerDetailSectionCustomerSelector.SelectableCustomer)(customer, function (selected) {
            selectedCustomer = selected;
        });

        selectableCustomer.select();

        expect(selectedCustomer.id).toBe(customer.id);
    });
});

},{"../../src/domain/customer-detail-section/CustomerSelector":4}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = CustomerDetailVm;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _CustomerSelector = require('./CustomerSelector');

var _CustomerSelector2 = _interopRequireDefault(_CustomerSelector);

function CustomerDetailVm(_ref) {
    var actionFactory = _ref.actionFactory;
    var newCustomerCallback = _ref.newCustomerCallback;
    var customerEditedCallback = _ref.customerEditedCallback;
    var translator = _ref.translator;
    var _ref$isMissing = _ref.isMissing;
    var isMissing = _ref$isMissing === undefined ? function () {
        return false;
    } : _ref$isMissing;
    var _ref$hideFormAfterSaving = _ref.hideFormAfterSaving;
    var hideFormAfterSaving = _ref$hideFormAfterSaving === undefined ? true : _ref$hideFormAfterSaving;

    var availableCountries = ko.observableArray([]);
    var isShown = ko.observable(false);
    var hideForm = hideFormAfterSaving;
    var isCompany = ko.observable(false);
    var name = ko.observable("").extend({
        required: {
            message: translator.translate('SharedDomain.Validation.Required.Message')
        }
    });
    var firstSurname = ko.observable("");
    var secondSurname = ko.observable("");
    var taxId = ko.observable("");
    var address = ko.observable("");
    var city = ko.observable("");
    var state = ko.observable("");
    var country = ko.observable("");
    var phoneNumber = ko.observable("");
    var email = ko.observable("").extend({
        email: {
            message: translator.translate('SharedDomain.Validation.Email.Message')
        }
    });
    var birthDate = ko.observable("");
    var canSaveCustomer = ko.computed(function () {
        return isValid();
    });
    var customerSelector = (0, _CustomerSelector2['default'])(whenCustomerSelected, callServerToCreateCustomer);
    var isEdition = ko.observable(false);
    var customerId = undefined;
    var showCancel = ko.observable(true);
    var id = ko.observable();
    var disabled = ko.observable(false);
    var gender = ko.observable();
    var postalCode = ko.observable();
    var company = ko.observable();
    var genderOptions = [{ description: translator.translate('SharedDomain.Gender.Male'), id: 'Male' }, { description: translator.translate('SharedDomain.Gender.Female'), id: 'Female' }];
    var onCustomerCreatedCallback = newCustomerCallback;
    var onCustomerEditedCallback = customerEditedCallback;

    function isValid() {
        return name.isValid() && email.isValid();
    }

    function show() {
        var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        var customerId = _ref2.customerId;
        var whenSuccess = _ref2.whenSuccess;
        var _ref2$showCancelButton = _ref2.showCancelButton;
        var showCancelButton = _ref2$showCancelButton === undefined ? true : _ref2$showCancelButton;

        showCancel(showCancelButton);
        if (customerId) {
            showEdition({ customerId: customerId, whenSuccess: whenSuccess });
        } else {
            showCreation({ whenSuccess: whenSuccess });
        }
    }

    function showEdition() {
        var _ref3 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        var customerId = _ref3.customerId;
        var whenSuccess = _ref3.whenSuccess;

        isEdition(true);
        onCustomerEditedCallback = whenSuccess || onCustomerEditedCallback;
        actionFactory.customer.getAllCountries(function (countries) {
            ko.utils.arrayPushAll(availableCountries, countries);
            actionFactory.customer.getCustomer(customerId, whenCustomerArrived);
        });
    }

    function showCreation() {
        var _ref4 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        var whenSuccess = _ref4.whenSuccess;

        isEdition(false);
        onCustomerCreatedCallback = whenSuccess || onCustomerCreatedCallback;
        actionFactory.customer.getAllCountries(function (countries) {
            ko.utils.arrayPushAll(availableCountries, countries);
            whenCustomerArrived({});
        });
    }

    function hide() {
        isEdition(false);
        isShown(false);
    }

    function saveCustomer() {
        isEdition() ? editCustomer() : createCustomer();
    }

    function createCustomer() {
        if (checkCustomerCoincidencesConditions()) {
            searchLikeName();
        } else callServerToCreateCustomer();
    }

    function callServerToCreateCustomer() {
        actionFactory.customer.createCustomer(toJson(), whenCustomerCreated);
    }

    function searchLikeName() {
        actionFactory.customer.searchCustomersDescriptions({ name: name(), firstSurname: firstSurname() }, whenCustomersLikeNameArrived);
    }

    function editCustomer() {
        actionFactory.customer.editCustomer(toJson(), whenCustomerEdited);
    }

    function searchByTaxId() {
        if (isEdition()) return;

        if (taxId()) {
            actionFactory.customer.searchCustomersDescriptions({ taxId: taxId() }, whenCustomerByTaxIdArrived);
        }
    }

    function checkCustomerCoincidencesConditions() {
        if (isEdition()) return false;
        if (customerSelector.visible()) return false;
        if (!isCompany() && (!name() || !firstSurname())) return false;
        if (isCompany() && !name()) return false;
        return true;
    }

    function whenCustomerSelected(selectedCustomer) {
        if (!selectedCustomer) return;
        hide();
        onCustomerCreatedCallback(toCustomerDescription(selectedCustomer));
    }

    function toCustomerDescription(customer) {
        var description = customer.id + ' - ' + customer.name;
        if (customer.firstSurname) {
            description += ' ' + customer.firstSurname;
        }
        if (customer.secondSurname) {
            description += '' + customer.secondSurname;
        }
        if (customer.taxId) {
            description += ' - ' + customer.taxId;
        }
        return {
            id: customer.id,
            description: description
        };
    }

    function whenCustomerCreated(newCustomer) {
        if (hideForm) hide();
        onCustomerCreatedCallback(newCustomer);
    }

    function whenCustomerEdited(editCustomer) {
        if (hideForm) hide();
        onCustomerEditedCallback(editCustomer);
    }

    function whenCustomerArrived(receivedCustomer) {
        isShown(true);
        loadCustomerProperties(receivedCustomer);
    }

    function whenCustomerByTaxIdArrived(customers) {
        if (customers.length == 0) return;
        customerSelector.showWithMandatorySelection(customers);
    }

    function whenCustomersLikeNameArrived(customers) {
        if (customers.length == 0) callServerToCreateCustomer();else customerSelector.show(customers);
    }

    function toJson() {
        return {
            isCompany: isCompany(),
            name: name(),
            firstSurname: firstSurname(),
            secondSurname: secondSurname(),
            taxId: taxId(),
            address: address(),
            city: city(),
            state: state(),
            country: country(),
            phoneNumber: phoneNumber(),
            email: email(),
            birthDate: birthDate(),
            id: customerId,
            disabled: disabled(),
            gender: gender(),
            postalCode: postalCode(),
            company: company()
        };
    }

    function loadCustomerProperties(receivedCustomer) {
        customerId = receivedCustomer.id;
        isCompany(receivedCustomer.isCompany);
        name(receivedCustomer.name);
        firstSurname(receivedCustomer.firstSurname);
        secondSurname(receivedCustomer.secondSurname);
        taxId(receivedCustomer.taxId);
        address(receivedCustomer.address);
        city(receivedCustomer.city);
        state(receivedCustomer.state);
        country(receivedCustomer.country);
        phoneNumber(receivedCustomer.phoneNumber);
        email(receivedCustomer.email);
        birthDate(receivedCustomer.birthDate);
        id(receivedCustomer.id);
        disabled(receivedCustomer.disabled);
        gender(receivedCustomer.gender || undefined);
        postalCode(receivedCustomer.postalCode);
        company(receivedCustomer.company);
    }

    function setIsCompany(isCompanyValue) {
        isCompany(isCompanyValue);
    }

    function isNameMissing() {
        return name() == "" || name() == undefined;
    }

    return {
        isShown: isShown,
        hide: hide,
        show: show,
        canSaveCustomer: canSaveCustomer,
        createCustomer: createCustomer,
        searchByTaxId: searchByTaxId,
        searchLikeName: searchLikeName,
        isCompany: isCompany,
        name: name,
        firstSurname: firstSurname,
        secondSurname: secondSurname,
        taxId: taxId,
        address: address,
        state: state,
        country: country,
        phoneNumber: phoneNumber,
        email: email,
        birthDate: birthDate,
        city: city,
        company: company,
        customerSelector: customerSelector,
        availableCountries: availableCountries,
        isEdition: isEdition,
        showCancel: showCancel,
        id: id,
        disabled: disabled,
        gender: gender,
        postalCode: postalCode,
        saveCustomer: saveCustomer,
        isMissing: isMissing,
        isNameMissing: isNameMissing,
        setIsCompany: setIsCompany,
        translator: translator,
        genderOptions: genderOptions,
        props: {
            isShown: isShown,
            hide: hide,
            show: show,
            canSaveCustomer: canSaveCustomer,
            createCustomer: createCustomer,
            searchByTaxId: searchByTaxId,
            searchLikeName: searchLikeName,
            isCompany: isCompany,
            name: name,
            firstSurname: firstSurname,
            secondSurname: secondSurname,
            taxId: taxId,
            address: address,
            state: state,
            country: country,
            phoneNumber: phoneNumber,
            email: email,
            birthDate: birthDate,
            city: city,
            company: company,
            customerSelector: customerSelector,
            availableCountries: availableCountries,
            isEdition: isEdition,
            showCancel: showCancel,
            id: id,
            disabled: disabled,
            gender: gender,
            postalCode: postalCode,
            saveCustomer: saveCustomer,
            isMissing: isMissing,
            isNameMissing: isNameMissing,
            setIsCompany: setIsCompany,
            translator: translator,
            genderOptions: genderOptions
        }
    };
}

module.exports = exports['default'];

},{"./CustomerSelector":4}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = CustomerSelector;
exports.SelectableCustomer = SelectableCustomer;

function CustomerSelector(whenItemSelected, noSelectionCallback) {
    var visible = ko.observable(false);
    var selectableCustomers = ko.observableArray();
    var mandatorySelection = ko.observable(false);

    function show(customers) {
        mandatorySelection(false);
        showModal(customers);
    }

    function showWithMandatorySelection(customers) {
        mandatorySelection(true);
        showModal(customers);
    }

    function showModal(customers) {
        visible(true);
        selectableCustomers().length = 0;
        ko.utils.arrayPushAll(selectableCustomers, _.map(customers, function (x) {
            return SelectableCustomer(x, select);
        }));
    }

    function select(selected) {
        visible(false);
        setTimeout(function () {
            return whenItemSelected(selected);
        }, 500);
    }

    function selectWithoutTimeout(selected) {
        visible(false);
        whenItemSelected(selected);
    }

    function close() {
        visible(false);
        setTimeout(function () {
            return noSelectionCallback();
        }, 500);
    }

    return { visible: visible, selectableCustomers: selectableCustomers, show: show, showWithMandatorySelection: showWithMandatorySelection, select: select, selectWithoutTimeout: selectWithoutTimeout, close: close, mandatorySelection: mandatorySelection };
}

function SelectableCustomer(customer, whenSelected) {

    function select() {
        whenSelected(customer);
    }

    return { select: select, customer: customer };
}

},{}],"aida-customers":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.exportApi = exportApi;

function exportApi() {
    return {};
}

var aidaCustomers = require('aida-customers').exportApi();
window.aidaCustomers = aidaCustomers;

},{"aida-customers":"aida-customers"}]},{},[1,2])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
