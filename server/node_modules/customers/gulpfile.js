const babelify = require('babelify');
const browserify = require('browserify');
const concat = require('gulp-concat');
const del = require('del');
const eslint = require('gulp-eslint');
const glob = require('globule');
const gulp = require('gulp');
const gulpSequence = require('gulp-sequence');
const karmaServer = require('karma').Server;
const mainBowerFiles = require('main-bower-files');
const rename = require('gulp-rename');
const through = require('through2');
const vinyl = require('vinyl');
const vinylSource = require('vinyl-source-stream');

//Bundle config
const globalNamespace = 'aida-customers';
const sourceBundle = 'aida-customers.js';
const sourceLauncher = 'main.js';

//Sources config
const sourceFolder = './Scripts/src';
const sourceFiles = sourceFolder + '/**/*';
const sourceJsFiles = sourceFolder + '/**/*.js';
const sourceLessFiles = sourceFolder + '/**/*.less';
const moduleGlobalLessFiles = './Resources/css/*.less';
const imagesFolder = './Resources/img/**';

//Build config
const binFolder = './Scripts/bin';
const buildingTempFolder = binFolder + '/temp';
const jsBuildFolder = buildingTempFolder + '/js/src';
const jsBuildFiles = jsBuildFolder + '/**/*.js';
const cssBuildFolder = buildingTempFolder + '/css';
const componentsTemplatesFiles = jsBuildFolder + '/**/*.html';
const sourceBundleLauncher = jsBuildFolder + "/" + sourceLauncher;

//Modules config
const devAidaCoreFolder = '../../Infrastructure/Infrastructure.Core.Web';
const npmAidaCoreFolder = './node_modules/aida-core';

//Dist config
const distFolder = './dist';
const jsDistFolder = distFolder + '/src';
const lessDistFolder = distFolder + '/less';
const imgDistFolder = distFolder + '/img';
const packageJson = './Scripts/dist-package.json';

//Spec config
const specBundle = 'specs.js';
const specFiles = './Scripts/spec/**/*.js';
const specBinFolder = './Scripts/bin';
const specBuildFolder = buildingTempFolder + '/js/spec';
const specBuildFiles = specBuildFolder + '/**/*.js';
const specVendorFolder = specBinFolder + '/vendor/';

// Build & Dist ---------------------------------------------------------------------

gulp.task('clean-dist-folder', function () {
    return del(distFolder + "/**", { force: true });
});

gulp.task('clean-bin-folder', function () {
    return del(binFolder + "/**", { force: true });
});

gulp.task('copy-eslint', function () {
    const eslintFile = devAidaCoreFolder + '/.eslintrc.js';
    return gulp.src(eslintFile)
        .pipe(gulp.dest('.'));
});

gulp.task('exec-lint', function () {
    gulp.src([sourceJsFiles])
        .pipe(eslint())
        .pipe(eslint.format());
    return gulp.src([specFiles])
        .pipe(eslint())
        .pipe(eslint.format());
});

gulp.task('copy-src-to-temp', function () {
    return gulp.src(sourceFiles)
        .pipe(gulp.dest(jsBuildFolder));
});

gulp.task('copy-aida-core', function () {
    const moduleJs = devAidaCoreFolder + '/dist/src/*.js';
    const moduleSpecJs = devAidaCoreFolder + '/dist/spec/*.js';
    gulp.src([moduleJs, moduleSpecJs])
        .pipe(gulp.dest(binFolder + '/aida'));
});

gulp.task('import-aida-core', function () {
    const moduleJs = npmAidaCoreFolder + '/src/*.js';
    const moduleSpecJs = npmAidaCoreFolder + '/spec/*.js';
    gulp.src([moduleJs, moduleSpecJs])
        .pipe(gulp.dest(binFolder + '/aida'));
});

gulp.task('parse-components-templates', function () {
    // transforma los templates html de los componentes en ficheros js que exportan un string importable desde los componentes 
    return gulp.src(componentsTemplatesFiles)
        .pipe((function (opts) {
            opts = opts || {};
            return through.obj(function (file, enc, cb) {
                if (file.isNull()) {
                    cb(null, file);
                    return;
                }
                try {
                    var newFile = buildJsFileFrom(file);
                    this.push(newFile);
                } catch (err) {
                    this.emit('error', err);
                }
                cb();
            });
        })())
        .pipe(gulp.dest(jsBuildFolder));
});

gulp.task('copy-less-to-temp', function () {
    return gulp.src([moduleGlobalLessFiles, sourceLessFiles])
        .pipe(gulp.dest(cssBuildFolder));
});

gulp.task('join-less', function () {
    return gulp.src(cssBuildFolder + '/**/*.less')
        .pipe(concat(globalNamespace + '.less'))
        .pipe(gulp.dest(lessDistFolder));
});

gulp.task('package-js-for-dev', function () {
    gulp.src(packageJson)
        .pipe(rename({ basename: 'package', dirname: '' }))
        .pipe(gulp.dest(distFolder));
    return bundle([jsBuildFiles], sourceBundle, jsDistFolder, sourceBundleLauncher, globalNamespace, true);
});

gulp.task('package-js-for-dist', function () {
    gulp.src(packageJson)
        .pipe(rename({ basename: 'package', dirname: '' }))
        .pipe(gulp.dest(distFolder));
    return bundle([jsBuildFiles], sourceBundle, jsDistFolder, sourceBundleLauncher, globalNamespace, false);
});

gulp.task('copy-images', function () {
    return gulp.src(imagesFolder)
        .pipe(gulp.dest(imgDistFolder));
});

gulp.task('clean-building-folder', function () {
    return del(buildingTempFolder + "/**", { force: true });
});

// Spec -------------------------------------------------------------------------------

gulp.task('copy-spec-to-temp', function () {
    return gulp.src(specFiles)
        .pipe(gulp.dest(specBuildFolder));
});

gulp.task('package-js-spec', function () {
    return bundle([specBuildFiles], specBundle, specBinFolder, sourceBundleLauncher, globalNamespace, true);
});

gulp.task('package-vendor-spec', function () {
    const jsBowerFiles = mainBowerFiles({ filter: new RegExp('.*js$', 'i'), includeDev: true });
    return gulp.src(jsBowerFiles)
        .pipe(gulp.dest(specVendorFolder));
});

gulp.task('run-tests', function (done) {
    var server = new karmaServer(
        {
            configFile: __dirname + '/Scripts/karma.conf.js',
            singleRun: true
        }, 
        function (exitCode){
            done();
        });
    server.start();
});

// Tools -------------------------------------------------------------------------------

function buildJsFileFrom(file) {
    var CRLF = String.fromCharCode(13);
    var importableJsVersionOfTheTemplate = "/* eslint-disable */";
    importableJsVersionOfTheTemplate += "// Autogenerated with Gulp (task: parse-components-templates)" + CRLF;
    importableJsVersionOfTheTemplate += "// Dont change this file, change the .html file instead and run Gulp" + CRLF;
    importableJsVersionOfTheTemplate += "export default" + " `" + CRLF + file.contents.toString() + "`;";
    var encoding = 'utf-8'; // Warning: if source is not UTF-8 this will be a problem.
    var buffer = new Buffer(importableJsVersionOfTheTemplate, encoding);
    return new vinyl({
        base: file.base,
        path: file.path.replace(".html", ".js"),
        contents: buffer
    });
}

function bundle(sources, outputFile, targetFolder, launcher, namespace, isForDebug) {
    return doBrowserify(sources, isForDebug)
        .require(launcher, { expose: namespace })
        .on('error', function (err) {
            console.error(err);
            this.emit('end');
        })
        .transform(babelify)
        .bundle()
        .pipe(vinylSource(outputFile))
        .pipe(gulp.dest(targetFolder));
}

function doBrowserify(sources, isForDebug) {
    return browserify({
        entries: glob.find(sources),
        debug: isForDebug
    });
}

// Public Tasks ------------------------------------------------------------------------
gulp.task('default', gulpSequence('build'));
gulp.task('build', gulpSequence('lint', 'build-code-for-dev'));
gulp.task('build-to-dist', gulpSequence('build-code-for-dist', 'run-tests'));
gulp.task('test', gulpSequence('build', 'run-tests'));

// Private Tasks -----------------------------------------------------------------------
gulp.task('lint', gulpSequence('copy-eslint', 'exec-lint'));
gulp.task('clean-dist', gulpSequence('clean-bin-folder', 'clean-dist-folder'));
gulp.task('build-code-for-dev', gulpSequence('clean-dist', 'copy-modules', 'copy-src-to-temp', 'parse-components-templates', 'package-for-dev', 'clean-temps'));
gulp.task('build-code-for-dist', gulpSequence('clean-dist', 'import-modules', 'copy-src-to-temp', 'parse-components-templates', 'package-for-dist', 'clean-temps'));
gulp.task('copy-modules', gulpSequence(['copy-aida-core']));
gulp.task('import-modules', gulpSequence(['import-aida-core']));
gulp.task('package-for-dev', gulpSequence(['package-code-for-dev', 'package-spec'])), 
gulp.task('package-for-dist', gulpSequence(['package-code-for-dist', 'package-spec'])), 
gulp.task('package-code-for-dev', gulpSequence(['package-js-for-dev', 'package-resources']));
gulp.task('package-code-for-dist', gulpSequence(['package-js-for-dist', 'package-resources']));
gulp.task('package-resources', gulpSequence(['package-css', 'copy-images']));
gulp.task('package-css', gulpSequence('copy-less-to-temp', 'join-less'));
gulp.task('package-spec', gulpSequence('copy-spec-to-temp', ['package-js-spec', 'package-vendor-spec']));
gulp.task('clean-temps', gulpSequence(['clean-building-folder']));