export default function DialogViewModel(translator) {

    let visible = ko.observable(false);
    let header = ko.observable('');
    let bodyTemplate = ko.observable('modalBody');
    let body = ko.observable('');
    let closeButton = ko.observable(translator.translate("SharedDomain.Close.Action"));
    let content = ko.observable();
    let footerTemplate = ko.observable('information_footer');
    let footer = ko.observable({ primaryLabel: okButton, okAction: ok, closeLabel: closeButton, closeAction: close });
    let okButton = ko.observable(translator.translate("SharedDomain.AcceptButton.Text"));
    let okCallback;
    let closeCallback;
    const showCallout = ko.observable(false);
    const calloutStyle = ko.observable();
    const calloutTimeout = ko.observable();
    const htmlTemplate = ko.observable('default_template');
    const htmlData = ko.observable();

    function setHtmlTemplate(htmlTemplateName){
        htmlTemplate('default_template');
        if (htmlTemplateName) {
            htmlTemplate(htmlTemplateName);
        }     
    }
    
    function error({title, message, htmlTemplateName, callback}) {
        showCallout(false);  
        calloutTimeout(undefined);
        calloutStyle("error");
        header(title);
        bodyTemplate('modalBody');
        body(message);
        title = title ? title + '.' : " ";
        message != undefined ? content(title  + message) : content(title);
        setHtmlTemplate(htmlTemplateName);
        closeCallback = callback;
        showCallout(true);
    }

    function warning({title, message, htmlTemplateName}) {
        showCallout(false);
        calloutTimeout(undefined);
        calloutStyle("warning");
        header(title);
        bodyTemplate('modalBody');
        body(message);
        message != undefined ? content(title + '. ' + message) : content(title);
        setHtmlTemplate(htmlTemplateName);
        showCallout(true);
    }

    function success({message, htmlTemplateName, callback}){
        showCallout(false);
        calloutTimeout(5000);
        calloutStyle("success");
        content(message);
        setHtmlTemplate(htmlTemplateName);
        showCallout(true);
        closeCallback = callback;
    }

    function confirmation({title, message, callback}) {
        okCallback = callback;
        footerTemplate('confirmation_footer');
        header(title);
        bodyTemplate('modalBody');
        body(message);
        closeButton(translator.translate("SharedDomain.CancelButton.Text"));
        visible(true);
    }

    function ask({title, message, yesButton, noButton, yesCallback, noCallback}) {
        okCallback = yesCallback;
        closeCallback = noCallback;
        footerTemplate('ask_footer');
        header(title);
        bodyTemplate('modalBody');
        body(message);
        okButton(yesButton);
        closeButton(noButton);
        visible(true);
    }

    function info({title, message, htmlTemplateName}) {
        showCallout(false);
        calloutTimeout(5000);
        calloutStyle("info");
        header(title);
        bodyTemplate('modalBody');
        body(message);
        message != undefined ? content(title + '. ' + message) : content(title);
        setHtmlTemplate(htmlTemplateName);
        showCallout(true);
    }

    function ok() {
        visible(false);
        if (okCallback) {
            setTimeout(okCallback, 1000);
        }
    }
    
    function okWithoutTimeout() {
        visible(false);
        if (okCallback) {
            okCallback();
        }
    }

    function close() {
        visible(false);
        if (closeCallback) {
            setTimeout(closeCallback, 1000);
        }
    }
   
    function closeWithoutTimeout(){
        visible(false);
        if (closeCallback) {
            closeCallback();
        }
    }

    function setFooter(template, viewModel) {
        footerTemplate('no_footer');
        footer(viewModel);
        footerTemplate(template);
    }

    function setBody(template, viewModel) {
        body(viewModel);
        bodyTemplate(template);
    }

    return {
        visible,
        header,
        body,
        setBody,
        closeButton,
        bodyTemplate,
        footerTemplate,
        footer,
        setFooter,
        okButton,
        ok,
        okWithoutTimeout,
        close,
        confirmation,
        ask,
        showCallout,
        calloutStyle,
        content,
        success,
        calloutTimeout,
        htmlTemplate,
        htmlData,
        error,
        warning,
        closeWithoutTimeout,
        info
    };
}
