ko.bindingHandlers.datepicker = {
    init: function (element, valueAccessor, allBindingsAccessor) {
        const selectedDate = getInitialValue();
        const endDate = allBindingsAccessor.get("endDate");
        const language = allBindingsAccessor.get("language");
        const startView = getStartView();
        let startDate = allBindingsAccessor.get("startDate");
        const startDateObservable = allBindingsAccessor.get("startDateObservable");
        if (startDateObservable !== undefined) {
            startDate = startDateObservable();
        }
        const clearButton = allBindingsAccessor.get("clearButton");
        let updating = false;

        $(element).datepicker({
            format: {
                toDisplay: function (date) {
                    return moment(date).format('L');
                },
                toValue: function (dateAsString) {
                    const date = moment(dateAsString, "L");
                    if (date.isValid()) {
                        return date.toDate();
                    }
                    return dateAsString ? moment(dateAsString).toDate() : null;
                }
            },
            endDate: endDate,
            language: language,
            startView: startView,
            startDate: startDate,
            clearBtn: clearButton,
            autoclose: true,
            orientation: "bottom auto"
        });

        if (startDateObservable !== undefined) {
            startDateObservable.subscribe(function (newStartDate) {
                $(element).datepicker('setStartDate', newStartDate);
            });
        }

        $(element).on("changeDate", function () {
            updating = true;
            let date = $(element).datepicker('getFormattedDate');
            selectedDate(toISO8601Format(date));
            updating = false;
        });

        $(element).addClass("datepicker");

        selectedDate.subscribe(() => {
            if (updating) return;
            updateDatePickerValue();
        });

        function getInitialValue() {
            let initialDate = valueAccessor();
            if (initialDate()) {
                return initialDate;
            }

            if (allBindingsAccessor.get("initialValue")) {
                let initialValue = allBindingsAccessor.get("initialValue");
                initialDate(initialValue);
            }
            return initialDate;
        }

        function getStartView() {
            const DAY_VIEW = 0;
            if (allBindingsAccessor.get("startView")) {
                return allBindingsAccessor.get("startView");
            }
            return DAY_VIEW;
        }

        function updateDatePickerValue() {
            $(element).datepicker('update', selectedDate());
        }

        function toISO8601Format(date) {
            if (!date) return null;
            return moment(date, 'L').toISOString();
        }

        updateDatePickerValue();

        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            $(element).datepicker('destroy');
        });
    }
};