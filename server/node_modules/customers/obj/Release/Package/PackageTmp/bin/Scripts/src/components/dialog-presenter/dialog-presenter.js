import RegisterComponent from "../../componentRegister";
import Template from "./dialog-presenter-template";
import DialogsViewModel from "../../Dialogs";

RegisterComponent('dialog-presenter', {
    script: {
        create: (props, dependencyProvider) => {
            return DialogPresenter({ dialogPublisher: dependencyProvider.getDialogPublisher(), translator: dependencyProvider.getTranslator()});
        },
        onCreated: (script) => { script.initialize(); }
    },
    template: Template
});

export default function DialogPresenter({dialogPublisher, translator}){
    const dialogsVm = DialogsViewModel(translator);

    function initialize(){
        dialogPublisher.onSuccess(showSuccessDialog);
        dialogPublisher.onError(showErrorDialog);
        dialogPublisher.onWarning(showWarningDialog);
        dialogPublisher.onConfirmation(showConfirmationDialog);
        dialogPublisher.onQuestion(showQuestionDialog);
    }

    function showSuccessDialog({message, htmlTemplateName}){
        dialogsVm.success({message,htmlTemplateName});
    }

    function showErrorDialog({title, message, htmlTemplateName}){
        dialogsVm.error({title, message, htmlTemplateName});
    }

    function showWarningDialog({title, message, htmlTemplateName}){
        dialogsVm.warning({title, message, htmlTemplateName});
    }

    function showConfirmationDialog({title, message, callback}) {
        dialogsVm.confirmation({title, message, callback});
    }

    function showQuestionDialog({title, message, yesButton, noButton, yesCallback, noCallback}) {
        dialogsVm.ask({title, message, yesButton, noButton, yesCallback, noCallback});
    }

    return {
        visible: dialogsVm.visible,
        header: dialogsVm.header,
        body: dialogsVm.body,
        closeButton: dialogsVm.closeButton,
        bodyTemplate: dialogsVm.bodyTemplate,
        footerTemplate: dialogsVm.footerTemplate,
        okButton: dialogsVm.okButton,
        ok: dialogsVm.ok,
        okWithoutTimeout: dialogsVm.okWithoutTimeout,
        close: dialogsVm.close,
        confirmation: showConfirmationDialog,
        ask: showQuestionDialog,
        showCallout: dialogsVm.showCallout,
        calloutStyle: dialogsVm.calloutStyle,
        content: dialogsVm.content,
        success: showSuccessDialog,
        calloutTimeout: dialogsVm.calloutTimeout,
        htmlTemplate: dialogsVm.htmlTemplate,
        htmlData: dialogsVm.htmlData,
        error: showErrorDialog,
        warning: showWarningDialog,
        closeWithoutTimeout: dialogsVm.closeWithoutTimeout,
        info: dialogsVm.info,
        initialize
    };
}