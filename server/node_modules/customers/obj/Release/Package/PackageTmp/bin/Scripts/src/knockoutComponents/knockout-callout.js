ko.components.register('callout', {
    viewModel: {
        createViewModel: function (params) {
            const showCallout = params.visible;
            const message = params.text;
            const htmlTemplate = params.html ? params.html.template : ko.observable();
            const htmlData = params.html ? params.html.data : ko.observable();
            const actionResult = params.actionResult;
            const calloutStyle = ko.observable();
            const iconStyle = ko.observable();
            let activeTimeout;
            let closeCallback = () => {};

            actionResult.subscribe(() => setStyle());

            setTemplate();
            setStyle();
            configTimeout(params.timeout);
            if (params.closeCallback) closeCallback = params.closeCallback;

            function closeCallout() {
                if (activeTimeout) clearTimeout(activeTimeout);                
                showCallout(false);
                closeCallback();
            }

            function determineCssByResult(actionResult) {
                let stylesMap = {
                    'success': { alert: "alert alert-success", icon: "icon fa fa-check" },
                    'info': { alert: "alert alert-info", icon: "icon fa fa-info" },
                    'warning': { alert: "alert alert-warning", icon: "icon fa fa-warning" },
                    'error': { alert: "alert alert-error", icon: "icon fa fa-ban" }
                };

                return stylesMap[actionResult] || stylesMap['info'];
            }

            function configTimeout(timeout) {
                showCallout.subscribe(() => {
                    if (showCallout()) {
                        if (activeTimeout) clearTimeout(activeTimeout);
                        const calloutTimeout = ko.unwrap(timeout);
                        if (calloutTimeout) {
                            activeTimeout = setTimeout(closeCallout, ko.unwrap(timeout));
                        } else {
                            activeTimeout = null;
                        }
                    }
                });
            }

            function setTemplate() {
                if (!htmlTemplate()) {
                    htmlTemplate("default_template");
                }
                if (htmlTemplate() == "default_template"){
                    htmlData({closeCallout, iconStyle, message});
                }
            }
            function setStyle() {
                const style = determineCssByResult(actionResult());
                calloutStyle(style.alert);
                iconStyle(style.icon);
            }

            return { showCallout, message, calloutStyle, iconStyle, closeCallout, htmlTemplate, htmlData };
        }
    },

    template:
    '<div class="col-lg-5 col-xs-6 callout-container" data-bind="fadeVisible: showCallout">\
        <div id="callout" data-bind="fadeVisible: showCallout, css: calloutStyle, template: { name: htmlTemplate, data: htmlData }"></div>\
    </div>\
    <script type="text/html" id="default_template">\
            <button type="button" class="close" data-bind="click: closeCallout">×</button>\
            <span data-bind="text: message"></span>\
    </script>'
});