import Configurator from "../../src/domain/configurator/configurator";
import CatalogHelper from './catalogHelper';

export default function ConfiguratorBuilder() {

    let loadedConfiguration = ko.observable();
    let whenConfigurationChanged = () => { };

    function withLoadedConfiguration(config) {
        loadedConfiguration = config;
        return publicInterface;
    }

    function withConfigurationChangedCallback(callback) {
        whenConfigurationChanged = callback;
        return publicInterface;
    }

    function build() {
        const translator = aidaCore.TranslationService({});
        const catalog = CatalogHelper.catalog;
        const selectedBrand = ko.observable('V');
        let getCatalogCall = {};
        const catalogClient = {
            getCatalog(brandId, modelCode, callback) {
                getCatalogCall.brandId = brandId;
                getCatalogCall.modelCode = modelCode;
                callback(catalog);
            }
        };
        const configurationClient = createConfigurationClient();
        const dialogPublisher = aidaCore.DialogPublisher;
        return Configurator(
            {
                selectedBrand,
                whenConfigurationChanged,
                loadedConfiguration
            }, {
                translator,
                catalogClient,
                configurationClient,
                dialogPublisher
            });
    }

    function createConfigurationClient() {
        const createConfigurationCall = {};
        const createConfigurationRequest = {};
        const changeColorWithoutCombinationCall = {};
        const changeInteriorWithoutCombinationCall = {};
        const actionType = {
            IsChangeColor: () => { return false; }
        };
        return {
            createConfiguration(brandId, model, callback) {
                createConfigurationCall.model = model;
                const newConfig = createNewConfig();
                callback(newConfig);
            },
            createConfigurationWithCombination(brandId, combination, callback) {
                createConfigurationRequest.combination = combination;
                const newConfig = createNewConfig();
                newConfig.modelCompulsory = { combinedItems: _.map(combination.items, (item) => { return { code: item.description }; }) };
                callback(newConfig);
            },
            changeColorWithoutCombination(modelConfiguration, colorCode, callback) {
                changeColorWithoutCombinationCall.modelConfiguration = modelConfiguration;
                changeColorWithoutCombinationCall.colorCode = colorCode;
                const newConfig = createNewConfig();
                newConfig.color = { code: colorCode };
                callback(newConfig, actionType);
            },
            changeInteriorWithoutCombination(modelConfiguration, interiorCode, callback) {
                changeInteriorWithoutCombinationCall.modelConfiguration = modelConfiguration;
                changeInteriorWithoutCombinationCall.interiorCode = interiorCode;
                const newConfig = createNewConfig();
                newConfig.interior = { code: interiorCode };
                callback(newConfig, actionType);
            },
            addEquipmentWithoutCombination(configuration, equipmentCode, callback) {
                const newConfig = createNewConfig();
                callback(newConfig);
            }
        };
    }

    function createNewConfig() {
        return { color: null, interior: null, equipments: [], packages: [] };
    }

    const publicInterface = {
        build,
        withLoadedConfiguration,
        withConfigurationChangedCallback
    };

    return publicInterface;
}