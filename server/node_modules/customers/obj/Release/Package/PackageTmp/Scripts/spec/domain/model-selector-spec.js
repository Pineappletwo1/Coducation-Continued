import ModelSelector from '../../src/domain/model-selector/model-selector';
describe('model-selector should', () => {

    const translator = { translate: () => { } };
    const catalogClient = { getModels() { } };
    const loadedModel = ko.observable();
    let selectedBrand = ko.observable();
    let modelSelector;
    let whenModelSelected = () => { };
    let whenModelUnselected = () => { };
    let whenModelCategorySelected = () => { };
    let whenModelCategoryUnselected = () => { };

    function createAModelForVolskwagen(modelGroupId) {
        return {
            active: true,
            categories: { modelGroup: { id: modelGroupId, description: "121 - up! - (MY 2016)", position: 0 } },
            compulsoryCombinationChoices: null,
            description: "1213A1 - 1.0 60 CV Move up! 5G (B)",
            isAVersion: false,
            key: { id: "V_1213A1_2016_X3J", code: "1213A1", brandId: "V" },
            modelYear: null
        };
    }
    const firstModelGroup = "121_2016";

    const PoloFamily = { id: 1, description: "Polo" };
    const GolfFamily = { id: 2, description: "Golf" };
    const PoloHighlineProductLine = { id: 1, description: "Polo Highline" };
    const GolfHighlineProductLine = { id: 3, description: "Golf Highline" };
    const StandardProductLine = { id: 2, description: "Standard" };
    const GasolinaFuel = { id: 1, description: "Gasolina" };
    const DieselFuel = { id: 2, description: "Diesel" };
    const PoloModel = { id: 1, description: "VW Polo 1.2 Gasolina" };

    const models = [
        {
            description: "VW Golf 1.2 Diesel",
            categories: {
                family: GolfFamily,
                productLine: GolfHighlineProductLine,
                fuel: DieselFuel
            }
        },
        {
            description: "VW Golf 1.2 Gasolina",
            categories: {
                family: GolfFamily,
                productLine: StandardProductLine,
                fuel: { id: 1, description: "Gasolina" }
            }
        },
        {
            //key: { code: PoloModel.id },
            description: "VW Polo 1.2 Gasolina",
            categories: {
                family: { id: 1, description: "Polo" },
                productLine: { id: 1, description: "Polo Highline" },
                fuel: { id: 1, description: "Gasolina" }
            }
        },
        {
            description: "VW Golf 1.7 Diesel",
            categories: {
                family: GolfFamily,
                productLine: GolfHighlineProductLine,
                fuel: DieselFuel
            }
        }
    ];

    let familyFilter;
    let productLineFilter;
    let fuelFilter;

    function initializeCategoriesToSelector() {
        selectedBrand({ id: 'V', description: 'VOLKSWAGEN' });

        familyFilter = modelSelector.categories()[0];
        productLineFilter = modelSelector.categories()[1];
        fuelFilter = modelSelector.categories()[2];
    }

    function givenACatalogWith(models) {
        spyOn(catalogClient, "getModels").and.callFake((brand, callback) => {
            callback(models);
        });
    }

    function filterContains(filter, optionDescription) {
        return _.some(filter.options(), (option) => option.description == optionDescription);
    }    

    describe('when initializing', () => {
        it('load models for the selected brand', () => {
            const selectedBrand = ko.observable({ id: 'V', description: 'VOLKSWAGEN' });
            const models = [
                createAModelForVolskwagen(firstModelGroup),
                createAModelForVolskwagen("122_2016")
            ];
            givenACatalogWith(models);
            const modelSelector = ModelSelector({ selectedBrand, whenModelSelected, whenModelUnselected, whenModelCategorySelected, whenModelCategoryUnselected, loadedModel }, { translator, catalogClient });

            modelSelector.initialize();

            const expectedModelOption = {
                HierarchicalId: "_121_2016",
                description: "121 - up! - (MY 2016)",
                id: firstModelGroup,
                position: 0
            };
            const modelGroups = modelSelector.categories()[0];
            expect(modelGroups.name).toBe('modelGroup');
            expect(modelGroups.options().length).toBe(2);
            expect(modelGroups.options()).toContain(expectedModelOption);
        });

        it('no load models when the brand is not set', () => {
            const withoutBrand = ko.observable('');
            spyOn(catalogClient, "getModels");
            const modelSelector = ModelSelector({ selectedBrand: withoutBrand, whenModelSelected, whenModelUnselected, whenModelCategorySelected, whenModelCategoryUnselected, loadedModel }, { translator, catalogClient });

            modelSelector.initialize();

            expect(catalogClient.getModels).not.toHaveBeenCalled();
        });

    });

    describe("when selecting a model", () => {
        beforeEach(() => {
            whenModelSelected = jasmine.createSpy('whenModelSelected');
            whenModelUnselected = jasmine.createSpy('whenModelUnselected');
            givenACatalogWith(models);
            modelSelector = ModelSelector({ selectedBrand, whenModelSelected, whenModelUnselected, whenModelCategorySelected, whenModelCategoryUnselected, loadedModel }, { translator, catalogClient });
        });

        it("call back when a model is selected", function () {
            selectedBrand({ id: 'V', description: 'VOLKSWAGEN' });
            modelSelector.categories()[0].whenFilterSelected(PoloFamily);
            modelSelector.categories()[1].whenFilterSelected(PoloHighlineProductLine);
            modelSelector.categories()[2].whenFilterSelected(GasolinaFuel);

            modelSelector.onModelSelected(PoloModel);

            expect(whenModelSelected).toHaveBeenCalled();
        });

        it("call back when a model is unselected", function () {
            selectedBrand({ id: 'V', description: 'VOLKSWAGEN' });
            modelSelector.categories()[0].whenFilterSelected(PoloFamily);
            modelSelector.categories()[1].whenFilterSelected(PoloHighlineProductLine);
            modelSelector.categories()[2].whenFilterSelected(GasolinaFuel);

            modelSelector.onModelSelected(null);

            expect(whenModelUnselected).toHaveBeenCalled();
        });
    });

    describe('when creating category filters', () => {
        beforeEach(() => {
            modelSelector = ModelSelector({ selectedBrand, whenModelSelected, whenModelUnselected, whenModelCategorySelected, whenModelCategoryUnselected, loadedModel }, { translator, catalogClient });
        });

        it("do not create filters when has no models", () => {
            const noModels = [];
            givenACatalogWith(noModels);

            selectedBrand({ id: 'V', description: 'VOLKSWAGEN' });

            expect(modelSelector.categories()).toBeEmptyArray();
        });

        it("has one filter per category", () => {
            givenACatalogWith(models);

            initializeCategoriesToSelector();

            expect(modelSelector.categories().length).toBe(3);
            expect(familyFilter.name).toBe('family');
            expect(productLineFilter.name).toBe('productLine');
            expect(fuelFilter.name).toBe('fuel');
        });

        it("has options for the first filter", () => {
            givenACatalogWith(models);

            initializeCategoriesToSelector();

            expect(familyFilter.options().length).toBe(2);
            expect(filterContains(familyFilter, "Polo")).toBeTrue();
            expect(filterContains(familyFilter, "Golf")).toBeTrue();
        });
    }); 

    describe("when enabling and disabling filters", () => {
        beforeEach(() => {
            givenACatalogWith(models);
            modelSelector = ModelSelector({ selectedBrand, whenModelSelected, whenModelUnselected, whenModelCategorySelected, whenModelCategoryUnselected, loadedModel }, { translator, catalogClient });
        });

        it("enable only the first filter at start", function () {
            initializeCategoriesToSelector();

            expect(familyFilter.enabled()).toBeTrue();
            expect(productLineFilter.enabled()).toBeFalse();
            expect(fuelFilter.enabled()).toBeFalse();
            expect(modelSelector.modelEnabled()).toBeFalse();
        });

        it("enable next filter when one is selected", function () {
            initializeCategoriesToSelector();

            familyFilter.whenFilterSelected(PoloFamily);

            expect(productLineFilter.enabled()).toBe(true);
        });

        it("enable model filter when last filter is selected", function () {
            initializeCategoriesToSelector(models);
            familyFilter.whenFilterSelected(PoloFamily);
            productLineFilter.whenFilterSelected(PoloHighlineProductLine);

            fuelFilter.whenFilterSelected(GasolinaFuel);

            expect(modelSelector.modelEnabled()).toBe(true);
        });

        it("enable only the next filters and disable others when one is selected", function () {
            initializeCategoriesToSelector();
            familyFilter.whenFilterSelected(PoloFamily);
            productLineFilter.whenFilterSelected(PoloHighlineProductLine);
            fuelFilter.whenFilterSelected(GasolinaFuel);

            familyFilter.whenFilterSelected(GolfFamily);

            expect(familyFilter.enabled()).toBeTrue();
            expect(productLineFilter.enabled()).toBeTrue();
            expect(fuelFilter.enabled()).toBeFalse();
            expect(modelSelector.modelEnabled()).toBeFalse();
        });

        it("disable next filters when undefined is selected in any filter", function () {
            initializeCategoriesToSelector();
            familyFilter.whenFilterSelected(PoloFamily);
            productLineFilter.whenFilterSelected(PoloHighlineProductLine);
            fuelFilter.whenFilterSelected(GasolinaFuel);
            modelSelector.onModelSelected(PoloModel);

            familyFilter.whenFilterSelected(undefined);

            expect(familyFilter.enabled()).toBeTrue();
            expect(productLineFilter.enabled()).toBeFalse();
            expect(fuelFilter.enabled()).toBeFalse();
            expect(modelSelector.modelEnabled()).toBeFalse();
        });
    });

    describe('when using filters', () => {
        beforeEach(() => {
            givenACatalogWith(models);
            modelSelector = ModelSelector({ selectedBrand, whenModelSelected, whenModelUnselected, whenModelCategorySelected, whenModelCategoryUnselected, loadedModel }, { translator, catalogClient });
        });

        it("fill the model filter when the categories filters are selected", function () {
            initializeCategoriesToSelector(models);

            familyFilter.whenFilterSelected(GolfFamily);
            productLineFilter.whenFilterSelected(GolfHighlineProductLine);
            fuelFilter.whenFilterSelected(DieselFuel);

            expect(modelSelector.models().length).toBe(2);
            expect(modelFilterContains(modelSelector, "VW Golf 1.2 Diesel")).toBeTrue();
            expect(modelFilterContains(modelSelector, "VW Golf 1.7 Diesel")).toBeTrue();
        });

        function modelFilterContains(modelSelector, optionDescription) {
            return _.some(modelSelector.models(), (option) => option.description == optionDescription);
        }
    });

    describe("when selecting filters", function () {
        beforeEach(() => {
            givenACatalogWith(models);
            modelSelector = ModelSelector({ selectedBrand, whenModelSelected, whenModelUnselected, whenModelCategorySelected, whenModelCategoryUnselected, loadedModel }, { translator, catalogClient });
        });

        it("change the options in product line filter when the user change the selection in the family filter", function () {
            initializeCategoriesToSelector();

            familyFilter.whenFilterSelected(GolfFamily);

            expect(productLineFilter.options().length).toBe(2);
            expect(filterContains(productLineFilter, GolfHighlineProductLine.description)).toBeTrue();
            expect(filterContains(productLineFilter, StandardProductLine.description)).toBeTrue();
        });

        it("change the options for the fuel filter when family and product line are selected", function () {
            initializeCategoriesToSelector();

            familyFilter.whenFilterSelected(PoloFamily);
            productLineFilter.whenFilterSelected(PoloHighlineProductLine);

            expect(fuelFilter.options().length).toBe(1);
            expect(filterContains(fuelFilter, GasolinaFuel.description)).toBeTrue();
        });
    });
});