export default function ModelConfiguration() {
    let modelGroupCode;
    const modelId = ko.observable();
    const modelDescription = ko.observable();
    const equipments = ko.observableArray();
    const configuredColor = ko.observable();
    const configuredInterior = ko.observable();
    const modelCompulsory = ko.observableArray();
    const showOrderCreation = ko.observable(false);
    const unableToRebuildItems = ko.observableArray();
    const isAVersion = ko.observable();
    let modelAutofixes;
    let modelCode;

    function addUnableToRebuildItem(item) {
        unableToRebuildItems.push(item);
    }

    function removeUnableToRebuildItem(item) {
        unableToRebuildItems.remove(item);
    }

    function setAutofixes(autofixes) {
        modelAutofixes = autofixes;
    }

    function canSaveOrder() {
        return hasModel() && hasColor() && hasInterior();
    }

    function addEquipment(equipment) {
        equipments.remove(equipment);
        equipments.push(equipment);
    }

    function addCompulsory(combinedItem) {
        modelCompulsory.push(combinedItem);
    }

    function setModelGroupCode(modelGroup) {
        modelGroupCode = modelGroup;
    }

    function setModel(model) {
        removeModel();
        modelCode = model.key.code;
        modelId(model.key.id);
        modelDescription(model.description);
        isAVersion(model.isAVersion);
    }

    function isNotTheSameModel(model) {
        return model.key.code != modelCode;
    }

    function clean() {
        modelGroupCode = '';
        modelCode = '';
        modelId(undefined);
        modelDescription(undefined);
        cleanSelections();
    }

    function removeModel() {
        modelCode = '';
        modelId(undefined);
        modelDescription(undefined);
        cleanSelections();
    }

    function cleanSelections() {
        showOrderCreation(false);
        equipments.removeAll();
        modelCompulsory.removeAll();
        configuredColor(undefined);
        configuredInterior(undefined);
    }

    function setColor(color) {
        configuredColor(color);
    }

    function setInterior(interior) {
        configuredInterior(interior);
    }

    function isEmpty() {
        return !hasModel();
    }

    function toJson() {
        return {
            modelGroupCode: modelGroupCode,
            modelKey: { id: modelId(), code: modelCode, description: modelDescription(), isAVersion: isAVersion() },
            color: configuredColor() != undefined ? configuredColor().toJson() : {},
            interior: configuredInterior() != undefined ? configuredInterior().toJson() : {},
            equipments: _.map(equipments(), (x) => x.toJson()),
            modelCompulsory: {
                combinedItems: _.map(modelCompulsory(), (x) => {
                    return { code: x.code, type: x.type };
                })
            },
            autoFixes: modelAutofixes
        };
    }

    function hasForcedColor() {
        if (configuredColor() == undefined) return false;

        return _.any(equipments(), (x) => x.containsForcedItem(configuredColor().code)) ||
            (configuredInterior() && configuredInterior().containsForcedItem(configuredColor().code)) ||
            _.any(modelCompulsory(), (x) => x.code == configuredColor().code);
    }

    function hasForcedInterior() {
        if (configuredInterior() == undefined) return false;
        return _.any(equipments(), (x) => x.containsForcedItem(configuredInterior().code)) ||
            (configuredColor() && configuredColor().containsForcedItem(configuredInterior().code)) ||
            _.any(modelCompulsory(), (x) => x.code == configuredInterior().code);
    }

    function hasColor() {
        return !_.isUndefined(configuredColor());
    }

    function hasInterior() {
        return !_.isUndefined(configuredInterior());
    }

    function hasModel() {
        return !_.isUndefined(modelId());
    }

    function hasEquipment(equipmentCode) {
        return _.any(equipments(), x => x.code == equipmentCode) ||
            _.any(modelCompulsory(), x => x.code == equipmentCode) ||
            (configuredColor() && configuredColor().containsForcedItem(equipmentCode)) ||
            (configuredInterior() && configuredInterior().containsForcedItem(equipmentCode));
    }

    function colorHasChanged(newConfiguration) {
        return configuredColor() &&
            newConfiguration.color &&
            configuredColor().code != newConfiguration.color.code;
    }

    function interiorHasChanged(newConfiguration) {
        return configuredInterior() &&
            newConfiguration.interior &&
            configuredInterior().code != newConfiguration.interior.code;
    }

    return {
        modelId,
        modelDescription,
        equipments,
        modelCompulsory,
        setModelGroupCode,
        setModel,
        setColor,
        setInterior,
        addEquipment,
        addCompulsory,
        clean,
        removeModel,
        toJson,
        hasColor,
        hasInterior,
        hasForcedColor,
        hasForcedInterior,
        configuredColor,
        configuredInterior,
        colorHasChanged,
        interiorHasChanged,
        canSaveOrder,
        showOrderCreation,
        cleanSelections,
        setAutofixes,
        unableToRebuildItems,
        addUnableToRebuildItem,
        removeUnableToRebuildItem,
        isNotTheSameModel,
        hasEquipment,
        isEmpty
    };
}