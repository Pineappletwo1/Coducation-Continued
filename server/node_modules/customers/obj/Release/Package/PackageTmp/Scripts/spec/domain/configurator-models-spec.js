import Configurator from "../../src/domain/configurator/configurator";
import Combination from '../../src/domain/configurator/scripts/combination';
import CatalogHelper from './catalogHelper';

describe("configurator with model should", () => {
    const catalog = CatalogHelper.catalog;
    const camera = CatalogHelper.camera;
    const bluetooth = CatalogHelper.bluetooth;

    let createConfigurationCall = {};
    let getCatalogCall = {};
    const createConfigurationRequest = {};
    const modelGroupCode = 'ABC';
    const categoryId = modelGroupCode + '_2015';
    

    function createNewConfig() {
        return { color: null, interior: null, equipments: [], packages: [] };
    }

    function createConfigurationClient() {
        return {
            createConfiguration(brandId, model) {
                createConfigurationCall.model = model;
            },
            createConfigurationWithCombination(brandId, combination, callback) {
                createConfigurationRequest.combination = combination;
                let newConfig = createNewConfig();
                newConfig.modelCompulsory = { combinedItems: _.map(combination.items, (item) => { return { code: item.description }; }) };
                callback(newConfig);
            }
        };
    }
    const catalogClient = {
        getCatalog(brandId, modelCode, callback) {
            getCatalogCall.brandId = brandId;
            getCatalogCall.modelCode = modelCode;
            callback(catalog);
        }
    };

    const translator = aidaCore.TranslationService({});
    const dialogPublisher = aidaCore.DialogPublisher;
    let modelConfiguration;
    const whenConfigurationChanged = (newConfiguration) => {
        modelConfiguration = newConfiguration;
    };
    let configurator;
    let configurationClient;

    const selectedBrand = ko.observable('V');
    const emptyConfiguration = {
        modelGroupCode: '',
        modelKey: { id: undefined, code: '', description: undefined, isAVersion: undefined },
        color: {}, interior: {}, equipments: [],
        modelCompulsory: { combinedItems: [] }, autoFixes: undefined
    };
    const emptyModel = undefined;
    const loadedConfiguration = ko.observable();

    beforeEach(() => {
        configurationClient = createConfigurationClient();
        configurator = Configurator(
            {
                selectedBrand,
                whenConfigurationChanged,
                loadedConfiguration
            }, {
                translator,
                catalogClient,
                configurationClient,
                dialogPublisher
            });
        configurator.selectedBrand({ id: "V" });
        catalog.modelCompulsoryCombinationChoices = [];
        modelConfiguration = emptyConfiguration;
    });

    describe('when selecting any model category', () => {
        it('include model group in configuration when category is selected', () => {
            configurator.whenModelCategorySelected(categoryId);

            expect(modelConfiguration.modelGroupCode).toEqual(modelGroupCode);
        }); 

        it('reset configuration and selectors when model category is unselected', () => {
            GivenASelectedModelFor(configurator);

            configurator.whenModelCategoryUnselected();

            expect(modelConfiguration).toEqual(emptyConfiguration);
            expect(configurator.selectedModel()).toEqual(emptyModel);
            expect(configurator.colorOptions()).toEqual([]);
            expect(configurator.interiorOptions()).toEqual([]);
            expect(configurator.availableEquipments()).toEqual([]);
        });
    });

    describe("when selecting a model", () => {
        it("call backend to get the catalog for the model", () => {
            getCatalogCall = {};

            configurator.whenModelSelected({
                key: { id: "1" },
                description: "VW Polo 1.2 Diesel"
            });

            expect(getCatalogCall.brandId).toBe("V");
            expect(getCatalogCall.modelCode).toBe("1");
        });

        it("call backend to create configuration with model when it has not combinations", () => {
            createConfigurationCall = {};

            configurator.whenModelSelected({
                key: { id: "1" },
                description: "VW Polo 1.2 Diesel"
            });

            expect(createConfigurationCall.model.code).toBe("1");
            expect(createConfigurationCall.model.descriptionWithoutCode).toBe("VW Polo 1.2 Diesel");
        });

        it("show selector when model has compulsories combinations", () => {
            catalog.modelCompulsoryCombinationChoices = [[{ code: "PH1" }], [{ code: "RFZ" }]];

            configurator.whenModelSelected({
                key: { id: "1" },
                description: "VW Polo 1.2 Diesel"
            });

            expect(configurator.combinationSelectorVisible()).toBe(true);
            expect(configurator.isCombinationMandatory()).toBe(true);
            expect(configurator.combinationOptions().length).toBe(2);
            expect(configurator.combinationOptions()[0].items.length).toBe(1);
            expect(configurator.combinationOptions()[0].items[0].code).toBe("PH1");
            expect(configurator.combinationOptions()[1].items.length).toBe(1);
            expect(configurator.combinationOptions()[1].items[0].code).toBe("RFZ");
        });

        it("call backend if a compulsory option is chosen", () => {
            catalog.modelCompulsoryCombinationChoices = [[{ code: "PH1" }], [{ code: "RFZ" }]];
            GivenASelectedModelFor(configurator);

            const chosenCombination = aCombination(['PH1']);
            configurator.whenCombinationSelected(chosenCombination);

            expect(createConfigurationRequest.combination).toEqual(chosenCombination);
        });

        it("apply configuration after calling the backend for a compulsory option", () => {
            catalog.modelCompulsoryCombinationChoices = [[{ code: camera.code }], [{ code: bluetooth.code }]];
            GivenASelectedModelFor(configurator);

            const chosenCombination = aCombination([camera.code]);
            configurator.whenCombinationSelected(chosenCombination);
            expect(modelConfiguration.modelCompulsory.combinedItems[0].code).toEqual(camera.code);
        });

        it("unselect model after a backend error", () => {
            configurationClient.createConfigurationWithCombination = (brandId, combination, callback, errorCallback) => {
                errorCallback();
            };
            catalog.modelCompulsoryCombinationChoices = [[{ code: camera.code }], [{ code: bluetooth.code }]];
            GivenASelectedModelFor(configurator);

            const chosenCombination = aCombination([""]);
            configurator.whenCombinationSelected(chosenCombination);
            expect(configurator.selectedModel()).toEqual(undefined);
        });

        it('reset configuration and selectors when model is unselected', () => {
            GivenACategorySelectedFor(configurator, categoryId);
            GivenASelectedModelFor(configurator);
            const expectedConfiguration = emptyConfiguration;
            expectedConfiguration.modelGroupCode = modelGroupCode;

            configurator.whenModelUnselected();

            expect(modelConfiguration).toEqual(expectedConfiguration);
            expect(configurator.colorOptions()).toEqual([]);
            expect(configurator.interiorOptions()).toEqual([]);
            expect(configurator.availableEquipments()).toEqual([]);
        });
    });

    function aCombination(items) {
        const root = { selected: ko.observable(false) };
        const combinationItems = _.map(items, (itemDescription) => {
            return {
                description: itemDescription,
                isInCatalog: () => true
            };
        });

        return Combination(root, combinationItems, {}, { error: () => { } }, translator);
    }

    function GivenACategorySelectedFor(configurator, categoryId) {
        configurator.whenModelCategorySelected(categoryId);
    }

    function GivenASelectedModelFor(configurator) {
        configurator.whenModelSelected({
            key: { id: "123" },
            description: "VW Polo 1.2 Diesel"
        });
    }
});