import ConfigurationFilter from "./configurationFilter";

export default function CategoriesSelector(whenFinishFiltering, whenResetAnyFilter) {
    let FILTER_NOT_FOUND = -1;
    let filtersAlreadyNotCreated = ko.observable(true);
    let catalog;
    let categoryFilters = ko.observableArray();

    function initializeCategories(initialCatalog) {
        catalog = initialCatalog;
        createFilters();
        filtersAlreadyNotCreated(false);
    }

    function createFilters() {
        categoryFilters.removeAll();
        let categories = catalog.getNamesOfCategories();

        _.forEach(categories, function (category) {
            categoryFilters.push(ConfigurationFilter(category, [], whenFilterChangeValue));
        });

        loadValuesForFirstfilter();
    }

    function loadValuesForFirstfilter() {
        let firstFilter = categoryFilters()[0];
        let options = catalog.valuesForCategory(firstFilter.name);
        firstFilter.setNewOptions(options);
    }

    function whenFilterChangeValue(filterName, selectedValue) {
        if (_.isUndefined(selectedValue)) {
            clearNextFilters(filterName);
            whenResetAnyFilter();
        } else {
            setOptionsForNextFilter(filterName, selectedValue);
        }
    }

    function setOptionsForNextFilter(filterName, selectedValue) {
        let filteredOptions;
        if (isLastFilter(filterName)) {
            filteredOptions = catalog.getModels(filterName, selectedValue);
            whenFinishFiltering(selectedValue.id, filteredOptions);
        } else {
            let nextFilter = findNextFilter(filterName);
            filteredOptions = catalog.valuesForCategory(nextFilter.name, selectedValue);
            clearNextFilters(nextFilter.name);
            whenResetAnyFilter();
            nextFilter.setNewOptions(filteredOptions);
        }
    }

    function clearNextFilters(filterName) {
        let filterIndex = indexOfFilter(filterName);
        if (filterIndex == FILTER_NOT_FOUND) return;

        for (let i = filterIndex + 1; i < categoryFilters().length; i++) {
            categoryFilters()[i].setNewOptions([]);
        }
    }

    function indexOfFilter(filterName) {
        for (let i = 0; i < categoryFilters().length; i++) {
            if (categoryFilters()[i].name === filterName) {
                return i;
            }
        }
        return FILTER_NOT_FOUND;
    }

    function findNextFilter(filterName) {
        for (let i = 0; i < categoryFilters().length; i++) {
            if (categoryFilters()[i].name === filterName) {
                if (i + 1 === categoryFilters().length) {
                    return null;
                } else {
                    return categoryFilters()[i + 1];
                }
            }
        }
    }

    function isLastFilter(filterName) {
        return _.findLastIndex(categoryFilters(), (filter) => filter.name == filterName) === (categoryFilters().length - 1);
    }

    function selectCategoriesForModel(model) {
        _.forEach(categoryFilters(), (categoryFilter) => {
            categoryFilter.select(model.categories[categoryFilter.name]);
        });
    }

    return {
        filters: categoryFilters,
        filtersAlreadyNotCreated,
        initializeCategories,
        selectCategoriesForModel
    };
}