import template from './model-selector-template';
import ConfigurationFilter from "./scripts/configurationFilter";
import CategoriesSelector from './scripts/categoriesSelector';
import CatalogClient from '../../infrastructure/clients/catalogClient';
import ModelsCatalog from "./scripts/modelsCatalog";

aidaCore.ComponentRegister('model-selector', {
    script: {
        create: (props, dependencyProvider) => {
            const selectedBrand = props.selectedBrand;
            const selectedModel = props.selectedModel || ko.observable();
            const whenModelSelected = props.whenModelSelected;
            const whenModelUnselected = props.whenModelUnselected;
            const whenModelCategorySelected = props.whenModelCategorySelected;
            const whenModelCategoryUnselected = props.whenModelCategoryUnselected;
            const loadedModel = props.loadedModel;
            const translator = dependencyProvider.getTranslator();
            const catalogClient = CatalogClient(dependencyProvider.getRestClient(), {}, {});

            return new ModelSelector(
                {
                    selectedBrand,
                    selectedModel,
                    whenModelSelected,
                    whenModelUnselected,
                    whenModelCategorySelected,
                    whenModelCategoryUnselected,
                    loadedModel
                },
                {
                    translator,
                    catalogClient
                }
            );
        },
        onCreated: (script) => script.initialize()
    },
    template: template
});

export default function ModelSelector({ selectedBrand, selectedModel, whenModelSelected, whenModelUnselected, whenModelCategorySelected, whenModelCategoryUnselected, loadedModel }, { translator, catalogClient }) {
    let modelFilter = ConfigurationFilter("Model", [], whenModelFilterChanged, selectedModel);
    let categoriesSelector = CategoriesSelector(onFinishFiltering, onResetAnyCategoryFilter);
    let loading = ko.observable(false);
    let catalog;

    selectedBrand.subscribe(() => {
        getModels();
    });

    loadedModel.subscribe(selectModel);

    function selectModel(modelToSelect) {
        let model = catalog.getModel(modelToSelect.id);
        categoriesSelector.selectCategoriesForModel(model);
        modelFilter.select(model);
    }

    function initialize() {
        getModels();
    }

    function getModels() {
        if (!selectedBrand()) return;
        loading(true);
        catalogClient.getModels(selectedBrand().id, whenModelsReceived, onModelsError);
    }

    function whenModelsReceived(models) {
        loading(false);
        if (_(models).isEmpty()) return;
        let catalogModels = _.cloneDeep(models);
        catalog = ModelsCatalog(catalogModels);
        modelFilter.resetOptions();
        categoriesSelector.initializeCategories(catalog);
    }

    function onModelsError() {
        loading(false);
        categoriesSelector.filtersAlreadyNotCreated(false);
    }

    function whenModelFilterChanged(name, selectedValue) {
        if (!_.isUndefined(selectedValue)) {
            whenModelSelected(selectedValue);
        } else {
            whenModelUnselected();
        }
    }

    function onFinishFiltering(selectedValueId, filteredOptions) {
        modelFilter.setNewOptions(filteredOptions);
        whenModelCategorySelected(selectedValueId, modelFilter);
    }

    function onResetAnyCategoryFilter() {
        modelFilter.resetOptions();
        whenModelCategoryUnselected();
    }

    function getLabels() {
        return {
            modelGroupLabel: translator.translate('SharedDomain.Vehicle.ModelGroup'),
            modelLabel: translator.translate('SharedDomain.Vehicle.Model'),
            placeholder: translator.translate('SharedDomain.SelectValue')
        };
    }

    function getModelDescription(model) {
        const description = model.key.code + ' - ' + model.description;
        if(model.isAVersion) return description + ' (B)';
        return description;
    }

    return {
        initialize,
        getModels,
        labels: getLabels(),
        categories: categoriesSelector.filters,
        models: modelFilter.options,
        modelEnabled: modelFilter.enabled,
        modelSelected: modelFilter.selected,
        onModelSelected: modelFilter.whenFilterSelected,
        whenModelSelected,
        loadingModels: loading,
        modelDescription: getModelDescription
    };
}