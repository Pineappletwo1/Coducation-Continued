export default function ModelsCatalog(catalogModels) {

    addHierarchicalIdsToModels();

    function addHierarchicalIdsToModels() {
        return _.map(catalogModels, addHierarchicalIdsToOneModel);
    }

    function addHierarchicalIdsToOneModel(model) {
        let parentId = "";
        _.forOwn(model.categories, function(category) {
            category.HierarchicalId = parentId + "_" + category.id;
            parentId = category.HierarchicalId;
        });
    }

    function getNamesOfCategories() {
        return _.keys(catalogModels[0].categories);
    }

    function valuesForCategory(category, parentFilter) {
        let selectedModels;

        if (_.isUndefined(parentFilter)) {
            selectedModels = catalogModels;
        } else {
            selectedModels = _(catalogModels).select(function(model) {
                let modelHierarchicalId = model.categories[category].HierarchicalId;
                return _(modelHierarchicalId).startsWith(parentFilter.HierarchicalId);
            }).value();
        }

        return _(selectedModels).map(function(model) {
            return model.categories[category];
        }).unique("id").value();
    }

    function getModels(category, filter) {
        return _(catalogModels).select(function(model) {
            return model.categories[category].HierarchicalId == filter.HierarchicalId;
        }).value();
    }

    function getModel(modelId){
        return _.find(catalogModels, (x) => x.key.id == modelId);        
    }

    return {
        getNamesOfCategories: getNamesOfCategories,
        valuesForCategory: valuesForCategory,
        getModels,
        getModel
    };
}