import template from './combination-selector-template';

aidaCore.ComponentRegister('combination-selector', {
    script: {
        create: (props, dependencyProvider) => {
            const params = {
                visible: props.visible,
                isSelectionMandatory: props.isSelectionMandatory || false,
                options: props.options,
                translator: dependencyProvider.getTranslator(),
                whenSelected: props.whenSelected || (() => { })
            };
            return new CombinationSelectorScript(params);
        }
    },
    template: template
});

export default function CombinationSelectorScript({ visible, isSelectionMandatory, options, translator, whenSelected }) {
    let currentCombinationSelected;
    let choices = ko.observableArray([]);
    let headerTemplate = ko.observable(getHeader());

    visible.subscribe(() => {
        if (visible()) {
            initialize();
        } else {
            whenSelected(currentCombinationSelected);
        }
    });

    function whenCombinationSelected(combination) {
        currentCombinationSelected = combination;
        visible(false);
    }

    function initialize() {
        headerTemplate(getHeader());
        currentCombinationSelected = undefined;
        choices.removeAll();
        _.each(options(), (option) => option.whenSelected(whenCombinationSelected));
        ko.utils.arrayPushAll(choices, options());
    }

    function getHeader() {
        return ko.unwrap(isSelectionMandatory) ? 'header_without_close' : 'header_with_close';
    }

    function getLabels() {
        return {
            label: translator.translate("Configurator.CombinationSelector.Header")
        };
    }

    return {
        visible,
        headerTemplate,
        choices,
        initialize,
        labels: getLabels()
    };
}