import EquipmentsSelectorScript from "../../src/domain/equipments-selector/equipments-selector";
import SelectableItem from "../../src/domain/configurator/scripts/selectableItem";
import CatalogHelper from './catalogHelper';

const translator = aidaCore.TranslationService({});
const navigationPack = SelectableItem(CatalogHelper.navigationPack, false);
const safetyPackage = SelectableItem(CatalogHelper.safetyPackage, true);
const equipmentWhitoutCategory = SelectableItem(CatalogHelper.equipmentWhitoutCategory, true);

describe("equipments selector should", () => {
    it("organize equipments by categories", function () {
        const selector = GivenAnEquipmentSelectorWith([navigationPack, safetyPackage]);

        const categories = selector.categories();

        expect(categories.length).toBe(2);
        expect(categories[0].name).toBe("Comm");
        expect(categories[1].name).toBe("Paquete");
        expect(categories[0].equipments.length).toBe(1);
        expect(categories[1].equipments.length).toBe(1);
    });

    it("use family as category when it is empty", () => {
        const selector = GivenAnEquipmentSelectorWith([equipmentWhitoutCategory]);
    
        const categories = selector.categories();

        expect(categories.length).toBe(1);
        expect(categories[0].name).toBe(equipmentWhitoutCategory.family);
    });

    it("invoke callback when selecting an equipment", function () {
        let selectedEquipment = {};
        const whenEquipmentSelected = (equipment) => {
            selectedEquipment = equipment;
        };
        const selector = GivenAnEquipmentSelectorWith([navigationPack, safetyPackage], whenEquipmentSelected);
        GivenFirstEquipmentIsNotSelected(selector);

        WhenSelectFirstEquipment(selector);

        expect(selectedEquipment).toEqual(selector.categories()[1].equipments[0]);
    });

    it("invoke callback when unselecting an equipment", function () {
        let unselectedEquipment = {};
        const whenEquipmentUnselected = (equipment) => {
            unselectedEquipment = equipment;
        };
        const selector = GivenAnEquipmentSelectorWith([navigationPack, safetyPackage], {}, whenEquipmentUnselected);
        GivenFirstEquipmentIsSelected(selector);

        selector.categories()[1].equipments[0].selectOrUnselect();

        expect(unselectedEquipment).toEqual(selector.categories()[1].equipments[0]);
    });

    it("search by code", function () {
        const selector = GivenAnEquipmentSelectorWith([navigationPack, safetyPackage]);

        WhenSearchBy(selector, CatalogHelper.navigationPack.code);

        expect(selector.searchResults().length).toEqual(1);
        expect(selector.searchResults()[0].code).toEqual(CatalogHelper.navigationPack.code);
    });


    it("search by description", function () {
        const selector = GivenAnEquipmentSelectorWith([navigationPack, safetyPackage]);

        WhenSearchBy(selector, CatalogHelper.navigationPack.description);

        expect(selector.searchResults().length).toEqual(1);
        expect(selector.searchResults()[0].code).toEqual(CatalogHelper.navigationPack.code);
    });

    function WhenSearchBy(selector, text){
        selector.textToSearch(text);
        selector.search();
    }
    
    function WhenSelectFirstEquipment(selector) {
        selector.categories()[1].equipments[0].selectOrUnselect();
    }

    function GivenFirstEquipmentIsNotSelected(selector) {
        selector.categories()[1].equipments[0].isSelected(false);
    }

    function GivenFirstEquipmentIsSelected(selector) {
        selector.categories()[1].equipments[0].isSelected(true);
    }

    function GivenAnEquipmentSelectorWith(givenEquipments, onSelected, onUnselected) {
        const equipments = ko.observableArray([]);
        const loadedEquipment = ko.observable();
        const selector = EquipmentsSelectorScript({ equipments, loadingFlag: false, translator, whenEquipmentSelected: onSelected, whenEquipmentUnselected: onUnselected, loadedEquipment });
        ko.utils.arrayPushAll(equipments, givenEquipments);
        return selector;
    }
});