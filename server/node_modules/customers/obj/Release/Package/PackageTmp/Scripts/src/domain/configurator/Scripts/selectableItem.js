export default function SelectableItem(catalogItem, isTypePackage) {
    let selected = ko.observable(catalogItem.esmEquipment);
    let forcedItems = ko.observableArray();

    function contains(text) {
        if (!text) return false;
        return catalogItem.description.toUpperCase().indexOf(text.toUpperCase()) != -1 ||
            catalogItem.code.toUpperCase().indexOf(text.toUpperCase()) != -1;
    }

    function isInCatalog() {
        return catalogItem.description != '';
    }

    function setCombination(combination) {
        forcedItems.removeAll();
        ko.utils.arrayPushAll(forcedItems, combination.items);
    }

    function toJson() {
        return {
            code: catalogItem.code,
            description: catalogItem.description,
            combination: combinationsToJson(),
            isPackage: isPackage
        };
    }

    function combinationsToJson() {
        return _.map(forcedItems(), function(x) {
            return { code: x.code, type: x.type };
        });
    }

    function containsForcedItem(code) {
        return _.any(forcedItems(), (x) => x.code == code);
    }

    function isPackage() {
        return isTypePackage;
    }

    let self = {
        category: catalogItem.category,
        family: catalogItem.family,
        description: catalogItem.code + " - " + catalogItem.description,
        descriptionWithoutCode: catalogItem.description,
        selected,
        contains,
        containsForcedItem,
        code: catalogItem.code,
        type: catalogItem.type,
        isInCatalog,
        hasForcedCombinations: catalogItem.hasForcedCombinations,
        compulsoryCombinations: catalogItem.compulsoryCombinations,
        toJson,
        setCombination,
        isPackage
    };
    return self;
}
