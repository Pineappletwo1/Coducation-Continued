import template from './equipments-selector-template';
import SelectableEquipment from './selectableEquipment';

aidaCore.ComponentRegister('equipments-selector', {
    script: (props, dependencyProvider) => {
        const translator = dependencyProvider.getTranslator();
        const equipments = props.equipments;
        const whenEquipmentSelected = props.whenEquipmentSelected;
        const whenEquipmentUnselected = props.whenEquipmentUnselected;
        const loadingFlag = props.loadingFlag;
        return EquipmentsSelectorScript({ equipments, loadingFlag, translator, whenEquipmentSelected, whenEquipmentUnselected });
    },
    template: template
});

export default function EquipmentsSelectorScript({ equipments, loadingFlag, translator, whenEquipmentSelected, whenEquipmentUnselected }) {
    let categories = ko.observableArray();
    let searcher = EquipmentsSearch();
    let allEquipments = [];

    equipments.subscribe(() => {
        setEquipments(equipments());
    });

    function setEquipments(equipments) {
        let allSelectableItems = ko.utils.unwrapObservable(equipments);
        let allSelectableEquipments = _.map(allSelectableItems, (item) => SelectableEquipment(item, whenEquipmentSelected, whenEquipmentUnselected));
        clean(allSelectableEquipments);
        groupEquipmentsByCategory(allSelectableEquipments);
        initSearch();
    }

    function clean(selectableEquipments) {
        allEquipments = selectableEquipments;
        categories.removeAll();
    }

    function groupEquipmentsByCategory(equipments) {
        const categorizedEquipments = categorizeEquipments(equipments);
        let equipmentsGroupedByCategory = _.groupBy(categorizedEquipments, "category");
        _.each(equipmentsGroupedByCategory, function (equipments, category) {
            categories.push(EquipmentCategory(equipments, category));
        });
    }

    function categorizeEquipments(equipments) {
        const categorizedEquipments = _.cloneDeep(equipments);
        _.forEach(categorizedEquipments, e => {
            if (!e.category) {
                e.category = e.family;
            }
        });
        return categorizedEquipments;
    }

    function initSearch() {
        searcher.setEquipments(allEquipments);
    }

    function unselectAllEquipments() {
        _.each(allEquipments, (x) => x.unselect());
    }

    function getLabels() {
        return {
            title: translator.translate("SharedDomain.Equipments"),
            allEquipments: translator.translate("SharedDomain.AllItems"),
            searchEquipments: translator.translate("SharedDomain.SearchButton.Text"),
            notAvailableDescription: translator.translate("Configurator.NotAvailableDescription")
        };
    }

    return {
        labels: getLabels(),
        categories,
        loadingFlag,
        textToSearch: searcher.textToSearch,
        searchResults: searcher.results,
        search: searcher.search,
        unselectAllEquipments: unselectAllEquipments
    };
}

function EquipmentCategory(equipments, name) {
    return {
        name,
        id: _.uniqueId('category_'),
        equipments
    };
}

function EquipmentsSearch() {
    let textToSearch = ko.observable('');
    let results = ko.observableArray([]);
    let elements = [];

    function setEquipments(equipments) {
        results.removeAll();
        elements.length = 0;
        _.each(equipments, function (equipment) {
            elements.push(equipment);
        });
        search();
    }

    function search() {
        results.removeAll();
        let filteredResults = _.filter(elements, function (element) {
            return element.contains(textToSearch());
        });
        ko.utils.arrayPushAll(results, filteredResults);
    }

    return {
        results,
        textToSearch,
        search,
        setEquipments
    };
}