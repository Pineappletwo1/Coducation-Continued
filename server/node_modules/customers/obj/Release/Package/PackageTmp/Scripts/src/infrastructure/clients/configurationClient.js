export default function ConfigurationClient(restClient, errorPublisher, errorTitles) {
    const ChangeColor = "ChangeColor";
    const ChangeInterior = "ChangeInterior";
    const ChangeEquipments = "ChangeEquipments";
    const NewConfiguration = "NewConfiguration";
    
    function actionType(action){        
        return {
            IsChangeColor: () => (action == ChangeColor), 
            IsChangeInterior: () => (action == ChangeInterior),
            IsChangeEquipments: () => (action == ChangeEquipments),
            IsNewConfiguration: () => (action == NewConfiguration)
        };
    }

    return {
        createConfiguration(brandId, model, callback, errorCallback) {
            let url = `/brands/${brandId}/models/${model.code}`;
            
            restClient.post(url, {},{},
                (result) => callback(result, actionType(NewConfiguration)),
                (xhr, error, errorType) => errorPublisher.publish(errorType, errorTitles.CannotCreateConfiguration, xhr, errorCallback)
            );	
        },
        createConfigurationWithCombination(brandId, combination, callback, errorCallback) {
            let combinationChoiceParam = _.pluck(combination.items, "code").join('_');
            let url = `/brands/${brandId}/models/${combination.root.code}?combinationChoice=${combinationChoiceParam}`;
            
            restClient.post(url, {},{},
                (result) => callback(result, actionType(NewConfiguration)),
                (xhr, error, errorType) => errorPublisher.publish(errorType, errorTitles.CannotCreateConfiguration, xhr, errorCallback)
            );		
        },        
        addPackage(modelConfiguration, combination, callback) {
            let combinationChoiceParam = _.pluck(combination.items, "code").join('_');
            let url = `configuration/package/${combination.root.code}?combinationChoice=${combinationChoiceParam}`;
            
            restClient.put(url, {configuration: JSON.stringify(modelConfiguration.toJson())}, {},
                (result) => callback(result, actionType(ChangeEquipments)),
                (xhr, error, errorType) => errorPublisher.publish(errorType, errorTitles.CannotSelectCombination, xhr)
            );		
        },
        addPackageWithoutCombination(modelConfiguration, equipmentCode, callback) {
            let url =  `configuration/package/${equipmentCode}`;
            
            restClient.put(url, {configuration: JSON.stringify(modelConfiguration.toJson())}, {}, 
                (result) => callback(result, actionType(ChangeEquipments)),
                (xhr, error, errorType) => errorPublisher.publish(errorType, errorTitles.CannotSelectEquipment, xhr)
            );		
        },
        removePackage(modelConfiguration, equipmentCode, callback) {
            let url =  `configuration/package/${equipmentCode}`;
            
            restClient.remove(url, {configuration: JSON.stringify(modelConfiguration.toJson())}, 
                (result) => callback(result, actionType(ChangeEquipments)),
                (xhr, error, errorType) => errorPublisher.publish(errorType, errorTitles.CannotUnselect, xhr)
            );
        },
        addEquipment(modelConfiguration, combination, callback) {
            let combinationChoiceParam = _.pluck(combination.items, "code").join('_');
            let url =  `configuration/equipment/${combination.root.code}?combinationChoice=${combinationChoiceParam}`;
            
            restClient.put(url, {configuration: JSON.stringify(modelConfiguration.toJson())}, {},
                (result) => callback(result, actionType(ChangeEquipments)),
                (xhr, error, errorType) => errorPublisher.publish(errorType, errorTitles.CannotSelectCombination, xhr)
            );		
        },
        addEquipmentWithoutCombination(modelConfiguration, equipmentCode, callback) {
            let url =  `configuration/equipment/${equipmentCode}`;
            
            restClient.put(url, {configuration: JSON.stringify(modelConfiguration.toJson())}, {},
                (result) => callback(result, actionType(ChangeEquipments)),
                (xhr, error, errorType) => errorPublisher.publish(errorType, errorTitles.CannotSelectEquipment, xhr)
            );		
        },
        removeEquipment(modelConfiguration, equipmentCode, callback) {
            let url =  `configuration/equipment/${equipmentCode}`;
            
            restClient.remove(url, {configuration: JSON.stringify(modelConfiguration.toJson())}, 
                (result) => callback(result, actionType(ChangeEquipments)),
                (xhr, error, errorType) => errorPublisher.publish(errorType, errorTitles.CannotUnselect, xhr)
            );
        },
        changeColor(modelConfiguration, combination, callback, errorCallback) {
            let combinationChoiceParam = _.pluck(combination.items, "code").join('_');
            let url = `configuration/color/${combination.root.code}?combinationChoice=${combinationChoiceParam}`;
            
            restClient.put(url, {configuration: JSON.stringify(modelConfiguration.toJson())}, {},
                (result) => callback(result, actionType(ChangeColor)),
                (xhr, error, errorType) => errorPublisher.publish(errorType, errorTitles.CannotChangeColor, xhr, errorCallback)
            );
        },
        removeColor(modelConfiguration, callback) {
            let url = `configuration/color/`;
            
            restClient.remove(url, {configuration: JSON.stringify(modelConfiguration.toJson())}, 
                (result) => callback(result, actionType(ChangeColor)),
                (xhr, error, errorType) => errorPublisher.publish(errorType, errorTitles.CannotChangeColor, xhr)
            );
        },
        changeColorWithoutCombination(modelConfiguration, colorCode, callback, errorCallback) {
            let url = `configuration/color/${colorCode}`;
            
            restClient.put(url, {configuration: JSON.stringify(modelConfiguration.toJson())}, {},
                (result) => callback(result, actionType(ChangeColor)),
                (xhr, error, errorType) => errorPublisher.publish(errorType, errorTitles.CannotChangeColor, xhr, errorCallback)
            );
        },
        changeInterior(modelConfiguration, combination, callback) {
            let combinationChoiceParam = _.pluck(combination.items, "code").join('_');
            let url = `configuration/interior/${combination.root.code}?combinationChoice=${combinationChoiceParam}`;
            
            restClient.put(url, {configuration: JSON.stringify(modelConfiguration.toJson())}, {},
                (result) => callback(result, actionType(ChangeInterior)),
                (xhr, error, errorType) => errorPublisher.publish(errorType, errorTitles.CannotChangeInterior, xhr)
            );
        },
        removeInterior(modelConfiguration, callback) {
            let url = `configuration/interior/`;
            
            restClient.remove(url, {configuration: JSON.stringify(modelConfiguration.toJson())}, 
                (result) => callback(result, actionType(ChangeInterior)),
                (xhr, error, errorType) => errorPublisher.publish(errorType, errorTitles.CannotChangeInterior, xhr)
            );
        },
        changeInteriorWithoutCombination(modelConfiguration, interiorCode, callback, errorCallback) {
            let url = `configuration/interior/${interiorCode}`;
            
            restClient.put(url, {configuration: JSON.stringify(modelConfiguration.toJson())}, {},
                (result) => callback(result, actionType(ChangeInterior)),
                (xhr, error, errorType) => errorPublisher.publish(errorType, errorTitles.CannotChangeInterior, xhr, errorCallback)
            );
        }
    };
}