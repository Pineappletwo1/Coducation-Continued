import ConfiguratorBuilder from './configuratorBuilder';
import CatalogHelper from './catalogHelper';


describe('configurator should', () => {
    let configurator;
    let currentConfiguration;
    let config;

    beforeEach(() => {
        config = ko.observable(createConfiguration({
            color: CatalogHelper.red,
            interior: CatalogHelper.sky,
            equipments: [CatalogHelper.airConditioner] 
        }));
        const whenConfigurationChanged = (configuration) => { currentConfiguration = configuration; };
        configurator = ConfiguratorBuilder()
            .withLoadedConfiguration(config)
            .withConfigurationChangedCallback(whenConfigurationChanged)
            .build();

    });

    it('load model when load a configuration', () => {
        const config = ko.observable(createConfiguration({ modelId: '22' }));
        const configurator = ConfiguratorBuilder()
            .withLoadedConfiguration(config)
            .build();

        const newConfig = createConfiguration({ modelId: '11' });
        config(newConfig);

        expect(configurator.loadedModel()).toBe(newConfig.modelKey);
    });


    it('load color when load a configuration', () => {
        const newConfig = createConfiguration({ color: CatalogHelper.blue });
        config(newConfig);
        const modelSelected = {
            key: { code: 'modelCode', id: 'modelId' },
            description: 'modelDescription'
        };
        configurator.whenModelSelected(modelSelected);

        expect(configurator.selectedColor().code).toBe(newConfig.color.code);
        expect(currentConfiguration.color.code).toBe(newConfig.color.code);
    });

    it('load interior when load a configuration', () => {
        const newConfig = createConfiguration({ interior: CatalogHelper.leather });
        config(newConfig);
        const modelSelected = {
            key: { code: 'modelCode', id: 'modelId' },
            description: 'modelDescription'
        };
        configurator.whenModelSelected(modelSelected);

        expect(configurator.selectedInterior().code).toBe(newConfig.interior.code);
        expect(currentConfiguration.interior.code).toBe(newConfig.interior.code);
    });

    it('load equipment when load a configuration', () => {
        const newConfig = createConfiguration({ equipments: [CatalogHelper.radio] });
        config(newConfig);
        const modelSelected = {
            key: { code: 'modelCode', id: 'modelId' },
            description: 'modelDescription'
        };
        configurator.whenModelSelected(modelSelected);

        expect(configurator.selectedEquipment()).toBeArrayOfSize(1);
        expect(configurator.selectedEquipment()[0].code).toBe(newConfig.equipments[0].code);
        expect(currentConfiguration.equipments).toBeArrayOfSize(1);
        expect(currentConfiguration.equipments[0].code).toBe(newConfig.equipments[0].code);
    });

    function createConfiguration({ modelId = '89', color = CatalogHelper.red, interior = CatalogHelper.sky, equipments = [] }) {
        const model = { modelKey: { id: modelId } };
        return { model: model, color: color, interior: interior, equipments: equipments, packages: [] };
    }
});