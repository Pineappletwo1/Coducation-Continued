export default function ConfigurationFilter(name, initialOptions, whenFilterChange, selectedModel) {

    let selected = selectedModel || ko.observable();
    let options = ko.observableArray(initialOptions);
    const enabled = ko.computed(function () {
        return options().length != 0;
    });

    function whenFilterSelected(selectedValue) {
        const description = _.isObject(selectedValue) ? selectedValue.description  : null;
        selectValue(description);
        whenFilterChange(name, selected());
    }

    function selectValue(value) {
        let selectedOption = _.find(options(), function (option) {
            return option.description == value;
        });
        selected(selectedOption);
    }

    function select(value) {
        const selectedOption = _.find(options(), function (option) {
            return _.isEqual(option, value);
        });
        selected(selectedOption);
        whenFilterSelected(selected());
    }

    function setNewOptions(newOptions) {
        options.removeAll();
        ko.utils.arrayPushAll(options, newOptions);
        selected(undefined);
        whenFilterSelected(selected());
    }

    function resetOptions() {
        setNewOptions([]);
        select(undefined);
    }

    return {
        name,
        options,
        selected,
        enabled,
        setNewOptions,
        resetOptions,
        whenFilterSelected,
        select
    };
}