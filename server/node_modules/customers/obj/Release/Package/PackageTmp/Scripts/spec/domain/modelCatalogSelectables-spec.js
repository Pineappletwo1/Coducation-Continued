import ModelCatalogSelectables from "../../src/domain/configurator/scripts/modelCatalogSelectables";

describe("model catalog selectable should", () => {

    let modelCode = "anyModel";
    let modelDescription = "anyDescription";

    let blanco = { code: "0R0R" };
    let negro = { code: "2T2T" };

    let antracita = { code: "JI" };
    let negroBeige = { code: "JS" };

    let digitalSound = { code: "9VH", description: "sonido digital" };
    let sportSeats = { code: "PB4", description: "Asientos deportivos" };

    let modelCatalogJson = {
        colors: [blanco, negro],
        interiors: [antracita, negroBeige],
        relationship: [{
            colorCode: blanco.code,
            interiorCode: antracita.code
        }, {
            colorCode: blanco.code,
            interiorCode: negroBeige.code
        }],
        modelCompulsoryCombinationChoices: [
            [{ code: "PR2" }]
        ],
        equipments: [digitalSound],
        packages: [sportSeats]
    };

    let modelCatalog = ModelCatalogSelectables(modelCode, modelDescription, modelCatalogJson);

    it("return the model itself as selectable item", () => {
        let modelSelectable = modelCatalog.getModel();

        expect(modelSelectable.code).toBe(modelCode);
        expect(modelSelectable.hasForcedCombinations).toBe(true);
        expect(modelSelectable.compulsoryCombinations).toBe(modelCatalogJson.modelCompulsoryCombinationChoices);
    });

    it("return the model selectable item when finding by code", () => {
        let modelSelectable = modelCatalog.findItem(modelCode);

        expect(modelSelectable.code).toBe(modelCode);
        expect(modelSelectable.hasForcedCombinations).toBe(true);
        expect(modelSelectable.compulsoryCombinations).toBe(modelCatalogJson.modelCompulsoryCombinationChoices);
    });

    it("filter the compatible colors for a given interior", () => {
        let colorsCompatible = modelCatalog.compatibleColorsWith(antracita.code);

        expect(colorsCompatible.length).toBe(1);
        expect(colorsCompatible[0].code).toBe(blanco.code);
    });

    it("filter the compatible interiors for a given color", () => {
        let interiorsCompatible = modelCatalog.compatibleInteriorsWith(blanco.code);

        expect(interiorsCompatible.length).toBe(2);
        expect(interiorsCompatible[0].code).toBe(antracita.code);
        expect(interiorsCompatible[1].code).toBe(negroBeige.code);
    });

    it("get equipments as selectable equipments", () => {
        expect(modelCatalog.equipments.length).toBe(1);
        expect(modelCatalog.equipments[0].code).toBe(digitalSound.code);
        expect(modelCatalog.equipments[0].isPackage()).toBe(false);
    });

    it("get packages as selectable packages", () => {
        expect(modelCatalog.packages.length).toBe(1);
        expect(modelCatalog.packages[0].code).toBe(sportSeats.code);
        expect(modelCatalog.packages[0].isPackage()).toBe(true);
    });

    it("find equipment by code", () => {
        expect(modelCatalog.findItem(digitalSound.code).description).toBe(digitalSound.code + ' - ' + digitalSound.description);
    });

    it("find package by code", () => {
        expect(modelCatalog.findItem(sportSeats.code).description).toBe(sportSeats.code + ' - ' + sportSeats.description);
    });
    
});