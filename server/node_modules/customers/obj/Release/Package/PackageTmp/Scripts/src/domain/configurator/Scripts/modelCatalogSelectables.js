import SelectableItem from "./selectableItem";

export default function ModelCatalogSelectables(modelCode, modelDescription, catalogJson) {

    let colors = createSelectableColorsFrom(catalogJson);
    let interiors = createSelectableInteriorsFrom(catalogJson);
    let equipments = createSelectableEquipmentsFrom(catalogJson);
    let packages = createSelectablePackagesFrom(catalogJson);
    let model = SelectableItem({
        code: modelCode,
        description: modelDescription,
        hasForcedCombinations: catalogJson.modelCompulsoryCombinationChoices && catalogJson.modelCompulsoryCombinationChoices.length > 0,
        compulsoryCombinations: catalogJson.modelCompulsoryCombinationChoices
    });

    let allItems = _(model).concat(interiors, colors, equipments, packages).value();

    function addRelationship(colorCode, interiorCode) {
        if (_.find(catalogJson.relationship, x=> x.colorCode == colorCode && x.interiorCode == interiorCode)) return;
        catalogJson.relationship.push({colorCode,interiorCode});
    }

    function addColor(colorToAdd) {
        const color = SelectableItem({
            code: colorToAdd.code,
            description: colorToAdd.description}
        );
        colors.push(color);
        allItems.push(color);
    }

    function addInterior(interiorToAdd) {
        const interior = SelectableItem({
            code: interiorToAdd.code,
            description: interiorToAdd.description}
        );
        interiors.push(interior);
        allItems.push(interior);
    }

    function clean() {
        equipments.length = 0;
        interiors.length = 0;
        colors.length = 0;
        packages.length = 0;
        allItems.length = 0;
    }

    function getModel() {
        return model;
    }

    function createSelectablePackagesFrom(catalogJson) {
        return _.map(catalogJson.packages, (x) => SelectableItem(x, true));
    }

    function createSelectableEquipmentsFrom(catalogJson) {
        return _.map(catalogJson.equipments, (x) => SelectableItem(x, false));
    }

    function createSelectableInteriorsFrom(catalogJson) {
        return _.map(catalogJson.interiors, (x) => SelectableItem(x));
    }

    function createSelectableColorsFrom(catalogJson) {
        return _.map(catalogJson.colors, (x) => SelectableItem(x));
    }

    function findItems(codes) {
        return _.map(codes, (code) => findItem(code));
    }

    function findItem(code) {
        let item = _.find(allItems, (x) => x.code == code);
        if (_.isUndefined(item)) {
            return createEmptySelectableItem(code);
        }
        return item;
    }

    function createEmptySelectableItem(code) {
        return SelectableItem({ esmEquipment: false, code: code, description: '' });
    }

    function unselectAll() {
        _.each(allItems, (x) => x.selected(false));
    }

    function compatibleColorsWith(interiorCode) {
        let interiorRelationships = _.filter(catalogJson.relationship, (x) => x.interiorCode == interiorCode);
        return _.map(interiorRelationships, (x) => findColor(x.colorCode));
    }

    function findColor(colorCode) {
        return _.find(colors, (x) => x.code == colorCode);
    }

    function compatibleInteriorsWith(colorCode) {
        let colorRelationships = _.filter(catalogJson.relationship, (x) => x.colorCode == colorCode);
        return _.map(colorRelationships, (x) => findInterior(x.interiorCode));
    }

    function findInterior(interiorCode) {
        return _.find(interiors, (x) => x.code == interiorCode);
    }

    return {
        equipments,
        packages,
        colors,
        interiors,
        findItem,
        findItems,
        unselectAll,
        compatibleColorsWith,
        compatibleInteriorsWith,
        getModel,
        clean,
        addColor,
        addInterior,
        addRelationship
    };
}