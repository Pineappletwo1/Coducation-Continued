import CombinationsBuilder from './combinationsBuilder';

export default function CombinationSelectorBindings(dialogPublisher, translator){
    
    const combinationsBuilder = CombinationsBuilder(dialogPublisher, translator);
    const combinationOptions = ko.observable();
    const isCombinationMandatory = ko.observable(false);
    let whenCombinationSelectedCallback = () => { };
    const combinationSelectorVisible = ko.observable(false);

    function updateToShowAsMandatory(itemCode, combinations, selectableCatalog, callback) {
        let isMandatory = true;
        update(itemCode, combinations, selectableCatalog, isMandatory, callback);
    }

    function updateToShow(itemCode, combinations, selectableCatalog, callback) {
        let isMandatory = false;
        update(itemCode, combinations, selectableCatalog, isMandatory, callback);
    }

    function update(itemCode, combinations, selectableCatalog, isMandatory, callback) {
        let combinationsForThisItem = combinationsBuilder.buildFor(itemCode, combinations, selectableCatalog);
        combinationOptions(combinationsForThisItem);
        isCombinationMandatory(isMandatory);
        whenCombinationSelectedCallback = callback;
        combinationSelectorVisible(true);
    }

    return {
        updateToShow,
        updateToShowAsMandatory,
        combinationSelectorVisible,
        isCombinationMandatory,
        combinationOptions,
        whenSelected: (selected) => whenCombinationSelectedCallback(selected)
    };
}