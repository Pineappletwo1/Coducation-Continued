using System;
using System.Collections.Generic;
using System.Net.Http;
using Configurator.Business.Universal.Catalog.Domain;
using Configurator.Business.Universal.Catalog.Services;
using Configurator.Business.Universal.Configurations.Domain;
using Infrastructure.Core.Web.Filters;

namespace Configurator.Web.Filters {
    public static class ExceptionToHttpResponseConverters {
        public static readonly Dictionary<Type, Func<Exception, HttpResponseMessage>> ConfiguratorConverters =
            new Dictionary<Type, Func<Exception, HttpResponseMessage>> {
                {
                    typeof (ExplicitExclusionException),
                    ex =>
                        HttpResponseMessageBuilder.BuildBadRequest("ExclusionConflict",
                            ((ExplicitExclusionException) ex).Conflicts)
                }, {
                    typeof (InvalidCompulsoryCombinationException),
                    ex => HttpResponseMessageBuilder.BuildBadRequest("ContainsItemNotAvailable")
                }, {
                    typeof (CurrentColorIsForcedException),
                    ex => HttpResponseMessageBuilder.BuildBadRequest("CurrentColorIsForced")
                }, {
                    typeof (FamilyExclusionException),
                    ex =>
                        HttpResponseMessageBuilder.BuildBadRequest("EquipmentsWithSameFamily",
                            ((FamilyExclusionException) ex).Conflicts)
                }, {
                    typeof (ColorAndInteriorRelationshipIsNoConfiguredException),
                    ex => HttpResponseMessageBuilder.BuildBadRequest("ColorAndInteriorRelationshipIsNoConfigured")
                }, {
                    typeof (CurrentInteriorIsForcedException),
                    ex => HttpResponseMessageBuilder.BuildBadRequest("CurrentInteriorIsForced")
                }, {
                    typeof (BelongsToVersionException),
                    ex => HttpResponseMessageBuilder.BuildBadRequest("BelongsToVersion")
                }, {
                    typeof (IsForcedByOtherItemException),
                    ex => HttpResponseMessageBuilder.BuildBadRequest("IsForcedByOtherItem", new {
                        forcedBy = ((IsForcedByOtherItemException) ex).ItemThatForcesIt
                    })
                }, {
                    typeof (HasMultipleCombinationChoicesException),
                    ex => HttpResponseMessageBuilder.BuildBadRequest("HasMultipleCombinationChoices")
                }, {
                    typeof (ItIsForcingAVersionItemException),
                    ex => HttpResponseMessageBuilder.BuildBadRequest("ItIsForcingAVersionItem")
                }, {
                    typeof (CannotReplaceForcedVersionItem),
                    ex => HttpResponseMessageBuilder.BuildBadRequest("CannotReplaceForcedVersionItem", new {
                        ((CannotReplaceForcedVersionItem) ex).ItemThatForcesIt,
                        ((CannotReplaceForcedVersionItem) ex).VersionItem
                    })
                }, {
                    typeof (UnavailableVersionEquipmentsException),
                    ex => HttpResponseMessageBuilder.BuildBadRequest("UnavailableVersionEquipments", new {
                        ((UnavailableVersionEquipmentsException) ex).Equipments
                    })
                }
            };

        public static readonly Dictionary<Type, Func<Exception, HttpResponseMessage>> CatalogConverters =
            new Dictionary<Type, Func<Exception, HttpResponseMessage>> {
                {
                    typeof (VehicleModelNotFoundException),
                    ex =>
                        HttpResponseMessageBuilder.BuildBadRequest("VehicleModelNotFound",
                            ((VehicleModelNotFoundException) ex).Id)
                },{
                    typeof (EquipmentNotFoundException),
                    ex =>
                        HttpResponseMessageBuilder.BuildBadRequest("EquipmentNotFound",
                            ((EquipmentNotFoundException) ex).Code)
                }
            };
    }
}