require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = CustomerDetailVm;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _CustomerSelector = require('./CustomerSelector');

var _CustomerSelector2 = _interopRequireDefault(_CustomerSelector);

function CustomerDetailVm(_ref) {
    var actionFactory = _ref.actionFactory;
    var newCustomerCallback = _ref.newCustomerCallback;
    var customerEditedCallback = _ref.customerEditedCallback;
    var translator = _ref.translator;
    var _ref$isMissing = _ref.isMissing;
    var isMissing = _ref$isMissing === undefined ? function () {
        return false;
    } : _ref$isMissing;
    var _ref$hideFormAfterSaving = _ref.hideFormAfterSaving;
    var hideFormAfterSaving = _ref$hideFormAfterSaving === undefined ? true : _ref$hideFormAfterSaving;

    var availableCountries = ko.observableArray([]);
    var isShown = ko.observable(false);
    var hideForm = hideFormAfterSaving;
    var isCompany = ko.observable(false);
    var name = ko.observable("").extend({
        required: {
            message: translator.translate('SharedDomain.Validation.Required.Message')
        }
    });
    var firstSurname = ko.observable("");
    var secondSurname = ko.observable("");
    var taxId = ko.observable("");
    var address = ko.observable("");
    var city = ko.observable("");
    var state = ko.observable("");
    var country = ko.observable("");
    var phoneNumber = ko.observable("");
    var email = ko.observable("").extend({
        email: {
            message: translator.translate('SharedDomain.Validation.Email.Message')
        }
    });
    var birthDate = ko.observable("");
    var canSaveCustomer = ko.computed(function () {
        return isValid();
    });
    var customerSelector = (0, _CustomerSelector2['default'])(whenCustomerSelected, callServerToCreateCustomer);
    var isEdition = ko.observable(false);
    var customerId = undefined;
    var showCancel = ko.observable(true);
    var id = ko.observable();
    var disabled = ko.observable(false);
    var gender = ko.observable();
    var postalCode = ko.observable();
    var company = ko.observable();
    var genderOptions = [{ description: translator.translate('SharedDomain.Gender.Male'), id: 'Male' }, { description: translator.translate('SharedDomain.Gender.Female'), id: 'Female' }];
    var onCustomerCreatedCallback = newCustomerCallback;
    var onCustomerEditedCallback = customerEditedCallback;

    function isValid() {
        return name.isValid() && email.isValid();
    }

    function show() {
        var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        var customerId = _ref2.customerId;
        var whenSuccess = _ref2.whenSuccess;
        var _ref2$showCancelButton = _ref2.showCancelButton;
        var showCancelButton = _ref2$showCancelButton === undefined ? true : _ref2$showCancelButton;

        showCancel(showCancelButton);
        if (customerId) {
            showEdition({ customerId: customerId, whenSuccess: whenSuccess });
        } else {
            showCreation({ whenSuccess: whenSuccess });
        }
    }

    function showEdition() {
        var _ref3 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        var customerId = _ref3.customerId;
        var whenSuccess = _ref3.whenSuccess;

        isEdition(true);
        onCustomerEditedCallback = whenSuccess || onCustomerEditedCallback;
        actionFactory.customer.getAllCountries(function (countries) {
            ko.utils.arrayPushAll(availableCountries, countries);
            actionFactory.customer.getCustomer(customerId, whenCustomerArrived);
        });
    }

    function showCreation() {
        var _ref4 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        var whenSuccess = _ref4.whenSuccess;

        isEdition(false);
        onCustomerCreatedCallback = whenSuccess || onCustomerCreatedCallback;
        actionFactory.customer.getAllCountries(function (countries) {
            ko.utils.arrayPushAll(availableCountries, countries);
            whenCustomerArrived({});
        });
    }

    function hide() {
        isEdition(false);
        isShown(false);
    }

    function saveCustomer() {
        isEdition() ? editCustomer() : createCustomer();
    }

    function createCustomer() {
        if (checkCustomerCoincidencesConditions()) {
            searchLikeName();
        } else callServerToCreateCustomer();
    }

    function callServerToCreateCustomer() {
        actionFactory.customer.createCustomer(toJson(), whenCustomerCreated);
    }

    function searchLikeName() {
        actionFactory.customer.searchCustomersDescriptions({ name: name(), firstSurname: firstSurname() }, whenCustomersLikeNameArrived);
    }

    function editCustomer() {
        actionFactory.customer.editCustomer(toJson(), whenCustomerEdited);
    }

    function searchByTaxId() {
        if (isEdition()) return;

        if (taxId()) {
            actionFactory.customer.searchCustomersDescriptions({ taxId: taxId() }, whenCustomerByTaxIdArrived);
        }
    }

    function checkCustomerCoincidencesConditions() {
        if (isEdition()) return false;
        if (customerSelector.visible()) return false;
        if (!isCompany() && (!name() || !firstSurname())) return false;
        if (isCompany() && !name()) return false;
        return true;
    }

    function whenCustomerSelected(selectedCustomer) {
        if (!selectedCustomer) return;
        hide();
        onCustomerCreatedCallback(toCustomerDescription(selectedCustomer));
    }

    function toCustomerDescription(customer) {
        var description = customer.id + ' - ' + customer.name;
        if (customer.firstSurname) {
            description += ' ' + customer.firstSurname;
        }
        if (customer.secondSurname) {
            description += '' + customer.secondSurname;
        }
        if (customer.taxId) {
            description += ' - ' + customer.taxId;
        }
        return {
            id: customer.id,
            description: description
        };
    }

    function whenCustomerCreated(newCustomer) {
        if (hideForm) hide();
        onCustomerCreatedCallback(newCustomer);
    }

    function whenCustomerEdited(editCustomer) {
        if (hideForm) hide();
        onCustomerEditedCallback(editCustomer);
    }

    function whenCustomerArrived(receivedCustomer) {
        isShown(true);
        loadCustomerProperties(receivedCustomer);
    }

    function whenCustomerByTaxIdArrived(customers) {
        if (customers.length == 0) return;
        customerSelector.showWithMandatorySelection(customers);
    }

    function whenCustomersLikeNameArrived(customers) {
        if (customers.length == 0) callServerToCreateCustomer();else customerSelector.show(customers);
    }

    function toJson() {
        return {
            isCompany: isCompany(),
            name: name(),
            firstSurname: firstSurname(),
            secondSurname: secondSurname(),
            taxId: taxId(),
            address: address(),
            city: city(),
            state: state(),
            country: country(),
            phoneNumber: phoneNumber(),
            email: email(),
            birthDate: birthDate(),
            id: customerId,
            disabled: disabled(),
            gender: gender(),
            postalCode: postalCode(),
            company: company()
        };
    }

    function loadCustomerProperties(receivedCustomer) {
        customerId = receivedCustomer.id;
        isCompany(receivedCustomer.isCompany);
        name(receivedCustomer.name);
        firstSurname(receivedCustomer.firstSurname);
        secondSurname(receivedCustomer.secondSurname);
        taxId(receivedCustomer.taxId);
        address(receivedCustomer.address);
        city(receivedCustomer.city);
        state(receivedCustomer.state);
        country(receivedCustomer.country);
        phoneNumber(receivedCustomer.phoneNumber);
        email(receivedCustomer.email);
        birthDate(receivedCustomer.birthDate);
        id(receivedCustomer.id);
        disabled(receivedCustomer.disabled);
        gender(receivedCustomer.gender || undefined);
        postalCode(receivedCustomer.postalCode);
        company(receivedCustomer.company);
    }

    function setIsCompany(isCompanyValue) {
        isCompany(isCompanyValue);
    }

    function isNameMissing() {
        return name() == "" || name() == undefined;
    }

    return {
        isShown: isShown,
        hide: hide,
        show: show,
        canSaveCustomer: canSaveCustomer,
        createCustomer: createCustomer,
        searchByTaxId: searchByTaxId,
        searchLikeName: searchLikeName,
        isCompany: isCompany,
        name: name,
        firstSurname: firstSurname,
        secondSurname: secondSurname,
        taxId: taxId,
        address: address,
        state: state,
        country: country,
        phoneNumber: phoneNumber,
        email: email,
        birthDate: birthDate,
        city: city,
        company: company,
        customerSelector: customerSelector,
        availableCountries: availableCountries,
        isEdition: isEdition,
        showCancel: showCancel,
        id: id,
        disabled: disabled,
        gender: gender,
        postalCode: postalCode,
        saveCustomer: saveCustomer,
        isMissing: isMissing,
        isNameMissing: isNameMissing,
        setIsCompany: setIsCompany,
        translator: translator,
        genderOptions: genderOptions,
        props: {
            isShown: isShown,
            hide: hide,
            show: show,
            canSaveCustomer: canSaveCustomer,
            createCustomer: createCustomer,
            searchByTaxId: searchByTaxId,
            searchLikeName: searchLikeName,
            isCompany: isCompany,
            name: name,
            firstSurname: firstSurname,
            secondSurname: secondSurname,
            taxId: taxId,
            address: address,
            state: state,
            country: country,
            phoneNumber: phoneNumber,
            email: email,
            birthDate: birthDate,
            city: city,
            company: company,
            customerSelector: customerSelector,
            availableCountries: availableCountries,
            isEdition: isEdition,
            showCancel: showCancel,
            id: id,
            disabled: disabled,
            gender: gender,
            postalCode: postalCode,
            saveCustomer: saveCustomer,
            isMissing: isMissing,
            isNameMissing: isNameMissing,
            setIsCompany: setIsCompany,
            translator: translator,
            genderOptions: genderOptions
        }
    };
}

module.exports = exports['default'];

},{"./CustomerSelector":2}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = CustomerSelector;
exports.SelectableCustomer = SelectableCustomer;

function CustomerSelector(whenItemSelected, noSelectionCallback) {
    var visible = ko.observable(false);
    var selectableCustomers = ko.observableArray();
    var mandatorySelection = ko.observable(false);

    function show(customers) {
        mandatorySelection(false);
        showModal(customers);
    }

    function showWithMandatorySelection(customers) {
        mandatorySelection(true);
        showModal(customers);
    }

    function showModal(customers) {
        visible(true);
        selectableCustomers().length = 0;
        ko.utils.arrayPushAll(selectableCustomers, _.map(customers, function (x) {
            return SelectableCustomer(x, select);
        }));
    }

    function select(selected) {
        visible(false);
        setTimeout(function () {
            return whenItemSelected(selected);
        }, 500);
    }

    function selectWithoutTimeout(selected) {
        visible(false);
        whenItemSelected(selected);
    }

    function close() {
        visible(false);
        setTimeout(function () {
            return noSelectionCallback();
        }, 500);
    }

    return { visible: visible, selectableCustomers: selectableCustomers, show: show, showWithMandatorySelection: showWithMandatorySelection, select: select, selectWithoutTimeout: selectWithoutTimeout, close: close, mandatorySelection: mandatorySelection };
}

function SelectableCustomer(customer, whenSelected) {

    function select() {
        whenSelected(customer);
    }

    return { select: select, customer: customer };
}

},{}],3:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<section-box params=\"{ title: translator.translate('SharedDomain.FormData'), isShown: isShown }\">\n    <section-body>\n        <customer-type-selector params=\"{\n            isCompany: props.isCompany,\n            translator: translator }\">\n        </customer-type-selector>\n        <customer-form params=\"{\n            id: props.id,\n            name: props.name,\n            firstSurname: props.firstSurname,\n            secondSurname: props.secondSurname,\n            birthDate: props.birthDate,\n            gender: props.gender,\n            taxId: props.taxId,\n            phoneNumber: props.phoneNumber,\n            email: props.email,\n            company: props.company,\n            address: props.address,\n            postalCode: props.postalCode,\n            city: props.city,\n            state: props.state,\n            country: props.country,\n\n            isEdition: props.isEdition,\n            availableCountries: props.availableCountries,\n            genderOptions: props.genderOptions,\n            isCompany: props.isCompany,\n            translator: translator,\n            isNameMissing: props.isNameMissing,\n            isMissing: props.isMissing }\">\n        </customer-form>\n    </section-body>     \n    <section-footer>\n        <button class=\"btn btn-primary\" data-bind=\"click: props.saveCustomer, enable: props.canSaveCustomer, text: translator.translate('SharedDomain.SaveButton.Text')\"></button>\n        <button class=\"btn btn-default\" data-bind=\"click: props.hide, visible: props.showCancel, text: translator.translate('SharedDomain.CancelButton.Text')\"></button>\n    </section-footer>\n    <!--<div data-backdrop=\"static\" data-keyboard=\"false\" data-bind=\"modal: {\n                    visible: props.customerSelector.visible,\n                    header: { name: 'header_without_close', data: { label: translator.translate('VehicleOrders.CustomerSelector.Header.Label') }},\n                    body: { name: 'customers_selector', data: props.customerSelector },\n                    footer: { name: 'simple_footer', data: { closeVisible: props.customerSelector.mandatorySelection, closeLabel: translator.translate('SharedDomain.Neither.Action') }}\n                }\">\n    </div>\n    <script type=\"text/html\" id=\"header_without_close\">\n        <h3 data-bind=\"text: label\"></h3>  \n    </script>\n    <script type=\"text/html\" id=\"customers_selector\">\n        <div data-bind=\"foreach: selectableCustomers\">\n            <div class=\"selectablebox\" data-bind=\"click: select\" style=\"margin: 5px\">\n                <span data-bind=\"text: customer.id + ' - '\"></span>\n                <span data-bind=\"text: customer.name\"></span>\n                <span data-bind=\"text: customer.firstSurname\"></span>\n                <span data-bind=\"text: customer.secondSurname\"></span>\n                <span> - </span>\n                <span data-bind=\"text: customer.taxId\"></span>\n            </div>\n        </div>\n    </script>-->\n    <script type=\"text/html\" id=\"simple_footer\">\n        <!-- ko if: !$data.closeVisible() -->\n        <a href=\"#\" class=\"btn btn-default\" data-bind=\"html: closeLabel\" data-dismiss=\"modal\"></a>\n        <!-- /ko -->\n    </script>\n    <!-- /ko -->\n</section-box>";
module.exports = exports["default"];

},{}],4:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _customerDetailSectionTemplate = require('./customer-detail-section-template');

var _customerDetailSectionTemplate2 = _interopRequireDefault(_customerDetailSectionTemplate);

var _CustomerDetailVm = require('./CustomerDetailVm');

var _CustomerDetailVm2 = _interopRequireDefault(_CustomerDetailVm);

aidaCore.ComponentRegister('customer-detail-section', {
    script: function script(props, dependencyProvider) {
        var scripts = (0, _CustomerDetailVm2['default'])({
            actionFactory: props.actionFactory,
            customerEditedCallback: props.customerEditedCallback,
            translator: dependencyProvider.getTranslator(),
            hideFormAfterSaving: false
        });

        scripts.show({ customerId: props.customerId(), showCancelButton: false });

        return scripts;
    },
    template: _customerDetailSectionTemplate2['default']
});

},{"./CustomerDetailVm":1,"./customer-detail-section-template":3}],"aida-customers":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.exportApi = exportApi;

function exportApi() {
    return {};
}

var aidaCustomers = require('aida-customers').exportApi();
window.aidaCustomers = aidaCustomers;

},{"aida-customers":"aida-customers"}]},{},[1,2,3,4,"aida-customers"]);
