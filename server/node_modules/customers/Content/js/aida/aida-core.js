require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

String.prototype.shortDateFormat = function () {
    return moment(undefined).format('L');
};

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var DialogPublisher = (function () {

    var onSuccessCallback = function onSuccessCallback() {};
    var onWarningCallback = function onWarningCallback() {};
    var onErrorCallback = function onErrorCallback() {};
    var confirmationCallback = function confirmationCallback() {};

    function success(_ref) {
        var message = _ref.message;
        var htmlTemplate = _ref.htmlTemplate;

        onSuccessCallback({ message: message, htmlTemplate: htmlTemplate });
    }

    function onSuccess(callback) {
        onSuccessCallback = callback;
    }

    function onWarning(callback) {
        onWarningCallback = callback;
    }

    function warning(_ref2) {
        var title = _ref2.title;
        var message = _ref2.message;
        var htmlTemplate = _ref2.htmlTemplate;

        onWarningCallback({ title: title, message: message, htmlTemplate: htmlTemplate });
    }

    function onError(callback) {
        onErrorCallback = callback;
    }

    function error(_ref3) {
        var title = _ref3.title;
        var message = _ref3.message;
        var htmlTemplate = _ref3.htmlTemplate;

        onErrorCallback({ title: title, message: message, htmlTemplate: htmlTemplate });
    }

    function onConfirmation(callback) {
        confirmationCallback = callback;
    }

    function confirmation(_ref4) {
        var title = _ref4.title;
        var message = _ref4.message;
        var callback = _ref4.callback;

        confirmationCallback({ title: title, message: message, callback: callback });
    }

    return {
        success: success,
        onSuccess: onSuccess,
        warning: warning,
        onWarning: onWarning,
        error: error,
        onError: onError,
        onConfirmation: onConfirmation,
        confirmation: confirmation
    };
})();
exports.DialogPublisher = DialogPublisher;

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = DialogViewModel;

function DialogViewModel(translator) {

    var visible = ko.observable(false);
    var header = ko.observable('');
    var bodyTemplate = ko.observable('modalBody');
    var body = ko.observable('');
    var closeButton = ko.observable(translator.translate("SharedDomain.Close.Action"));
    var content = ko.observable();
    var footerTemplate = ko.observable('information_footer');
    var okButton = ko.observable(translator.translate("SharedDomain.AcceptButton.Text"));
    var okCallback = undefined;
    var closeCallback = undefined;
    var showCallout = ko.observable(false);
    var calloutStyle = ko.observable();
    var calloutTimeout = ko.observable();
    var htmlTemplate = ko.observable('default_template');
    var htmlData = ko.observable();

    function setHtmlTemplate(htmlTemplateName) {
        htmlTemplate('default_template');
        if (htmlTemplateName) {
            htmlTemplate(htmlTemplateName);
        }
    }

    function error(_ref) {
        var title = _ref.title;
        var message = _ref.message;
        var htmlTemplateName = _ref.htmlTemplateName;
        var callback = _ref.callback;

        showCallout(false);
        calloutTimeout(undefined);
        calloutStyle("error");
        header(title);
        bodyTemplate('modalBody');
        body(message);
        title = title ? title + '.' : " ";
        message != undefined ? content(title + message) : content(title);
        setHtmlTemplate(htmlTemplateName);
        closeCallback = callback;
        showCallout(true);
    }

    function warning(_ref2) {
        var title = _ref2.title;
        var message = _ref2.message;
        var htmlTemplateName = _ref2.htmlTemplateName;

        showCallout(false);
        calloutTimeout(undefined);
        calloutStyle("warning");
        header(title);
        bodyTemplate('modalBody');
        body(message);
        message != undefined ? content(title + '. ' + message) : content(title);
        setHtmlTemplate(htmlTemplateName);
        showCallout(true);
    }

    function success(_ref3) {
        var message = _ref3.message;
        var htmlTemplateName = _ref3.htmlTemplateName;
        var callback = _ref3.callback;

        showCallout(false);
        calloutTimeout(5000);
        calloutStyle("success");
        content(message);
        setHtmlTemplate(htmlTemplateName);
        showCallout(true);
        closeCallback = callback;
    }

    function confirmation(_ref4) {
        var title = _ref4.title;
        var message = _ref4.message;
        var callback = _ref4.callback;

        okCallback = callback;
        footerTemplate('confirmation_footer');
        header(title);
        bodyTemplate('modalBody');
        body(message);
        closeButton(translator.translate("SharedDomain.CancelButton.Text"));
        visible(true);
    }

    function ask(_ref5) {
        var title = _ref5.title;
        var message = _ref5.message;
        var yesButton = _ref5.yesButton;
        var noButton = _ref5.noButton;
        var yesCallback = _ref5.yesCallback;
        var noCallback = _ref5.noCallback;

        okCallback = yesCallback;
        closeCallback = noCallback;
        footerTemplate('ask_footer');
        header(title);
        bodyTemplate('modalBody');
        body(message);
        okButton(yesButton);
        closeButton(noButton);
        visible(true);
    }

    function info(_ref6) {
        var title = _ref6.title;
        var message = _ref6.message;
        var htmlTemplateName = _ref6.htmlTemplateName;

        showCallout(false);
        calloutTimeout(5000);
        calloutStyle("info");
        header(title);
        bodyTemplate('modalBody');
        body(message);
        message != undefined ? content(title + '. ' + message) : content(title);
        setHtmlTemplate(htmlTemplateName);
        showCallout(true);
    }

    function ok() {
        visible(false);
        if (okCallback) {
            setTimeout(okCallback, 1000);
        }
    }

    function okWithoutTimeout() {
        visible(false);
        if (okCallback) {
            okCallback();
        }
    }

    function close() {
        visible(false);
        if (closeCallback) {
            setTimeout(closeCallback, 1000);
        }
    }

    function closeWithoutTimeout() {
        visible(false);
        if (closeCallback) {
            closeCallback();
        }
    }

    return {
        visible: visible,
        header: header,
        body: body,
        closeButton: closeButton,
        bodyTemplate: bodyTemplate,
        footerTemplate: footerTemplate,
        okButton: okButton,
        ok: ok,
        okWithoutTimeout: okWithoutTimeout,
        close: close,
        confirmation: confirmation,
        ask: ask,
        showCallout: showCallout,
        calloutStyle: calloutStyle,
        content: content,
        success: success,
        calloutTimeout: calloutTimeout,
        htmlTemplate: htmlTemplate,
        htmlData: htmlData,
        error: error,
        warning: warning,
        closeWithoutTimeout: closeWithoutTimeout,
        info: info
    };
}

module.exports = exports['default'];

},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = History;

function History() {

    function add(filters) {
        window.history.pushState(undefined, '', currentUrl(filters));
    }

    function back(defaultUrl) {
        if (document.referrer == "") {
            window.location = defaultUrl;
        } else {
            window.location = document.referrer;
        }
    }

    function currentUrl(filters) {
        return document.location.origin + document.location.pathname + '?' + $.param(filters);
    }

    return {
        add: add,
        currentUrl: currentUrl,
        back: back
    };
}

module.exports = exports['default'];

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = TranslationService;

function TranslationService(translationsJson, cultureName) {

    function translate(key, parameters) {
        var translation = translationsJson[key];
        if (!translation) return "!" + key + "!";
        if (parameters) {
            for (var i = 0; i < parameters.length; i++) {
                translation = translation.replace("{" + i + "}", parameters[i]);
            }
        }

        return translation || key;
    }

    return {
        translate: translate,
        cultureName: cultureName
    };
}

module.exports = exports["default"];

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var UserPermissions = {
    Workshop: {
        CreateAppointment: 2139
    }
};
exports.UserPermissions = UserPermissions;

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = UserRightsService;

function UserRightsService(userPermissions) {

    function hasPermission(permissionId) {
        var userPermission = _.find(userPermissions, function (x) {
            return x.PermissionDefinition == permissionId;
        });
        if (userPermission != undefined) return userPermission.HasPermission;
        return false;
    }

    return { hasPermission: hasPermission };
}

module.exports = exports["default"];

},{}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = validationService;

function validationService() {

    function initValidation() {
        ko.validation.init({
            registerExtenders: true,
            messagesOnModified: false,
            insertMessages: false,
            parseInputAttributes: true,
            messageTemplate: null
        }, true);

        registerExtenders();
    }

    function registerExtenders() {
        ko.validation.rules['matchs'] = {
            validator: function validator(value, fieldToCompare) {
                return value === ko.unwrap(fieldToCompare);
            },
            message: 'The fields must have the same value'
        };

        ko.validation.registerExtenders();
    }

    return {
        initValidation: initValidation
    };
}

module.exports = exports['default'];

},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = ComponentRegister;

var _dependencyProviderFactory = require("./dependencyProviderFactory");

function ComponentRegister(name, definition) {
    ko.components.register(name, {
        viewModel: {
            createViewModel: function createViewModel(params) {
                var script = definition.script.create ? definition.script.create : definition.script;
                var scriptInstance = script(params, _dependencyProviderFactory.DependencyProviderFactory.get());
                if (definition.script.onCreated) {
                    definition.script.onCreated(scriptInstance, params);
                }
                return scriptInstance;
            }
        },
        template: definition.template
    });
}

module.exports = exports["default"];

},{"./dependencyProviderFactory":52}],10:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"col-lg-5 col-xs-6 callout-container\" data-bind=\"fadeVisible: showCallout\">\n    <div id=\"callout\" data-bind=\"fadeVisible: showCallout, css: calloutStyle, template: { name: htmlTemplate, data: htmlData }\"></div>\n</div>\n<script type=\"text/html\" id=\"default_template\">\n    <button type=\"button\" class=\"close\" data-bind=\"click: close\">×</button>\n    <span data-bind=\"text: message\"></span>\n</script>";
module.exports = exports["default"];

},{}],11:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _componentRegister = require("../../componentRegister");

var _componentRegister2 = _interopRequireDefault(_componentRegister);

var _calloutWindowTemplate = require("./callout-window-template");

var _calloutWindowTemplate2 = _interopRequireDefault(_calloutWindowTemplate);

(0, _componentRegister2["default"])('callout-window', {
    script: function script(props) {
        var showCallout = props.visible;
        var message = props.text;
        var htmlTemplate = props.html ? props.html.template : ko.observable();
        var htmlData = props.html ? props.html.data : ko.observable();
        var actionResult = props.actionResult;
        var calloutStyle = ko.observable();
        var iconStyle = ko.observable();
        var activeTimeout = undefined;
        var closeCallback = function closeCallback() {};

        actionResult.subscribe(function () {
            return setStyle();
        });

        setTemplate();
        setStyle();
        configTimeout(props.timeout);
        if (props.closeCallback) closeCallback = props.closeCallback;

        function close() {
            if (activeTimeout) clearTimeout(activeTimeout);
            showCallout(false);
            closeCallback();
        }

        function determineCssByResult(actionResult) {
            var stylesMap = {
                'success': { alert: "alert alert-success", icon: "icon fa fa-check" },
                'info': { alert: "alert alert-info", icon: "icon fa fa-info" },
                'warning': { alert: "alert alert-warning", icon: "icon fa fa-warning" },
                'error': { alert: "alert alert-error", icon: "icon fa fa-ban" }
            };

            return stylesMap[actionResult] || stylesMap['info'];
        }

        function configTimeout(timeout) {
            showCallout.subscribe(function () {
                if (showCallout()) {
                    if (activeTimeout) clearTimeout(activeTimeout);
                    var calloutTimeout = ko.unwrap(timeout);
                    if (calloutTimeout) {
                        activeTimeout = setTimeout(close, ko.unwrap(timeout));
                    } else {
                        activeTimeout = null;
                    }
                }
            });
        }

        function setTemplate() {
            if (!htmlTemplate()) {
                htmlTemplate("default_template");
            }
            if (htmlTemplate() == "default_template") {
                htmlData({ close: close, iconStyle: iconStyle, message: message });
            }
        }

        function setStyle() {
            var style = determineCssByResult(actionResult());
            calloutStyle(style.alert);
            iconStyle(style.icon);
        }

        return { showCallout: showCallout, message: message, calloutStyle: calloutStyle, iconStyle: iconStyle, close: close, htmlTemplate: htmlTemplate, htmlData: htmlData };
    },
    template: _calloutWindowTemplate2["default"]
});

},{"../../componentRegister":9,"./callout-window-template":10}],12:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div id=\"dialogs\">\n    <div data-bind=\"modal: {\n                    visible: visible,\n                    header: { data: { label: header} },\n                    body: { name: bodyTemplate, data: { content: body } },\n                    footer: { name: footerTemplate, data: { primaryLabel: okButton, okAction: ok, closeLabel: closeButton, closeAction: close} },\n                    dialogCss: 'modal-auto-width'\n                }\">\n    </div>\n\n    <script type=\"text/html\" id=\"modalBody\">\n        <div data-bind=\"html: content\"></div>\n    </script>\n\n    <script type=\"text/html\" id=\"no_footer\">\n    </script>\n\n    <script type=\"text/html\" id=\"information_footer\">\n        <a href=\"#\" class=\"btn btn-default\" data-bind=\"html: closeLabel\" data-dismiss=\"modal\"></a>\n    </script>\n\n    <script type=\"text/html\" id=\"confirmation_footer\">\n        <a href=\"#\" class=\"btn btn-primary\" data-bind=\"click: okAction, html: primaryLabel\"></a>\n        <a href=\"#\" class=\"btn btn-default\" data-bind=\"html: closeLabel\" data-dismiss=\"modal\"></a>\n    </script>\n\n    <script type=\"text/html\" id=\"ask_footer\">\n        <a href=\"#\" class=\"btn btn-primary\" data-bind=\"click: okAction, html: primaryLabel\"></a>\n        <a href=\"#\" class=\"btn btn-default\" data-bind=\"click: closeAction, html: closeLabel\"></a>\n    </script>\n\n    <div class=\"row\">\n        <callout-window params=\"visible: showCallout, text: content , html: { template: htmlTemplate, data: htmlData }, actionResult: calloutStyle, timeout: calloutTimeout, closeCallback: closeWithoutTimeout\"></callout-window>\n    </div>\n</div>";
module.exports = exports["default"];

},{}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = Dialogs;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _componentRegister = require("../../componentRegister");

var _componentRegister2 = _interopRequireDefault(_componentRegister);

var _dialogPresenterTemplate = require("./dialog-presenter-template");

var _dialogPresenterTemplate2 = _interopRequireDefault(_dialogPresenterTemplate);

var _Dialogs = require("../../Dialogs");

var _Dialogs2 = _interopRequireDefault(_Dialogs);

(0, _componentRegister2["default"])('dialog-presenter', {
    script: {
        create: function create(props, dependencyProvider) {
            return Dialogs({ dialogPublisher: dependencyProvider.getDialogPublisher(), translator: dependencyProvider.getTranslator() });
        },
        onCreated: function onCreated(script) {
            script.initialize();
        }
    },
    template: _dialogPresenterTemplate2["default"]
});

function Dialogs(_ref) {
    var dialogPublisher = _ref.dialogPublisher;
    var translator = _ref.translator;

    var dialogsVm = (0, _Dialogs2["default"])(translator);

    function initialize() {
        dialogPublisher.onSuccess(dgSuccess);
        dialogPublisher.onError(dgError);
        dialogPublisher.onWarning(dgWarning);
        dialogPublisher.onConfirmation(dgConfirmation);
    }

    function dgSuccess(_ref2) {
        var message = _ref2.message;
        var htmlTemplateName = _ref2.htmlTemplateName;

        dialogsVm.success({ message: message, htmlTemplateName: htmlTemplateName });
    }

    function dgError(_ref3) {
        var title = _ref3.title;
        var message = _ref3.message;
        var htmlTemplateName = _ref3.htmlTemplateName;

        dialogsVm.error({ title: title, message: message, htmlTemplateName: htmlTemplateName });
    }

    function dgWarning(_ref4) {
        var title = _ref4.title;
        var message = _ref4.message;
        var htmlTemplateName = _ref4.htmlTemplateName;

        dialogsVm.warning({ title: title, message: message, htmlTemplateName: htmlTemplateName });
    }

    function dgConfirmation(_ref5) {
        var title = _ref5.title;
        var message = _ref5.message;
        var callback = _ref5.callback;

        dialogsVm.confirmation({ title: title, message: message, callback: callback });
    }

    return {
        visible: dialogsVm.visible,
        header: dialogsVm.header,
        body: dialogsVm.body,
        closeButton: dialogsVm.closeButton,
        bodyTemplate: dialogsVm.bodyTemplate,
        footerTemplate: dialogsVm.footerTemplate,
        okButton: dialogsVm.okButton,
        ok: dialogsVm.ok,
        okWithoutTimeout: dialogsVm.okWithoutTimeout,
        close: dialogsVm.close,
        confirmation: dialogsVm.confirmation,
        ask: dialogsVm.ask,
        showCallout: dialogsVm.showCallout,
        calloutStyle: dialogsVm.calloutStyle,
        content: dialogsVm.content,
        success: dialogsVm.success,
        calloutTimeout: dialogsVm.calloutTimeout,
        htmlTemplate: dialogsVm.htmlTemplate,
        htmlData: dialogsVm.htmlData,
        error: dialogsVm.error,
        warning: dialogsVm.warning,
        closeWithoutTimeout: dialogsVm.closeWithoutTimeout,
        info: dialogsVm.info,
        initialize: initialize
    };
}

module.exports = exports["default"];

},{"../../Dialogs":3,"../../componentRegister":9,"./dialog-presenter-template":12}],14:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
                    value: true
});
exports["default"] = "\n<!-- ko if: label -->\n<label data-bind=\"text: label\"></label>\n<!-- /ko -->\n<select data-bind=\"options: options,\n                    optionsValue: 'id',\n                    optionsText: 'description',\n                    value: value,\n                    event: { change: function() { if(onSelected) { onSelected(); }} }\" class=\"input-sm\"></select>";
module.exports = exports["default"];

},{}],15:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _componentRegister = require('../../componentRegister');

var _componentRegister2 = _interopRequireDefault(_componentRegister);

var _dropdownTemplate = require('./dropdown-template');

var _dropdownTemplate2 = _interopRequireDefault(_dropdownTemplate);

(0, _componentRegister2['default'])('dropdown', {
    script: {
        create: function create(props) {
            return {
                label: props.label,
                options: props.options,
                value: props.value,
                onSelected: props.onSelected
            };
        }
    },
    template: _dropdownTemplate2['default']
});

},{"../../componentRegister":9,"./dropdown-template":14}],16:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = "\n<button data-bind=\"click: click, enable: enable, text: text, visible: visible, attr: { class: style }\"></button>";
module.exports = exports["default"];

},{}],17:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _componentRegister = require("../../componentRegister");

var _componentRegister2 = _interopRequireDefault(_componentRegister);

var _formButtonTemplate = require('./form-button-template');

var _formButtonTemplate2 = _interopRequireDefault(_formButtonTemplate);

(0, _componentRegister2['default'])('form-button', {
    script: function script(props) {
        var btnType = props.type || 'default';
        var enable = props.enable || true;
        var visible = props.visible || true;
        var style = "btn btn-" + btnType;

        return {
            click: props.click,
            text: props.text,
            enable: enable,
            visible: visible,
            style: style
        };
    },
    template: _formButtonTemplate2['default']
});

},{"../../componentRegister":9,"./form-button-template":16}],18:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"col-lg-12 col-md-12 form-group\">\n    <label class=\"col-lg-3 col-md-3 control-label\" data-bind=\"text: props.label\"></label>\n    <div class=\"col-lg-9 col-md-9 control-label\">\n        <input class=\"control-data\" type=\"checkbox\" data-bind=\"checked: props.isChecked\" />\n    </div>\n</div>";
module.exports = exports["default"];

},{}],19:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _labeledCheckboxTemplate = require('./labeled-checkbox-template');

var _labeledCheckboxTemplate2 = _interopRequireDefault(_labeledCheckboxTemplate);

ko.components.register('labeled-checkbox', {
    viewModel: function viewModel(params) {
        return {
            props: params
        };
    },
    template: _labeledCheckboxTemplate2['default']
});

},{"./labeled-checkbox-template":18}],20:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"col-lg-12 form-group\" data-bind=\"visible: props.isVisible\">\n    <label class=\"col-lg-3 col-md-12 control-label fix-aligment-two-lines-label\" data-bind=\"text: props.label\"></label>\n    <div class=\"col-lg-9 col-md-12\">\n        <input class=\"control-data\" data-bind=\"datetimepicker: props.value,\n                                                endDate: today,\n                                                viewMode: 'decades',\n                                                css: {'missing-field': props.isMissing}\" />\n        <div class=\"text-red\" data-bind=\"visible: props.isMissing, text: props.missingText\"></div>\n    </div>\n</div>";
module.exports = exports["default"];

},{}],21:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _labeledDateInputTemplate = require('./labeled-date-input-template');

var _labeledDateInputTemplate2 = _interopRequireDefault(_labeledDateInputTemplate);

ko.components.register('labeled-date-input', {
    viewModel: function viewModel(params) {
        var today = moment.utc().format();

        return {
            props: params,
            today: today
        };
    },
    template: _labeledDateInputTemplate2['default']
});

},{"./labeled-date-input-template":20}],22:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"col-lg-12 form-group\" data-bind=\"visible: isVisible\">\n    <div class=\"col-lg-4 col-md-4\">\n        <label class=\"control-label\" data-bind=\"text: label\"></label>\n    </div>\n    <div class=\"col-lg-8 col-md-8\">\n        <input type=\"text\" class=\"control-data\" data-bind=\"value: value, valueUpdate: 'afterkeydown', css: getInputCssClasses()\"\n        />\n        <!-- ko if: !isValid() -->\n        <div class=\"no-horizontal-padding\">\n            <div class=\"validation-box\">\n                <span class=\"text-red\" data-bind=\"validationMessage: value\"></span>\n            </div>\n        </div>\n        <!-- /ko -->\n    </div>\n</div>";
module.exports = exports["default"];

},{}],23:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _labeledInputTextTemplate = require('./labeled-input-text-template');

var _labeledInputTextTemplate2 = _interopRequireDefault(_labeledInputTextTemplate);

ko.components.register('labeled-input-text', {
    viewModel: function viewModel(props) {
        var inputSize = props.inputSize || "small";
        var isVisible = props.isVisible || true;
        var isValid = props.isValid || function () {
            return true;
        };
        var inputSizeClass = getInputSizeCssClass();

        function getInputCssClasses() {
            var additionalClasses = {};
            additionalClasses['missing-field'] = !isValid();
            additionalClasses[inputSizeClass] = true;
            return additionalClasses;
        }

        function getInputSizeCssClass() {
            if (inputSize === "small") {
                return "width-sm";
            }
            if (inputSize === 'medium') {
                return 'width-md';
            }
            throw 'The input size ' + inputSize + ' does not exist for labeled input component';
        }

        return {
            label: props.label,
            value: props.value,
            isValid: isValid,
            isVisible: isVisible,
            getInputCssClasses: getInputCssClasses
        };
    },
    template: _labeledInputTextTemplate2['default']
});

},{"./labeled-input-text-template":22}],24:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n <div class=\"col-lg-12 form-group\" data-bind=\"visible: props.isVisible\">\n    <label class=\"col-lg-3 col-md-12 control-label\" data-bind=\"text: getLabelText()\"></label>\n    <div class=\"col-lg-9 col-md-12\">\n        <input type=\"text\" class=\"control-data\" data-bind=\"value: props.value, valueUpdate: 'afterkeydown',\n                        css: getInputCssClasses(), attr: { maxlength: props.valueMaxLength }\"/>\n        <div class=\"text-red\" data-bind=\"visible: props.isMissing, text: props.missingText\"></div>\n        <!-- ko if: !props.isValid() -->\n        <div class=\"no-horizontal-padding\" data-bind=\" template:{name:'validation_message', data: {field: props.value}}\"></div>\n        <!-- /ko -->\n    </div>\n</div>";
module.exports = exports["default"];

},{}],25:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _labeledInputWithMissingTemplate = require('./labeled-input-with-missing-template');

var _labeledInputWithMissingTemplate2 = _interopRequireDefault(_labeledInputWithMissingTemplate);

ko.components.register('labeled-input-with-missing', {
    viewModel: function viewModel(params) {
        var props = params;
        props.isVisible = props.isVisible || true;
        props.isMissing = props.isMissing || false;
        props.missingText = props.missingText || "";
        props.inputSize = props.inputSize || "medium";
        props.isMandatory = props.isMandatory || false;
        props.isValid = props.isValid || function () {
            return true;
        };

        function getLabelText() {
            var labelText = props.label;
            if (props.isMandatory) {
                return labelText + "*";
            }
            return labelText;
        }

        function getInputCssClasses() {
            var additionalClasses = {};
            additionalClasses['missing-field'] = props.isMissing || !props.isValid();
            additionalClasses[getInputSizeCssClass()] = true;
            return additionalClasses;
        }

        function getInputSizeCssClass() {
            if (props.inputSize === "small") {
                return "width-sm";
            }
            if (props.inputSize === 'medium') {
                return 'width-md';
            }
            throw 'The input size ' + props.inputSize + ' does not exist for labeled input component';
        }

        return {
            props: props,
            getInputCssClasses: getInputCssClasses,
            getLabelText: getLabelText
        };
    },
    template: _labeledInputWithMissingTemplate2['default']
});

},{"./labeled-input-with-missing-template":24}],26:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"col-lg-12 form-group\" data-bind=\"visible: props.isVisible\">\n    <label class=\"col-lg-3 col-md-12 control-label\" data-bind=\"text: props.label\"></label>\n    <div class=\"col-lg-9 col-md-12\">\n        <select class=\"width-md\" data-bind=\"options: props.options,\n                                            optionsText: props.textProperty,\n                                            optionsValue: props.valueProperty,\n                                            value: props.value,\n                                            optionsCaption: props.hint,\n                                            css: {'missing-field': props.isMissing}\">\n        </select>\n        <div class=\"text-red\" data-bind=\"visible: props.isMissing, text: props.missingText\"></div>\n    </div>\n</div>";
module.exports = exports["default"];

},{}],27:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _labeledOptionsTemplate = require('./labeled-options-template');

var _labeledOptionsTemplate2 = _interopRequireDefault(_labeledOptionsTemplate);

ko.components.register('labeled-options', {
    viewModel: function viewModel(props) {
        return { props: props };
    },

    template: _labeledOptionsTemplate2['default']
});

},{"./labeled-options-template":26}],28:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<label class=\"with-margin-rigth clickable\" data-bind=\"text: props.label\"></label>\n<div class=\"radio-orange\" data-bind=\"click: props.onClick, css: { 'checked': props.isChecked() }\">\n    <input type=\"radio\" class=\"without-opacity\">\n</div> ";
module.exports = exports["default"];

},{}],29:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _labeledRadioButtonTemplate = require('./labeled-radio-button-template');

var _labeledRadioButtonTemplate2 = _interopRequireDefault(_labeledRadioButtonTemplate);

ko.components.register('labeled-radio-button', {
    viewModel: function viewModel(params) {
        return { props: params };
    },
    template: _labeledRadioButtonTemplate2['default']
});

},{"./labeled-radio-button-template":28}],30:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"col-lg-12 form-group\">\n    <label class=\"col-lg-3 col-md-12 control-label\" data-bind=\"text: props.label\"></label>\n    <div class=\"col-lg-9 col-md-12\">\n        <div class=\"width-md\">\n            <select data-bind=\"optionsSelect2: props.options,\n                    optionsCaption: props.hint,\n                    valueSelect2: props.value,\n                    optionsText: props.textProperty,\n                    isMissing: props.isMissing\"></select>\n            <div class=\"text-red\" data-bind=\"visible: props.isMissing, text: props.missingText\"></div>\n        </div>\n    </div>\n</div>";
module.exports = exports["default"];

},{}],31:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _labeledSearchableOptionsTemplate = require('./labeled-searchable-options-template');

var _labeledSearchableOptionsTemplate2 = _interopRequireDefault(_labeledSearchableOptionsTemplate);

ko.components.register('labeled-searchable-options', {
    viewModel: function viewModel(props) {
        return { props: props };
    },
    template: _labeledSearchableOptionsTemplate2['default']
});

},{"./labeled-searchable-options-template":30}],32:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"margin col-lg-12 col-md-12 form-group\">\n    <label class=\"col-lg-3 col-md-6 control-label\" data-bind=\"text: props.label\"></label>\n    <div class=\"col-lg-9 col-md-6\">\n        <label class=\"inline-control-data\" data-bind=\"text: props.value\" />\n    </div>\n</div>";
module.exports = exports["default"];

},{}],33:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _labeledValueTemplate = require('./labeled-value-template');

var _labeledValueTemplate2 = _interopRequireDefault(_labeledValueTemplate);

ko.components.register('labeled-value', {
    viewModel: function viewModel(params) {
        return { props: params };
    },
    template: _labeledValueTemplate2['default']
});

},{"./labeled-value-template":32}],34:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"box-tools\">\n    <form data-bind=\"submit: function() { search(); }\">\n        <div class=\"input-group input-group-sm pull-right\">\n            <input type=\"text\" data-bind=\"value: searchTerm, attr: {placeholder: labels.search}\" class=\"form-control\">\n            <div class=\"input-group-btn\">\n                <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fa fa-search\"></i></button>\n            </div>\n        </div>\n    </form>\n</div>";
module.exports = exports["default"];

},{}],35:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _componentRegister = require("../../componentRegister");

var _componentRegister2 = _interopRequireDefault(_componentRegister);

var _searchBoxTemplate = require("./search-box-template");

var _searchBoxTemplate2 = _interopRequireDefault(_searchBoxTemplate);

(0, _componentRegister2["default"])('search-box', {
    script: {
        create: function create(props, dependencyProvider) {
            var translator = dependencyProvider.getTranslator();

            function getLabels() {
                return {
                    search: translator.translate("SharedDomain.SearchButton.Text")
                };
            }

            return {
                searchTerm: props.searchTerm,
                search: props.onSearch,
                labels: getLabels()
            };
        }
    },
    template: _searchBoxTemplate2["default"]
});

},{"../../componentRegister":9,"./search-box-template":34}],36:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"row margin\">\n    <div class=\"tab-content table-responsive\">\n        <div class=\"tab-pane active\">\n            <table class=\"table table-hover table-striped\">\n                <thead>\n                    <tr data-bind=\"foreach: columns\">\n                        <th data-bind=\"text: label, attr: { class: 'text-' + align }\"></th>\n                    </tr>\n                </thead>\n                <tbody data-bind=\"foreach: {data: rows, as: 'row'}\">\n                    <tr data-bind=\"foreach: {data: $parent.columns, as: 'col'}\">\n                        <td>\n                            <!-- ko if: col.type != 'date' -->\n                            <div data-bind=\"text: row[col.name], attr: { class: 'text-' + align }\"></div>\n                            <!-- /ko -->\n                            <!-- ko if: col.type == 'date' -->\n                            <div data-bind=\"shortDateText: row[col.name], attr: { class: 'text-' + align }\"></div>\n                            <!-- /ko -->\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>";
module.exports = exports["default"];

},{}],37:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _componentRegister = require("../../componentRegister");

var _componentRegister2 = _interopRequireDefault(_componentRegister);

var _searchResultsTableTemplate = require('./search-results-table-template');

var _searchResultsTableTemplate2 = _interopRequireDefault(_searchResultsTableTemplate);

(0, _componentRegister2['default'])('search-results-table', {
    script: function script(props) {

        return {
            columns: props.columns,
            rows: props.rows
        };
    },
    template: _searchResultsTableTemplate2['default']
});

},{"../../componentRegister":9,"./search-results-table-template":36}],38:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"form-group\">\n    <!-- ko if: label != undefined -->\n    <label class=\"col-sm-2\" data-bind=\"text: label\"></label>\n    <!-- /ko -->\n    <div class=\"col-sm-10\">\n        <select class=\"form-control\" data-bind=\"optionsSelect2: options,\n                                                optionsCaption: placeholder,\n                                                valueSelect2: selected,\n                                                optionsText: 'description',\n                                                enable: enabled,\n                                                dropdownCssClass: 'bigdrop'\"></select>\n    </div>\n</div>";
module.exports = exports["default"];

},{}],39:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = ListSelectorScript;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _componentRegister = require('../../componentRegister');

var _componentRegister2 = _interopRequireDefault(_componentRegister);

var _searchSelectTemplate = require('./search-select-template');

var _searchSelectTemplate2 = _interopRequireDefault(_searchSelectTemplate);

(0, _componentRegister2['default'])('search-select', {
    script: function script(props) {
        var params = {
            label: props.label || undefined,
            placeholder: props.placeholder,
            options: props.options,
            selected: props.selected,
            whenSelected: props.whenSelected,
            enableEvents: props.enableEvents
        };
        return new ListSelectorScript(params);
    },
    template: _searchSelectTemplate2['default']
});

function ListSelectorScript(_ref) {
    var label = _ref.label;
    var placeholder = _ref.placeholder;
    var options = _ref.options;
    var selected = _ref.selected;
    var whenSelected = _ref.whenSelected;
    var enableEvents = _ref.enableEvents;

    var readOnly = ko.observable(false);
    var enabled = ko.computed(function () {
        return options().length > 0 && !readOnly();
    });
    var eventsEnabled = ko.unwrap(enableEvents) || true;

    selected.subscribe(function (optionSelected) {
        if (eventsEnabled && whenSelected) {
            whenSelected(optionSelected);
        }
    });

    return {
        label: label,
        placeholder: placeholder,
        options: options,
        enabled: enabled,
        selected: selected
    };
}

module.exports = exports['default'];

},{"../../componentRegister":9,"./search-select-template":38}],40:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"row box-body margin\">\n    <!-- ko with: $parent -->\n    <!-- ko template: { nodes: $componentTemplateNodes } --><!-- /ko --> \n    <!-- /ko -->\n</div>  ";
module.exports = exports["default"];

},{}],41:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _sectionBodyTemplate = require('./section-body-template');

var _sectionBodyTemplate2 = _interopRequireDefault(_sectionBodyTemplate);

ko.components.register('section-body', {
    viewModel: function viewModel(props) {
        return { props: props };
    },
    template: _sectionBodyTemplate2['default']
});

},{"./section-body-template":40}],42:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"box box-detail\">\n    <div class=\"box-header\">\n        <h3 class=\"box-title width-full\">\n            <button type=\"button\" class=\"btn btn-collapse pull-right\" data-toggle=\"collapse\" data-bind=\"click: toggleVisibility, attr: { 'data-target': '#' + collapsableElementId }\">\n                <i data-bind=\" css: { 'fa-minus': !collapsed(), 'fa-plus': collapsed }\" class=\"fa\"></i>\n            </button>\n            <div data-bind=\"text: title\"></div>\n        </h3>\n    </div>\n    <!-- ko with: $parent -->\n    <!-- ko template: { nodes: $componentTemplateNodes } --><!-- /ko --> \n    <!-- /ko --> \n</div>";
module.exports = exports["default"];

},{}],43:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = SectionBoxVm;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _sectionBoxCollapsableTemplate = require('./section-box-collapsable-template');

var _sectionBoxCollapsableTemplate2 = _interopRequireDefault(_sectionBoxCollapsableTemplate);

function SectionBoxVm(params) {
    var title = params.title;
    var collapsableElementId = params.collapsableElementId;
    var whenExpanded = params.whenExpanded;
    var collapsed = ko.observable(true);

    function toggleVisibility() {
        if (collapsed()) {
            collapsed(false);
            if (whenExpanded) {
                whenExpanded();
            }
            return;
        }
        collapsed(true);
    }

    return {
        collapsed: collapsed,
        collapsableElementId: collapsableElementId,
        toggleVisibility: toggleVisibility,
        title: title
    };
}

ko.components.register('section-box-collapsable', {
    viewModel: SectionBoxVm,
    template: _sectionBoxCollapsableTemplate2['default']
});
module.exports = exports['default'];

},{"./section-box-collapsable-template":42}],44:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"box box-detail\">\n    <div class=\"box-header\">\n        <h3 class=\"box-title\" data-bind=\"text: props.title\"></h3>\n    </div>\n    <div data-bind=\"if: props.isShown, visible: props.isShown\" style=\"display: none\">\n        <!-- ko with: $parent -->\n        <!-- ko template: { nodes: $componentTemplateNodes } --><!-- /ko --> \n        <!-- /ko --> \n    </div>\n</div>";
module.exports = exports["default"];

},{}],45:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _sectionBoxTemplate = require('./section-box-template');

var _sectionBoxTemplate2 = _interopRequireDefault(_sectionBoxTemplate);

ko.components.register('section-box', {
    viewModel: function viewModel(props) {
        return { props: props };
    },
    template: _sectionBoxTemplate2['default']
});

},{"./section-box-template":44}],46:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"box-footer\">\n    <div class=\"pull-right\">\n        <!-- ko with: $parent -->\n        <!-- ko template: { nodes: $componentTemplateNodes } --><!-- /ko --> \n        <!-- /ko -->\n    </div>\n</div>";
module.exports = exports["default"];

},{}],47:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _sectionFooterTemplate = require('./section-footer-template');

var _sectionFooterTemplate2 = _interopRequireDefault(_sectionFooterTemplate);

ko.components.register('section-footer', {
    viewModel: function viewModel(props) {
        return { props: props };
    },
    template: _sectionFooterTemplate2['default']
});

},{"./section-footer-template":46}],48:[function(require,module,exports){
'use strict';

ko.components.register('spinner', {
    viewModel: {
        createViewModel: function createViewModel(params, componentInfo) {
            componentInfo.element.style.visibility = 'hidden';
            componentInfo.element.className += ' overlay';

            params.show.subscribe(function () {
                componentInfo.element.style.visibility = params.show() ? 'visible' : 'hidden';
            });
        }
    },

    template: '<i class="fa fa-refresh fa-spin"></i>'
});

},{}],49:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<i data-bind=\"visible: isVisible, text: translator.translate('SharedDomain.NoResults')\" \n    class=\"no-results-text\">\n</i>";
module.exports = exports["default"];

},{}],50:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _tableEmptyContentTemplate = require('./table-empty-content-template');

var _tableEmptyContentTemplate2 = _interopRequireDefault(_tableEmptyContentTemplate);

ko.components.register('table-empty-content', {
    viewModel: function viewModel(params) {
        return {
            translator: params.translator,
            isVisible: params.isVisible
        };
    },

    template: _tableEmptyContentTemplate2['default']
});

},{"./table-empty-content-template":49}],51:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = DependencyProvider;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _translationService = require("./translationService");

var _translationService2 = _interopRequireDefault(_translationService);

var _validator = require("./validator");

var _validator2 = _interopRequireDefault(_validator);

var _dialogPublisher = require("./dialogPublisher");

var _errorDialogPublisher = require("./errorDialogPublisher");

var _errorDialogPublisher2 = _interopRequireDefault(_errorDialogPublisher);

function DependencyProvider() {
    var translatorInstance = undefined;
    var restClientInstance = undefined;
    var errorDialogPublisher = undefined;
    var baseUrlInstance = undefined;

    function createTranslator(translations, cultureName) {
        translatorInstance = (0, _translationService2["default"])(translations, cultureName);
    }

    function createErrorDialogPublisher(errorMessages) {
        errorDialogPublisher = (0, _errorDialogPublisher2["default"])(getDialogPublisher(), errorMessages);
    }

    function getErrorDialogPublisher() {
        return errorDialogPublisher;
    }

    function setRestClient(restClient) {
        restClientInstance = restClient;
    }

    function getRestClient() {
        return restClientInstance;
    }

    function getTranslator() {
        return translatorInstance;
    }

    function getValidator() {
        return (0, _validator2["default"])(translatorInstance);
    }

    function getDialogPublisher() {
        return _dialogPublisher.DialogPublisher;
    }

    function getBaseUrl() {
        return baseUrlInstance;
    }

    function setBaseUrl(baseUrl) {
        baseUrlInstance = baseUrl;
    }

    return {
        createTranslator: createTranslator,
        getTranslator: getTranslator,
        setRestClient: setRestClient,
        getRestClient: getRestClient,
        getValidator: getValidator,
        getDialogPublisher: getDialogPublisher,
        createErrorDialogPublisher: createErrorDialogPublisher,
        getErrorDialogPublisher: getErrorDialogPublisher,
        getBaseUrl: getBaseUrl,
        setBaseUrl: setBaseUrl
    };
}

module.exports = exports["default"];

},{"./dialogPublisher":53,"./errorDialogPublisher":55,"./translationService":76,"./validator":78}],52:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _dependencyProvider = require('./dependencyProvider');

var _dependencyProvider2 = _interopRequireDefault(_dependencyProvider);

var DependencyProviderFactory = (function () {

    var dependencyProvider = undefined;

    function get() {
        if (!dependencyProvider) {
            dependencyProvider = (0, _dependencyProvider2['default'])();
        }
        return dependencyProvider;
    }

    return {
        get: get
    };
})();
exports.DependencyProviderFactory = DependencyProviderFactory;

},{"./dependencyProvider":51}],53:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var DialogPublisher = (function () {

    var onSuccessCallback = function onSuccessCallback() {};
    var onWarningCallback = function onWarningCallback() {};
    var onErrorCallback = function onErrorCallback() {};
    var confirmationCallback = function confirmationCallback() {};

    function success(_ref) {
        var message = _ref.message;
        var htmlTemplate = _ref.htmlTemplate;

        onSuccessCallback({ message: message, htmlTemplate: htmlTemplate });
    }

    function onSuccess(callback) {
        onSuccessCallback = callback;
    }

    function onWarning(callback) {
        onWarningCallback = callback;
    }

    function warning(_ref2) {
        var title = _ref2.title;
        var message = _ref2.message;
        var htmlTemplate = _ref2.htmlTemplate;

        onWarningCallback({ title: title, message: message, htmlTemplate: htmlTemplate });
    }

    function onError(callback) {
        onErrorCallback = callback;
    }

    function error(_ref3) {
        var title = _ref3.title;
        var message = _ref3.message;
        var htmlTemplate = _ref3.htmlTemplate;

        onErrorCallback({ title: title, message: message, htmlTemplate: htmlTemplate });
    }

    function onConfirmation(callback) {
        confirmationCallback = callback;
    }

    function confirmation(_ref4) {
        var title = _ref4.title;
        var message = _ref4.message;
        var callback = _ref4.callback;

        confirmationCallback({ title: title, message: message, callback: callback });
    }

    return {
        success: success,
        onSuccess: onSuccess,
        warning: warning,
        onWarning: onWarning,
        error: error,
        onError: onError,
        onConfirmation: onConfirmation,
        confirmation: confirmation
    };
})();
exports.DialogPublisher = DialogPublisher;

},{}],54:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = ErrorMessagesExtractor;

function ErrorMessagesExtractor(messages, htmlTemplates, whenNotFoundMessage) {

    function extractErrorDetail(xhr) {
        if (xhr && xhr.responseText != '') {
            return $.parseJSON(xhr.responseText);
        }
        return {};
    }

    function extractMessageFor(errorType, errorDetail) {
        var message = messages[errorType];
        if (!message) return whenNotFoundMessage();
        return message(extractErrorDetail(errorDetail));
    }

    function extractHtmlFor(errorType, errorDetail) {
        var template = htmlTemplates[errorType];
        if (!template) return null;
        return template(extractErrorDetail(errorDetail));
    }

    return {
        extractMessageFor: extractMessageFor,
        extractHtmlFor: extractHtmlFor
    };
}

module.exports = exports['default'];

},{}],55:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = ErrorDialogPublisher;

function ErrorDialogPublisher(dialogPublisher, errorMessages) {

    function publish(errorType, title, xhr, errorCallback, handlerType) {
        var message = errorMessages['for'](errorType, xhr);
        var htmlTemplateName = errorMessages.htmlTemplateFor(errorType, xhr);
        if (handlerType == 'warning') {
            dialogPublisher.warning({ title: title, message: message, htmlTemplateName: htmlTemplateName });
        } else {
            dialogPublisher.error({ title: title, message: message, htmlTemplateName: htmlTemplateName });
        }
        if (errorCallback) {
            errorCallback();
        }
    }

    return {
        publish: publish
    };
}

module.exports = exports['default'];

},{}],56:[function(require,module,exports){
'use strict';

ko.components.register('action-button', {
    viewModel: {
        createViewModel: function createViewModel(params) {
            return {
                mainIcon: params.mainIcon || 'fa-ellipsis-h',
                visible: params.visible || true,
                enable: params.enable || true,
                actions: params.actions
            };
        }
    },
    template: '<span class="dropdown">\n            <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" data-bind="enable: enable, visible: visible">                <span><i class="fa" data-bind="css: mainIcon"></i></span>\n            </button>\n            <ul class="dropdown-menu pull-right" data-bind="foreach: actions">                <li><a href="#" data-bind="click: action, text: title, visible: isVisible"></a></li>            </ul>\n        </span>'
});

},{}],57:[function(require,module,exports){
"use strict";

ko.bindingHandlers.aidadaterangepicker = {
    update: function update(element, valueAccessor, allBindings) {
        var startDate = valueAccessor();
        var endDate = allBindings.get("endDate");
        var minDate = allBindings.get("minDate") || moment();
        var formatPattern = allBindings.get("formatPattern");
        var applyLabel = allBindings.get("applyLabel") || "Apply";
        var cancelLabel = allBindings.get("cancelLabel") || "Cancel";
        var sDate = moment(startDate());
        var eDate = moment(endDate());

        $(element).daterangepicker({
            timePicker: true,
            timePicker24Hour: true,
            timePickerIncrement: 15,
            locale: {
                format: formatPattern,
                applyLabel: applyLabel,
                cancelLabel: cancelLabel
            },
            startDate: sDate,
            endDate: eDate,
            buttonClasses: "btn",
            applyClass: "btn-primary",
            minDate: minDate
        });

        $(element).on('apply.daterangepicker', function (ev, picker) {
            startDate(toISO8601Format(picker.startDate));
            endDate(toISO8601Format(picker.endDate));
        });

        function toISO8601Format(date) {
            if (!date) return null;
            return moment(date, 'L').toISOString();
        }
    }
};

},{}],58:[function(require,module,exports){
'use strict';

ko.components.register('callout', {
    viewModel: {
        createViewModel: function createViewModel(params) {
            var showCallout = params.visible;
            var message = params.text;
            var htmlTemplate = params.html ? params.html.template : ko.observable();
            var htmlData = params.html ? params.html.data : ko.observable();
            var actionResult = params.actionResult;
            var calloutStyle = ko.observable();
            var iconStyle = ko.observable();
            var activeTimeout = undefined;
            var closeCallback = function closeCallback() {};

            actionResult.subscribe(function () {
                return setStyle();
            });

            setTemplate();
            setStyle();
            configTimeout(params.timeout);
            if (params.closeCallback) closeCallback = params.closeCallback;

            function closeCallout() {
                if (activeTimeout) clearTimeout(activeTimeout);
                showCallout(false);
                closeCallback();
            }

            function determineCssByResult(actionResult) {
                var stylesMap = {
                    'success': { alert: "alert alert-success", icon: "icon fa fa-check" },
                    'info': { alert: "alert alert-info", icon: "icon fa fa-info" },
                    'warning': { alert: "alert alert-warning", icon: "icon fa fa-warning" },
                    'error': { alert: "alert alert-error", icon: "icon fa fa-ban" }
                };

                return stylesMap[actionResult] || stylesMap['info'];
            }

            function configTimeout(timeout) {
                showCallout.subscribe(function () {
                    if (showCallout()) {
                        if (activeTimeout) clearTimeout(activeTimeout);
                        var calloutTimeout = ko.unwrap(timeout);
                        if (calloutTimeout) {
                            activeTimeout = setTimeout(closeCallout, ko.unwrap(timeout));
                        } else {
                            activeTimeout = null;
                        }
                    }
                });
            }

            function setTemplate() {
                if (!htmlTemplate()) {
                    htmlTemplate("default_template");
                }
                if (htmlTemplate() == "default_template") {
                    htmlData({ closeCallout: closeCallout, iconStyle: iconStyle, message: message });
                }
            }
            function setStyle() {
                var style = determineCssByResult(actionResult());
                calloutStyle(style.alert);
                iconStyle(style.icon);
            }

            return { showCallout: showCallout, message: message, calloutStyle: calloutStyle, iconStyle: iconStyle, closeCallout: closeCallout, htmlTemplate: htmlTemplate, htmlData: htmlData };
        }
    },

    template: '<div class="col-lg-5 col-xs-6 callout-container" data-bind="fadeVisible: showCallout">\
        <div id="callout" data-bind="fadeVisible: showCallout, css: calloutStyle, template: { name: htmlTemplate, data: htmlData }"></div>\
    </div>\
    <script type="text/html" id="default_template">\
            <button type="button" class="close" data-bind="click: closeCallout">×</button>\
            <span data-bind="text: message"></span>\
    </script>'
});

},{}],59:[function(require,module,exports){
'use strict';

ko.components.register('columncheckbox', {
    viewModel: {
        createViewModel: function createViewModel(params) {
            var select = params.select;
            var unselect = params.unselect;
            var checked = params.checked;

            checked.subscribe(function () {
                if (checked()) select();
                if (!checked()) unselect();
            });

            return { checked: checked };
        }
    },

    template: '<input id="columnChecker" type="checkbox" data-bind="checked: checked">'
});

},{}],60:[function(require,module,exports){
"use strict";

ko.bindingHandlers.datepicker = {
    init: function init(element, valueAccessor, allBindingsAccessor) {
        var selectedDate = getInitialValue();
        var endDate = allBindingsAccessor.get("endDate");
        var language = allBindingsAccessor.get("language");
        var startView = getStartView();
        var startDate = allBindingsAccessor.get("startDate");
        var clearButton = allBindingsAccessor.get("clearButton");
        var updating = false;

        $(element).datepicker({
            format: {
                toDisplay: function toDisplay(date) {
                    return moment(date).format('L');
                },
                toValue: function toValue(dateAsString) {
                    var date = moment(dateAsString, "L");
                    if (date.isValid()) {
                        return date.toDate();
                    }
                    return dateAsString ? moment(dateAsString).toDate() : null;
                }
            },
            endDate: endDate,
            language: language,
            startView: startView,
            startDate: startDate,
            clearBtn: clearButton,
            autoclose: true,
            orientation: "bottom auto"
        });

        $(element).on("changeDate", function () {
            updating = true;
            var date = $(element).datepicker('getFormattedDate');
            selectedDate(toISO8601Format(date));
            updating = false;
        });

        $(element).addClass("datepicker");

        selectedDate.subscribe(function () {
            if (updating) return;
            updateDatePickerValue();
        });

        function getInitialValue() {
            var initialDate = valueAccessor();
            if (initialDate()) {
                return initialDate;
            }

            if (allBindingsAccessor.get("initialValue")) {
                var initialValue = allBindingsAccessor.get("initialValue");
                initialDate(initialValue);
            }
            return initialDate;
        }

        function getStartView() {
            var DAY_VIEW = 0;
            if (allBindingsAccessor.get("startView")) {
                return allBindingsAccessor.get("startView");
            }
            return DAY_VIEW;
        }

        function updateDatePickerValue() {
            $(element).datepicker('update', selectedDate());
        }

        function toISO8601Format(date) {
            if (!date) return null;
            return moment(date, 'L').toISOString();
        }

        updateDatePickerValue();

        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            $(element).datepicker('destroy');
        });
    }
};

},{}],61:[function(require,module,exports){
"use strict";

ko.bindingHandlers.datetimepicker = {
    init: function init(element, valueAccessor, allBindingsAccessor) {
        var selectedDate = getInitialValue();
        var endDate = allBindingsAccessor.get("endDate");
        var startDate = allBindingsAccessor.get("startDate");
        var viewMode = getViewMode();
        var clearButton = allBindingsAccessor.get("clearButton");
        var inline = allBindingsAccessor.get("inline") ? allBindingsAccessor.get("inline") : false;
        var subscriptionToStartDate = undefined;

        subscribeToStartDateChanges();

        $(element).datetimepicker({
            format: 'L',
            locale: moment.locale(),
            minDate: ko.unwrap(startDate),
            maxDate: endDate,
            viewMode: viewMode,
            showClear: clearButton,
            showClose: clearButton,
            inline: inline,
            keepOpen: false
        });

        $(element).data("DateTimePicker").date(moment(selectedDate()));

        ko.utils.registerEventHandler(element, "dp.change", function (event) {
            if (ko.isObservable(selectedDate)) {
                selectedDate(toISO8601Format(event.date));
            }
        });

        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            var picker = $(element).data("DateTimePicker");
            if (picker) {
                picker.destroy();
            }
            if (subscriptionToStartDate) {
                subscriptionToStartDate.dispose();
            }
        });

        function subscribeToStartDateChanges() {
            if (ko.isObservable(startDate)) {
                subscriptionToStartDate = startDate.subscribe(function () {
                    var minDate = moment(startDate());
                    var maxDate = moment($(element).data("DateTimePicker").maxDate());
                    if (minDate.isSameOrBefore(maxDate)) {
                        $(element).data("DateTimePicker").minDate(minDate);
                    }
                });
            }
        }

        function getInitialValue() {
            var initialDate = valueAccessor();
            if (initialDate()) {
                return initialDate;
            }

            if (allBindingsAccessor.get("initialValue")) {
                var initialValue = allBindingsAccessor.get("initialValue");
                initialDate(initialValue);
            }
            return initialDate;
        }

        function getViewMode() {
            var DAY_VIEW = 'days';
            if (allBindingsAccessor.get("viewMode")) {
                return allBindingsAccessor.get("viewMode");
            }
            return DAY_VIEW;
        }

        function toISO8601Format(date) {
            if (!date) return null;
            return date.toISOString();
        }
    },
    update: function update(element, valueAccessor) {
        var datePicker = $(element).data("DateTimePicker");
        if (datePicker) {
            var koDate = valueAccessor();
            if (koDate()) {
                datePicker.date(moment(koDate()));
            } else {
                datePicker.clear();
            }
        }
    }
};

},{}],62:[function(require,module,exports){
"use strict";

ko.bindingHandlers.evenRowStyle = {
    init: function init(element, valueAccessor) {

        var rowIndex = $(element).index();
        var cssClassName = ko.unwrap(valueAccessor());

        if (rowIndex % 2 !== 0) {
            $(element).addClass(cssClassName);
        }
    }
};

},{}],63:[function(require,module,exports){
"use strict";

ko.extenders.uppercase = function (target) {
    var uppercaseObservable = ko.computed({
        read: target,
        write: function write(newValue) {
            var current = target();
            var valueToWrite = undefined;

            if (newValue) {
                valueToWrite = newValue.toUpperCase();
            }

            if (valueToWrite !== current) {
                target(valueToWrite);
            }
        }
    });

    uppercaseObservable(target());

    return uppercaseObservable;
};

},{}],64:[function(require,module,exports){
"use strict";

ko.bindingHandlers.fadeVisible = {
    init: function init(element, valueAccessor) {
        var value = valueAccessor();
        $(element).toggle(ko.unwrap(value));
    },
    update: function update(element, valueAccessor) {
        var value = valueAccessor();
        ko.unwrap(value) ? $(element).fadeIn() : $(element).fadeOut();
    }
};

},{}],65:[function(require,module,exports){
"use strict";

ko.bindingHandlers.featureTrack = {
    init: function init(element, valueAccessor, allBindingsAccessor) {
        var dataToTrack = valueAccessor();
        var trackerUrl = allBindingsAccessor.get("url");

        var inputType = getInputType(element);
        switch (inputType) {
            case "text":
                trackOnEnterKey();
                break;
            case "select":
                trackOnChange();
                break;
            default:
                trackOnClick();
        }

        function getInputType(element) {
            return element.tagName.toString().toLowerCase() === "input" ? $(element).prop("type").toLowerCase() : element.tagName.toLowerCase();
        }

        function trackOnEnterKey() {
            var INTRO = 13;
            $(element).keypress(function (evt) {
                if (evt.which == INTRO) {
                    track();
                }
            });
        }

        function trackOnChange() {
            $(element).change(track);
        }

        function trackOnClick() {
            $(element).click(track);
        }

        function track() {
            $.ajax({
                type: 'POST',
                url: trackerUrl,
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(dataToTrack),
                async: false
            });
        }
    }
};

},{}],66:[function(require,module,exports){
'use strict';

ko.bindingHandlers.imageWithPreload = {
    init: function init(element, valueAccessor) {
        var parameters = valueAccessor();
        var url = parameters.url;
        var imgCss = parameters.imgCss;
        var spinnerCss = parameters.spinnerCss || "fa fa-refresh fa-spin fa-2x text-center";

        $(element).addClass('text-center');

        var spinner = createSpinner(spinnerCss);
        var img = createImg(imgCss);

        img.load(function () {
            return spinner.hide();
        });

        function createSpinner(spinnerCss) {
            var spinner = $('<i></i>');
            spinner.addClass(spinnerCss);
            spinner.css('margin-top', '10%');
            spinner.css('margin-bottom', '10%');
            $(element).append(spinner);
            return spinner;
        }

        function createImg(imgCss) {
            var imgElement = $('<img>');
            $(element).append(imgElement);
            imgElement.attr('src', url);
            imgElement.addClass(imgCss);
            return imgElement;
        }
    }
};

},{}],67:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = KnockoutExtensionNumber;

function KnockoutExtensionNumber(ko) {
    function defineKnockoutNumberBinding(culture) {

        ko.bindingHandlers.numberText = {
            update: function update(element, valueAccessor, allBindings) {
                setFormatNumber(element, valueAccessor, allBindings);
            }
        };

        function setFormatNumber(element, valueAccessor, allBindings) {
            var value = ko.unwrap(valueAccessor());
            var minimumDigits = allBindings.get("minimumDigits");
            if (minimumDigits == undefined) {
                minimumDigits = 2;
            }
            var numberAsText = value != undefined ? value.toLocaleString(culture.name, { minimumFractionDigits: minimumDigits, maximumFractionDigits: 2 }) : '';
            ko.utils.setTextContent(element, numberAsText);
        }
    }

    return {
        defineKnockoutNumberBinding: defineKnockoutNumberBinding
    };
}

module.exports = exports["default"];

},{}],68:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = defineRemoteSelect2;

function defineRemoteSelect2(culture) {

    var cultureSelect2 = culture;

    function init(element, valueAccessor, allBindings) {
        var selectedValue = allBindings.get("valueSelect2");
        var visibles = allBindings.get("visiblesSelect2");
        var allowClear = allBindings.get("allowClearSelect2") || false;
        var placeholder = allBindings.get("placeholderSelect2") || "";
        var minimumInputLength = allBindings.get("minimumInputLengthSelect2") || "";
        var templateSelect2 = allBindings.get("templateSelect2");

        createRemoteSelect2();
        subscribeToSelect2ChangesToNotifyViewModel();

        hackPreventOpenOnClear(element);

        function createRemoteSelect2() {
            var remoteUrl = ko.unwrap(valueAccessor());
            var optionsText = allBindings.get("optionsText");

            $(element).select2({
                placeholder: placeholder,
                allowClear: allowClear,
                minimumInputLength: minimumInputLength,
                escapeMarkup: function escapeMarkup(markup) {
                    return markup;
                },
                templateResult: function templateResult(option) {
                    if (option.loading) return option.text;
                    return templateSelect2 ? renderTemplate(templateSelect2, option) : option.text;
                },
                language: cultureSelect2,
                ajax: {
                    url: remoteUrl,
                    delay: 250,
                    data: function data(params) {
                        return { query: params.term };
                    },
                    processResults: function processResults(data) {
                        if (visibles) {
                            ko.utils.arrayPushAll(visibles, data);
                        }
                        return {
                            results: _.map(data, function (item) {
                                var description = item.description;
                                if (optionsText) {
                                    description = optionsText(item);
                                }
                                //Bug: El Id debe ser string. https://github.com/select2/select2/issues/4052
                                return {
                                    id: item.id.toString(),
                                    text: description,
                                    associatedObject: item
                                };
                            })
                        };
                    }
                }
            });

            setSelectedValue();
        }

        function renderTemplate(template, option) {
            var temp = $("<div>");
            ko.applyBindingsToNode(temp[0], { template: { name: template, data: option } });
            var html = temp.html();
            temp.remove();
            return html;
        }

        function setSelectedValue() {
            if (selectedValue() && selectedValue().id) {
                var option = $("<option selected></option>").val(selectedValue().id).text(selectedValue().description);
                $(element).append(option).trigger('change');

                if (visibles) {
                    if (!_.find(visibles, function (x) {
                        return x.id == selectedValue().id;
                    })) {
                        visibles.push(selectedValue());
                    }
                }
            } else {
                if (selectedValue() == "") return;
                if (placeholder != "") {
                    $(element).select2('val', '');
                    return;
                }
                $(element).parent().find("[class=select2-selection__rendered]").text('');
            }
        }

        function subscribeToSelect2ChangesToNotifyViewModel() {
            $(element).on("change", function () {
                var objectSelected = $(element).select2('data')[0];
                if (objectSelected == undefined) {
                    selectedValue(undefined);
                    return;
                }

                if (IsActualValueDifferentThan(objectSelected)) {
                    selectedValue({ id: objectSelected.id, description: objectSelected.text, value: objectSelected.associatedObject });
                }
            });
        }

        function IsActualValueDifferentThan(objectSelected) {
            return !selectedValue() || !selectedValue().id || selectedValue().id != objectSelected.id;
        }

        selectedValue.subscribe(function () {
            setSelectedValue();
        });

        function hackPreventOpenOnClear(element) {
            $(element).on('select2:opening', function () {
                if ($(element).data('unselecting')) {
                    $(element).removeData('unselecting');
                    setTimeout(function () {
                        $(element).select2('close');
                    }, 1);
                }
            }).on('select2:unselecting', function () {
                $(element).data('unselecting', true);
            });
        }
    }

    ko.bindingHandlers.optionsRemoteSelect2 = {
        init: init
    };

    ko.bindingHandlers.isMissingRemoteSelect2 = {
        update: function update(element, valueAccessor) {
            if (valueAccessor()) {
                var $select2 = $(element);
                $select2.data('select2').$selection.addClass("missing-field");
            } else {
                var $select2 = $(element);
                $select2.data('select2').$selection.removeClass("missing-field");
            }
        }
    };
}

module.exports = exports["default"];

},{}],69:[function(require,module,exports){
"use strict";

var updatingComponent = undefined;

function init(element, valueAccessor, allBindings) {

    var initialOptions = ko.unwrap(valueAccessor());
    var selectedOption = allBindings.get("valueSelect2")();
    var subscriptionToViewModel = undefined;

    createSelect2ComponentWith(element, allBindings, initialOptions, selectedOption);
    subscribeToSelect2ChangesToNotifyViewModel();
    subscribeToViewModelChangesToNotifySelect2();
    cleanUpSubscriptionsWhenDomNodeIsDeleted();

    hackPreventOpenOnClear(element);

    function subscribeToViewModelChangesToNotifySelect2() {
        subscriptionToViewModel = valueAccessor().subscribe(function () {
            repaintElement(element, allBindings);
        });
        allBindings.get("valueSelect2").subscribe(function () {
            if (updatingComponent) return;

            var selectedOption = allBindings.get("valueSelect2")();
            var options = allBindings.get("optionsSelect2")();
            selectOption(element, options, selectedOption);
        });
    }

    function subscribeToSelect2ChangesToNotifyViewModel() {
        var selectedValue = allBindings.get("valueSelect2");
        $(element).on("change", function () {
            if (updatingComponent) return;

            updatingUI(function () {
                var objectSelected = $(element).select2('data')[0].associatedObject;
                selectedValue(objectSelected);
            });
        });
    }

    function hackPreventOpenOnClear(element) {
        $(element).on('select2:opening', function () {
            if ($(element).data('unselecting')) {
                $(element).removeData('unselecting');
                setTimeout(function () {
                    $(element).select2('close');
                }, 1);
            }
        }).on('select2:unselecting', function () {
            $(element).data('unselecting', true);
        });
    }

    function cleanUpSubscriptionsWhenDomNodeIsDeleted() {
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            subscriptionToViewModel.dispose();
        });
    }
}

function repaintElement(element, allBindings) {
    $(element).select2("destroy");
    var selectedValue = allBindings.get("valueSelect2")();
    var changedOptions = allBindings.get("optionsSelect2")();
    createSelect2ComponentWith(element, allBindings, changedOptions, selectedValue);
}

function createSelect2ComponentWith(element, allBindings, options, selectedOption) {
    var select2Config = createSelect2Configuration(element, allBindings, options);
    $(element).empty();
    $(element).append("<option></option>");
    $(element).select2(select2Config);

    selectOption(element, options, selectedOption);
}

function updatingUI(updateFunction) {
    updatingComponent = true;
    try {
        updateFunction();
    } finally {
        updatingComponent = false;
    }
}

function selectOption(element, options, selectedOption) {
    updatingUI(function () {
        var index = selectedOptionIndex(options, selectedOption);
        $(element).val(index).trigger("change");
    });
}

function selectedOptionIndex(options, selectedOption) {
    return _.findIndex(options, function (option) {
        return _.eq(option, selectedOption);
    });
}
function createSelect2Configuration(element, allBindings, options) {
    var select2Config = { allowClear: true };
    if (allBindings.has("allowClearSelect2")) {
        select2Config.allowClear = allBindings.get("allowClearSelect2");
    }
    if (allBindings.has("optionsCaption")) {
        select2Config.placeholder = allBindings.get("optionsCaption");
    }
    if (allBindings.has("dropdownCssClass")) {
        select2Config.dropdownCssClass = allBindings.get("dropdownCssClass");
    }

    var optionsText = allBindings.get("optionsText");
    select2Config.data = convertToSelect2Data(options, optionsText);

    return select2Config;
}

function convertToSelect2Data(options, optionsText) {
    var select2Data = [];
    for (var i = 0; i < options.length; i++) {
        var text = undefined;
        if ($.isFunction(optionsText)) {
            text = optionsText(options[i]);
        } else {
            text = options[i][optionsText];
        }
        select2Data.push({
            id: i,
            text: text,
            associatedObject: options[i]
        });
    }
    return select2Data;
}

ko.bindingHandlers.optionsSelect2 = {
    init: init
};

ko.bindingHandlers.isMissing = {
    update: function update(element, valueAccessor) {
        if (valueAccessor()) {
            var $select2 = $(element);
            $select2.data('select2').$selection.addClass("missing-field");
        } else {
            var $select2 = $(element);
            $select2.data('select2').$selection.removeClass("missing-field");
        }
    }
};

},{}],70:[function(require,module,exports){
'use strict';

ko.bindingHandlers.shortDateText = {
    init: function init() {
        return { 'controlsDescendantBindings': true };
    },
    update: function update(element, valueAccessor) {
        var valueAsISO8061 = ko.unwrap(valueAccessor());
        var dateAsText = valueAsISO8061 ? moment(valueAsISO8061).format('L') : '';
        ko.utils.setTextContent(element, dateAsText);
    }
};

},{}],71:[function(require,module,exports){
'use strict';

ko.bindingHandlers.shortDateTimeText = {
    init: function init() {
        return { 'controlsDescendantBindings': true };
    },
    update: function update(element, valueAccessor) {
        var valueAsISO8061 = ko.unwrap(valueAccessor());
        var dateAsText = valueAsISO8061 ? moment(valueAsISO8061).format('L') : '';
        var timeAsText = valueAsISO8061 ? moment(valueAsISO8061).format('LTS') : '';
        ko.utils.setTextContent(element, dateAsText + ' ' + timeAsText);
    }
};

},{}],72:[function(require,module,exports){
'use strict';

ko.bindingHandlers.shortTimeText = {
    init: function init() {
        return { 'controlsDescendantBindings': true };
    },
    update: function update(element, valueAccessor) {
        var valueAsISO8061 = ko.unwrap(valueAccessor());
        var timeAsText = valueAsISO8061 ? moment(valueAsISO8061).format('HH:mm') : '';
        ko.utils.setTextContent(element, timeAsText);
    }
};

},{}],73:[function(require,module,exports){
'use strict';

ko.bindingHandlers.htmlTooltip = {
    init: function init(element, valueAccesor) {
        $(element).tooltip({
            html: true,
            title: valueAccesor()
        }).addClass('html-tooltip');
    },
    update: function update(element, valueAccesor) {
        $(element).attr('title', valueAccesor()).tooltip('fixTitle');
    }
};

},{}],74:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = RestClient;

function RestClient(apiBasePath) {

    function get(resourceUrl, callback, errorCallback) {
        $.ajax({
            url: apiBasePath + resourceUrl,
            headers: {
                "SIMA-Session-Token": "0"
            },
            success: callback,
            error: errorCallback
        });
    }

    function post(resourceUrl, headers, data, callback, errorCallback) {
        $.ajax({
            url: apiBasePath + resourceUrl,
            type: 'POST',
            headers: headers,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(data),
            success: callback,
            error: errorCallback
        });
    }

    function remove(url, headers, callback, errorCallback) {
        $.ajax({
            url: apiBasePath + url,
            type: 'DELETE',
            headers: headers,
            success: callback,
            error: errorCallback
        });
    }

    function put(url, headers, data, callback, errorCallback) {
        $.ajax({
            url: apiBasePath + url,
            type: 'PUT',
            headers: headers,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(data),
            success: callback,
            error: errorCallback
        });
    }

    return { get: get, post: post, put: put, remove: remove };
}

module.exports = exports["default"];

},{}],75:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var SimaEventBus = (function () {
    var simaEvents = [];

    function getSimaEvent(eventName) {
        var eventNameInLower = eventName.toLowerCase();
        if (!simaEvents[eventNameInLower]) {
            simaEvents[eventNameInLower] = {
                subscriptions: []
            };
        }
        return simaEvents[eventNameInLower];
    }

    function subscribe(eventName, callback, scope) {
        if (scope == undefined) throw "Scope was not specified on options";
        if (typeof callback !== "function") throw "Callback was not specified on options";

        var subscription = { callback: callback, scope: scope.toLowerCase() };

        var subscriptions = getSimaEvent(eventName).subscriptions;
        for (var i = 0; i < subscriptions.length; i++) {
            if (subscriptions[i].scope === scope.toLowerCase()) {
                getSimaEvent(eventName).subscriptions[i] = subscription;
                return;
            }
        }
        getSimaEvent(eventName).subscriptions.push(subscription);
    }

    function unsubscribe(eventName, scope) {
        if (scope == undefined) throw "Scope was not specified on options";

        var subscriptions = getSimaEvent(eventName).subscriptions;
        _.remove(subscriptions, function (x) {
            return x.scope === scope.toLowerCase();
        });
    }

    function raise(eventName, data) {
        var subscriptions = getSimaEvent(eventName).subscriptions;

        for (var i = 0; i < subscriptions.length; i++) {
            (function (subscription, data) {
                try {
                    subscription.callback.call(null, data);
                } catch (ex) {}
            })(subscriptions[i], data);
        }
    }

    return {
        subscribe: subscribe,
        raise: raise,
        unsubscribe: unsubscribe
    };
})();
exports.SimaEventBus = SimaEventBus;

},{}],76:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = TranslationService;

function TranslationService(translationsJson, cultureName) {

    function translate(key, parameters) {
        var translation = translationsJson[key];
        if (!translation) return "!" + key + "!";
        if (parameters) {
            for (var i = 0; i < parameters.length; i++) {
                translation = translation.replace("{" + i + "}", parameters[i]);
            }
        }

        return translation || key;
    }

    return {
        translate: translate,
        cultureName: cultureName
    };
}

module.exports = exports["default"];

},{}],77:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = validationService;

function validationService() {

    function initValidation() {
        ko.validation.init({
            registerExtenders: true,
            messagesOnModified: false,
            insertMessages: false,
            parseInputAttributes: true,
            messageTemplate: null
        }, true);

        registerExtenders();
    }

    function registerExtenders() {
        ko.validation.rules['matchs'] = {
            validator: function validator(value, fieldToCompare) {
                return value === ko.unwrap(fieldToCompare);
            },
            message: 'The fields must have the same value'
        };

        ko.validation.registerExtenders();
    }

    return {
        initValidation: initValidation
    };
}

module.exports = exports['default'];

},{}],78:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = Validator;

function Validator(translator) {
    var validableProps = [];
    var validableRules = [];

    function addRequired(validableProp) {
        validableProp.extend({
            required: {
                message: translator.translate('SharedDomain.Validation.Required.Message')
            }
        });
        validableProps.push(validableProp);
    }

    function addEmail(validableProp) {
        validableProp.extend({
            email: {
                message: translator.translate('SharedDomain.Validation.Email.Message')
            }
        });

        validableProps.push(validableProp);
    }

    function addMinimum(validableProp, minValue) {
        validableProp.extend({
            min: {
                params: minValue,
                message: translator.translate('SharedDomain.Validation.Minimun', [minValue])
            }
        });

        validableProps.push(validableProp);
    }

    function addNumber(validableProp) {
        validableProp.extend({
            number: {
                message: translator.translate('SharedDomain.Validation.Numeric')
            }
        });

        validableProps.push(validableProp);
    }

    function addRule(validableRule) {
        validableRules.push(validableRule);
    }

    function isValid(validableProp) {
        return validableProp.isValid();
    }

    function isAllValid() {
        return validableProps.every(function (prop) {
            return prop.isValid();
        }) && validableRules.every(function (rule) {
            return rule();
        });
    }

    return {
        addRequired: addRequired,
        addEmail: addEmail,
        addMinimum: addMinimum,
        addNumber: addNumber,
        addRule: addRule,
        isValid: isValid,
        isAllValid: isAllValid
    };
}

module.exports = exports['default'];

},{}],"aida-core":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.exportApi = exportApi;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _dialogsErrorMessagesExtractor = require("./dialogs/errorMessagesExtractor");

var _dialogsErrorMessagesExtractor2 = _interopRequireDefault(_dialogsErrorMessagesExtractor);

var _componentRegister = require("./componentRegister");

var _componentRegister2 = _interopRequireDefault(_componentRegister);

var _dependencyProviderFactory = require("./dependencyProviderFactory");

var _DialogPublisher = require("./DialogPublisher");

var _Dialogs = require("./Dialogs");

var _Dialogs2 = _interopRequireDefault(_Dialogs);

var _History = require("./History");

var _History2 = _interopRequireDefault(_History);

var _restClient = require("./restClient");

var _restClient2 = _interopRequireDefault(_restClient);

var _TranslationService = require("./TranslationService");

var _TranslationService2 = _interopRequireDefault(_TranslationService);

var _UserRightsService = require("./UserRightsService");

var _UserRightsService2 = _interopRequireDefault(_UserRightsService);

var _validationService = require("./validationService");

var _validationService2 = _interopRequireDefault(_validationService);

var _validator = require("./validator");

var _validator2 = _interopRequireDefault(_validator);

function exportApi() {
    return {
        ErrorMessagesExtractor: _dialogsErrorMessagesExtractor2["default"],
        ComponentRegister: _componentRegister2["default"],
        DependencyProviderFactory: _dependencyProviderFactory.DependencyProviderFactory,
        DialogPublisher: _DialogPublisher.DialogPublisher,
        DialogViewModel: _Dialogs2["default"],
        History: _History2["default"],
        RestClient: _restClient2["default"],
        TranslationService: _TranslationService2["default"],
        UserRightsService: _UserRightsService2["default"],
        ValidationService: _validationService2["default"],
        Validator: _validator2["default"]
    };
}

var aidaCore = require('aida-core').exportApi();
window.aidaCore = aidaCore;

},{"./DialogPublisher":2,"./Dialogs":3,"./History":4,"./TranslationService":5,"./UserRightsService":7,"./componentRegister":9,"./dependencyProviderFactory":52,"./dialogs/errorMessagesExtractor":54,"./restClient":74,"./validationService":77,"./validator":78,"aida-core":"aida-core"}]},{},[1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,"aida-core",74,75,76,78])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMvRGF0ZUZvcm1hdEhlbHBlci5qcyIsIkM6L1Byb2plY3RzL1NJTUEyL05FVC9JbmZyYXN0cnVjdHVyZS9JbmZyYXN0cnVjdHVyZS5Db3JlLldlYi9TY3JpcHRzL3NyYy9EaWFsb2dQdWJsaXNoZXIuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMvRGlhbG9ncy5qcyIsIkM6L1Byb2plY3RzL1NJTUEyL05FVC9JbmZyYXN0cnVjdHVyZS9JbmZyYXN0cnVjdHVyZS5Db3JlLldlYi9TY3JpcHRzL3NyYy9IaXN0b3J5LmpzIiwiQzovUHJvamVjdHMvU0lNQTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvc3JjL1RyYW5zbGF0aW9uU2VydmljZS5qcyIsIkM6L1Byb2plY3RzL1NJTUEyL05FVC9JbmZyYXN0cnVjdHVyZS9JbmZyYXN0cnVjdHVyZS5Db3JlLldlYi9TY3JpcHRzL3NyYy9Vc2VyUGVybWlzc2lvbnMuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMvVXNlclJpZ2h0c1NlcnZpY2UuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMvVmFsaWRhdGlvblNlcnZpY2UuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMvY29tcG9uZW50UmVnaXN0ZXIuanMiLCJTY3JpcHRzL3NyYy9jb21wb25lbnRzL2NhbGxvdXQtd2luZG93L2NhbGxvdXQtd2luZG93LXRlbXBsYXRlLmpzIiwiQzovUHJvamVjdHMvU0lNQTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvc3JjL2NvbXBvbmVudHMvY2FsbG91dC13aW5kb3cvY2FsbG91dC13aW5kb3cuanMiLCJTY3JpcHRzL3NyYy9jb21wb25lbnRzL2RpYWxvZy1wcmVzZW50ZXIvZGlhbG9nLXByZXNlbnRlci10ZW1wbGF0ZS5qcyIsIkM6L1Byb2plY3RzL1NJTUEyL05FVC9JbmZyYXN0cnVjdHVyZS9JbmZyYXN0cnVjdHVyZS5Db3JlLldlYi9TY3JpcHRzL3NyYy9jb21wb25lbnRzL2RpYWxvZy1wcmVzZW50ZXIvZGlhbG9nLXByZXNlbnRlci5qcyIsIlNjcmlwdHMvc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vZHJvcGRvd24tdGVtcGxhdGUuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMvY29tcG9uZW50cy9kcm9wZG93bi9kcm9wZG93bi5qcyIsIlNjcmlwdHMvc3JjL2NvbXBvbmVudHMvZm9ybS1idXR0b24vZm9ybS1idXR0b24tdGVtcGxhdGUuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMvY29tcG9uZW50cy9mb3JtLWJ1dHRvbi9mb3JtLWJ1dHRvbi5qcyIsIlNjcmlwdHMvc3JjL2NvbXBvbmVudHMvbGFiZWxlZC1jaGVja2JveC9sYWJlbGVkLWNoZWNrYm94LXRlbXBsYXRlLmpzIiwiQzovUHJvamVjdHMvU0lNQTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvc3JjL2NvbXBvbmVudHMvbGFiZWxlZC1jaGVja2JveC9sYWJlbGVkLWNoZWNrYm94LmpzIiwiU2NyaXB0cy9zcmMvY29tcG9uZW50cy9sYWJlbGVkLWRhdGUtaW5wdXQvbGFiZWxlZC1kYXRlLWlucHV0LXRlbXBsYXRlLmpzIiwiQzovUHJvamVjdHMvU0lNQTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvc3JjL2NvbXBvbmVudHMvbGFiZWxlZC1kYXRlLWlucHV0L2xhYmVsZWQtZGF0ZS1pbnB1dC5qcyIsIlNjcmlwdHMvc3JjL2NvbXBvbmVudHMvbGFiZWxlZC1pbnB1dC10ZXh0L2xhYmVsZWQtaW5wdXQtdGV4dC10ZW1wbGF0ZS5qcyIsIkM6L1Byb2plY3RzL1NJTUEyL05FVC9JbmZyYXN0cnVjdHVyZS9JbmZyYXN0cnVjdHVyZS5Db3JlLldlYi9TY3JpcHRzL3NyYy9jb21wb25lbnRzL2xhYmVsZWQtaW5wdXQtdGV4dC9sYWJlbGVkLWlucHV0LXRleHQuanMiLCJTY3JpcHRzL3NyYy9jb21wb25lbnRzL2xhYmVsZWQtaW5wdXQtd2l0aC1taXNzaW5nL2xhYmVsZWQtaW5wdXQtd2l0aC1taXNzaW5nLXRlbXBsYXRlLmpzIiwiQzovUHJvamVjdHMvU0lNQTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvc3JjL2NvbXBvbmVudHMvbGFiZWxlZC1pbnB1dC13aXRoLW1pc3NpbmcvbGFiZWxlZC1pbnB1dC13aXRoLW1pc3NpbmcuanMiLCJTY3JpcHRzL3NyYy9jb21wb25lbnRzL2xhYmVsZWQtb3B0aW9ucy9sYWJlbGVkLW9wdGlvbnMtdGVtcGxhdGUuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMvY29tcG9uZW50cy9sYWJlbGVkLW9wdGlvbnMvbGFiZWxlZC1vcHRpb25zLmpzIiwiU2NyaXB0cy9zcmMvY29tcG9uZW50cy9sYWJlbGVkLXJhZGlvLWJ1dHRvbi9sYWJlbGVkLXJhZGlvLWJ1dHRvbi10ZW1wbGF0ZS5qcyIsIkM6L1Byb2plY3RzL1NJTUEyL05FVC9JbmZyYXN0cnVjdHVyZS9JbmZyYXN0cnVjdHVyZS5Db3JlLldlYi9TY3JpcHRzL3NyYy9jb21wb25lbnRzL2xhYmVsZWQtcmFkaW8tYnV0dG9uL2xhYmVsZWQtcmFkaW8tYnV0dG9uLmpzIiwiU2NyaXB0cy9zcmMvY29tcG9uZW50cy9sYWJlbGVkLXNlYXJjaGFibGUtb3B0aW9ucy9sYWJlbGVkLXNlYXJjaGFibGUtb3B0aW9ucy10ZW1wbGF0ZS5qcyIsIkM6L1Byb2plY3RzL1NJTUEyL05FVC9JbmZyYXN0cnVjdHVyZS9JbmZyYXN0cnVjdHVyZS5Db3JlLldlYi9TY3JpcHRzL3NyYy9jb21wb25lbnRzL2xhYmVsZWQtc2VhcmNoYWJsZS1vcHRpb25zL2xhYmVsZWQtc2VhcmNoYWJsZS1vcHRpb25zLmpzIiwiU2NyaXB0cy9zcmMvY29tcG9uZW50cy9sYWJlbGVkLXZhbHVlL2xhYmVsZWQtdmFsdWUtdGVtcGxhdGUuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMvY29tcG9uZW50cy9sYWJlbGVkLXZhbHVlL2xhYmVsZWQtdmFsdWUuanMiLCJTY3JpcHRzL3NyYy9jb21wb25lbnRzL3NlYXJjaC1ib3gvc2VhcmNoLWJveC10ZW1wbGF0ZS5qcyIsIkM6L1Byb2plY3RzL1NJTUEyL05FVC9JbmZyYXN0cnVjdHVyZS9JbmZyYXN0cnVjdHVyZS5Db3JlLldlYi9TY3JpcHRzL3NyYy9jb21wb25lbnRzL3NlYXJjaC1ib3gvc2VhcmNoLWJveC5qcyIsIlNjcmlwdHMvc3JjL2NvbXBvbmVudHMvc2VhcmNoLXJlc3VsdHMtdGFibGUvc2VhcmNoLXJlc3VsdHMtdGFibGUtdGVtcGxhdGUuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMvY29tcG9uZW50cy9zZWFyY2gtcmVzdWx0cy10YWJsZS9zZWFyY2gtcmVzdWx0cy10YWJsZS5qcyIsIlNjcmlwdHMvc3JjL2NvbXBvbmVudHMvc2VhcmNoLXNlbGVjdC9zZWFyY2gtc2VsZWN0LXRlbXBsYXRlLmpzIiwiQzovUHJvamVjdHMvU0lNQTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvc3JjL2NvbXBvbmVudHMvc2VhcmNoLXNlbGVjdC9zZWFyY2gtc2VsZWN0LmpzIiwiU2NyaXB0cy9zcmMvY29tcG9uZW50cy9zZWN0aW9uLWJvZHkvc2VjdGlvbi1ib2R5LXRlbXBsYXRlLmpzIiwiQzovUHJvamVjdHMvU0lNQTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvc3JjL2NvbXBvbmVudHMvc2VjdGlvbi1ib2R5L3NlY3Rpb24tYm9keS5qcyIsIlNjcmlwdHMvc3JjL2NvbXBvbmVudHMvc2VjdGlvbi1ib3gtY29sbGFwc2FibGUvc2VjdGlvbi1ib3gtY29sbGFwc2FibGUtdGVtcGxhdGUuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMvY29tcG9uZW50cy9zZWN0aW9uLWJveC1jb2xsYXBzYWJsZS9zZWN0aW9uLWJveC1jb2xsYXBzYWJsZS5qcyIsIlNjcmlwdHMvc3JjL2NvbXBvbmVudHMvc2VjdGlvbi1ib3gvc2VjdGlvbi1ib3gtdGVtcGxhdGUuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMvY29tcG9uZW50cy9zZWN0aW9uLWJveC9zZWN0aW9uLWJveC5qcyIsIlNjcmlwdHMvc3JjL2NvbXBvbmVudHMvc2VjdGlvbi1mb290ZXIvc2VjdGlvbi1mb290ZXItdGVtcGxhdGUuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMvY29tcG9uZW50cy9zZWN0aW9uLWZvb3Rlci9zZWN0aW9uLWZvb3Rlci5qcyIsIkM6L1Byb2plY3RzL1NJTUEyL05FVC9JbmZyYXN0cnVjdHVyZS9JbmZyYXN0cnVjdHVyZS5Db3JlLldlYi9TY3JpcHRzL3NyYy9jb21wb25lbnRzL3NwaW5uZXIvc3Bpbm5lci5qcyIsIlNjcmlwdHMvc3JjL2NvbXBvbmVudHMvdGFibGUtZW1wdHktY29udGVudC90YWJsZS1lbXB0eS1jb250ZW50LXRlbXBsYXRlLmpzIiwiQzovUHJvamVjdHMvU0lNQTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvc3JjL2NvbXBvbmVudHMvdGFibGUtZW1wdHktY29udGVudC90YWJsZS1lbXB0eS1jb250ZW50LmpzIiwiQzovUHJvamVjdHMvU0lNQTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvc3JjL2RlcGVuZGVuY3lQcm92aWRlci5qcyIsIkM6L1Byb2plY3RzL1NJTUEyL05FVC9JbmZyYXN0cnVjdHVyZS9JbmZyYXN0cnVjdHVyZS5Db3JlLldlYi9TY3JpcHRzL3NyYy9kZXBlbmRlbmN5UHJvdmlkZXJGYWN0b3J5LmpzIiwiQzovUHJvamVjdHMvU0lNQTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvc3JjL2RpYWxvZ1B1Ymxpc2hlci5qcyIsIkM6L1Byb2plY3RzL1NJTUEyL05FVC9JbmZyYXN0cnVjdHVyZS9JbmZyYXN0cnVjdHVyZS5Db3JlLldlYi9TY3JpcHRzL3NyYy9kaWFsb2dzL2Vycm9yTWVzc2FnZXNFeHRyYWN0b3IuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMvZXJyb3JEaWFsb2dQdWJsaXNoZXIuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMva25vY2tvdXRDb21wb25lbnRzL2tub2Nrb3V0LWFjdGlvbnNCdXR0b24uanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMva25vY2tvdXRDb21wb25lbnRzL2tub2Nrb3V0LWFpZGFEYXRlUmFuZ2VQaWNrZXIuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMva25vY2tvdXRDb21wb25lbnRzL2tub2Nrb3V0LWNhbGxvdXQuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMva25vY2tvdXRDb21wb25lbnRzL2tub2Nrb3V0LWNvbHVtbmNoZWNrYm94LmpzIiwiQzovUHJvamVjdHMvU0lNQTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvc3JjL2tub2Nrb3V0Q29tcG9uZW50cy9rbm9ja291dC1kYXRlcGlja2VyLmpzIiwiQzovUHJvamVjdHMvU0lNQTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvc3JjL2tub2Nrb3V0Q29tcG9uZW50cy9rbm9ja291dC1kYXRldGltZXBpY2tlci5qcyIsIkM6L1Byb2plY3RzL1NJTUEyL05FVC9JbmZyYXN0cnVjdHVyZS9JbmZyYXN0cnVjdHVyZS5Db3JlLldlYi9TY3JpcHRzL3NyYy9rbm9ja291dENvbXBvbmVudHMva25vY2tvdXQtZXZlblJvd1N0eWxlLmpzIiwiQzovUHJvamVjdHMvU0lNQTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvc3JjL2tub2Nrb3V0Q29tcG9uZW50cy9rbm9ja291dC1leHRlbmRlci11cHBlcmNhc2UuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMva25vY2tvdXRDb21wb25lbnRzL2tub2Nrb3V0LWZhZGVWaXNpYmxlLmpzIiwiQzovUHJvamVjdHMvU0lNQTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvc3JjL2tub2Nrb3V0Q29tcG9uZW50cy9rbm9ja291dC1mZWF0dXJlVHJhY2suanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMva25vY2tvdXRDb21wb25lbnRzL2tub2Nrb3V0LWltYWdlV2l0aFByZWxvYWQuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMva25vY2tvdXRDb21wb25lbnRzL2tub2Nrb3V0LW51bWJlclRleHQuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMva25vY2tvdXRDb21wb25lbnRzL2tub2Nrb3V0LXJlbW90ZVNlbGVjdDIuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMva25vY2tvdXRDb21wb25lbnRzL2tub2Nrb3V0LXNlbGVjdDIuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMva25vY2tvdXRDb21wb25lbnRzL2tub2Nrb3V0LXNob3J0RGF0ZVRleHQuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMva25vY2tvdXRDb21wb25lbnRzL2tub2Nrb3V0LXNob3J0RGF0ZVRpbWVUZXh0LmpzIiwiQzovUHJvamVjdHMvU0lNQTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvc3JjL2tub2Nrb3V0Q29tcG9uZW50cy9rbm9ja291dC1zaG9ydFRpbWVUZXh0LmpzIiwiQzovUHJvamVjdHMvU0lNQTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvc3JjL2tub2Nrb3V0Q29tcG9uZW50cy9rbm9ja291dC10b29sdGlwLmpzIiwiQzovUHJvamVjdHMvU0lNQTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvc3JjL3Jlc3RDbGllbnQuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMvc2ltYUV2ZW50QnVzLmpzIiwiQzovUHJvamVjdHMvU0lNQTIvTkVUL0luZnJhc3RydWN0dXJlL0luZnJhc3RydWN0dXJlLkNvcmUuV2ViL1NjcmlwdHMvc3JjL3RyYW5zbGF0aW9uU2VydmljZS5qcyIsIkM6L1Byb2plY3RzL1NJTUEyL05FVC9JbmZyYXN0cnVjdHVyZS9JbmZyYXN0cnVjdHVyZS5Db3JlLldlYi9TY3JpcHRzL3NyYy92YWxpZGF0aW9uU2VydmljZS5qcyIsIkM6L1Byb2plY3RzL1NJTUEyL05FVC9JbmZyYXN0cnVjdHVyZS9JbmZyYXN0cnVjdHVyZS5Db3JlLldlYi9TY3JpcHRzL3NyYy92YWxpZGF0b3IuanMiLCJDOi9Qcm9qZWN0cy9TSU1BMi9ORVQvSW5mcmFzdHJ1Y3R1cmUvSW5mcmFzdHJ1Y3R1cmUuQ29yZS5XZWIvU2NyaXB0cy9zcmMvbWFpbi5qcyJd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Iiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwi77u/U3RyaW5nLnByb3RvdHlwZS5zaG9ydERhdGVGb3JtYXQgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gbW9tZW50KHRoaXMpLmZvcm1hdCgnTCcpO1xyXG59OyIsImV4cG9ydCBsZXQgRGlhbG9nUHVibGlzaGVyID0gKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgbGV0IG9uU3VjY2Vzc0NhbGxiYWNrID0gKCkgPT4ge307XHJcbiAgICBsZXQgb25XYXJuaW5nQ2FsbGJhY2sgPSAoKSA9PiB7fTtcclxuICAgIGxldCBvbkVycm9yQ2FsbGJhY2sgPSAoKSA9PiB7fTtcclxuICAgIGxldCBjb25maXJtYXRpb25DYWxsYmFjayA9ICgpID0+IHt9O1xyXG5cclxuICAgIGZ1bmN0aW9uIHN1Y2Nlc3Moe21lc3NhZ2UsIGh0bWxUZW1wbGF0ZX0pIHtcclxuICAgICAgICBvblN1Y2Nlc3NDYWxsYmFjayh7bWVzc2FnZSwgaHRtbFRlbXBsYXRlfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gb25TdWNjZXNzKGNhbGxiYWNrKXtcclxuICAgICAgICBvblN1Y2Nlc3NDYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG9uV2FybmluZyhjYWxsYmFjayl7XHJcbiAgICAgICAgb25XYXJuaW5nQ2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB3YXJuaW5nKHt0aXRsZSwgbWVzc2FnZSwgaHRtbFRlbXBsYXRlfSl7XHJcbiAgICAgICAgb25XYXJuaW5nQ2FsbGJhY2soe3RpdGxlLCBtZXNzYWdlLCBodG1sVGVtcGxhdGV9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBvbkVycm9yKGNhbGxiYWNrKXtcclxuICAgICAgICBvbkVycm9yQ2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBlcnJvcih7dGl0bGUsIG1lc3NhZ2UsIGh0bWxUZW1wbGF0ZX0pe1xyXG4gICAgICAgIG9uRXJyb3JDYWxsYmFjayh7dGl0bGUsIG1lc3NhZ2UsIGh0bWxUZW1wbGF0ZX0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG9uQ29uZmlybWF0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgY29uZmlybWF0aW9uQ2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjb25maXJtYXRpb24oe3RpdGxlLCBtZXNzYWdlLCBjYWxsYmFja30pIHtcclxuICAgICAgICBjb25maXJtYXRpb25DYWxsYmFjayh7dGl0bGUsIG1lc3NhZ2UsIGNhbGxiYWNrfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzdWNjZXNzLFxyXG4gICAgICAgIG9uU3VjY2VzcyxcclxuICAgICAgICB3YXJuaW5nLFxyXG4gICAgICAgIG9uV2FybmluZyxcclxuICAgICAgICBlcnJvcixcclxuICAgICAgICBvbkVycm9yLFxyXG4gICAgICAgIG9uQ29uZmlybWF0aW9uLFxyXG4gICAgICAgIGNvbmZpcm1hdGlvblxyXG4gICAgfTtcclxufSkoKTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEaWFsb2dWaWV3TW9kZWwodHJhbnNsYXRvcikge1xyXG5cclxuICAgIGxldCB2aXNpYmxlID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XHJcbiAgICBsZXQgaGVhZGVyID0ga28ub2JzZXJ2YWJsZSgnJyk7XHJcbiAgICBsZXQgYm9keVRlbXBsYXRlID0ga28ub2JzZXJ2YWJsZSgnbW9kYWxCb2R5Jyk7XHJcbiAgICBsZXQgYm9keSA9IGtvLm9ic2VydmFibGUoJycpO1xyXG4gICAgbGV0IGNsb3NlQnV0dG9uID0ga28ub2JzZXJ2YWJsZSh0cmFuc2xhdG9yLnRyYW5zbGF0ZShcIlNoYXJlZERvbWFpbi5DbG9zZS5BY3Rpb25cIikpO1xyXG4gICAgbGV0IGNvbnRlbnQgPSBrby5vYnNlcnZhYmxlKCk7XHJcbiAgICBsZXQgZm9vdGVyVGVtcGxhdGUgPSBrby5vYnNlcnZhYmxlKCdpbmZvcm1hdGlvbl9mb290ZXInKTtcclxuICAgIGxldCBva0J1dHRvbiA9IGtvLm9ic2VydmFibGUodHJhbnNsYXRvci50cmFuc2xhdGUoXCJTaGFyZWREb21haW4uQWNjZXB0QnV0dG9uLlRleHRcIikpO1xyXG4gICAgbGV0IG9rQ2FsbGJhY2s7XHJcbiAgICBsZXQgY2xvc2VDYWxsYmFjaztcclxuICAgIGNvbnN0IHNob3dDYWxsb3V0ID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XHJcbiAgICBjb25zdCBjYWxsb3V0U3R5bGUgPSBrby5vYnNlcnZhYmxlKCk7XHJcbiAgICBjb25zdCBjYWxsb3V0VGltZW91dCA9IGtvLm9ic2VydmFibGUoKTtcclxuICAgIGNvbnN0IGh0bWxUZW1wbGF0ZSA9IGtvLm9ic2VydmFibGUoJ2RlZmF1bHRfdGVtcGxhdGUnKTtcclxuICAgIGNvbnN0IGh0bWxEYXRhID0ga28ub2JzZXJ2YWJsZSgpO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNldEh0bWxUZW1wbGF0ZShodG1sVGVtcGxhdGVOYW1lKXtcclxuICAgICAgICBodG1sVGVtcGxhdGUoJ2RlZmF1bHRfdGVtcGxhdGUnKTtcclxuICAgICAgICBpZiAoaHRtbFRlbXBsYXRlTmFtZSkge1xyXG4gICAgICAgICAgICBodG1sVGVtcGxhdGUoaHRtbFRlbXBsYXRlTmFtZSk7XHJcbiAgICAgICAgfSAgICAgXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIGVycm9yKHt0aXRsZSwgbWVzc2FnZSwgaHRtbFRlbXBsYXRlTmFtZSwgY2FsbGJhY2t9KSB7XHJcbiAgICAgICAgc2hvd0NhbGxvdXQoZmFsc2UpOyAgXHJcbiAgICAgICAgY2FsbG91dFRpbWVvdXQodW5kZWZpbmVkKTtcclxuICAgICAgICBjYWxsb3V0U3R5bGUoXCJlcnJvclwiKTtcclxuICAgICAgICBoZWFkZXIodGl0bGUpO1xyXG4gICAgICAgIGJvZHlUZW1wbGF0ZSgnbW9kYWxCb2R5Jyk7XHJcbiAgICAgICAgYm9keShtZXNzYWdlKTtcclxuICAgICAgICB0aXRsZSA9IHRpdGxlID8gdGl0bGUgKyAnLicgOiBcIiBcIjtcclxuICAgICAgICBtZXNzYWdlICE9IHVuZGVmaW5lZCA/IGNvbnRlbnQodGl0bGUgICsgbWVzc2FnZSkgOiBjb250ZW50KHRpdGxlKTtcclxuICAgICAgICBzZXRIdG1sVGVtcGxhdGUoaHRtbFRlbXBsYXRlTmFtZSk7XHJcbiAgICAgICAgY2xvc2VDYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gICAgICAgIHNob3dDYWxsb3V0KHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHdhcm5pbmcoe3RpdGxlLCBtZXNzYWdlLCBodG1sVGVtcGxhdGVOYW1lfSkge1xyXG4gICAgICAgIHNob3dDYWxsb3V0KGZhbHNlKTtcclxuICAgICAgICBjYWxsb3V0VGltZW91dCh1bmRlZmluZWQpO1xyXG4gICAgICAgIGNhbGxvdXRTdHlsZShcIndhcm5pbmdcIik7XHJcbiAgICAgICAgaGVhZGVyKHRpdGxlKTtcclxuICAgICAgICBib2R5VGVtcGxhdGUoJ21vZGFsQm9keScpO1xyXG4gICAgICAgIGJvZHkobWVzc2FnZSk7XHJcbiAgICAgICAgbWVzc2FnZSAhPSB1bmRlZmluZWQgPyBjb250ZW50KHRpdGxlICsgJy4gJyArIG1lc3NhZ2UpIDogY29udGVudCh0aXRsZSk7XHJcbiAgICAgICAgc2V0SHRtbFRlbXBsYXRlKGh0bWxUZW1wbGF0ZU5hbWUpO1xyXG4gICAgICAgIHNob3dDYWxsb3V0KHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHN1Y2Nlc3Moe21lc3NhZ2UsIGh0bWxUZW1wbGF0ZU5hbWUsIGNhbGxiYWNrfSl7XHJcbiAgICAgICAgc2hvd0NhbGxvdXQoZmFsc2UpO1xyXG4gICAgICAgIGNhbGxvdXRUaW1lb3V0KDUwMDApO1xyXG4gICAgICAgIGNhbGxvdXRTdHlsZShcInN1Y2Nlc3NcIik7XHJcbiAgICAgICAgY29udGVudChtZXNzYWdlKTtcclxuICAgICAgICBzZXRIdG1sVGVtcGxhdGUoaHRtbFRlbXBsYXRlTmFtZSk7XHJcbiAgICAgICAgc2hvd0NhbGxvdXQodHJ1ZSk7XHJcbiAgICAgICAgY2xvc2VDYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNvbmZpcm1hdGlvbih7dGl0bGUsIG1lc3NhZ2UsIGNhbGxiYWNrfSkge1xyXG4gICAgICAgIG9rQ2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgICAgICBmb290ZXJUZW1wbGF0ZSgnY29uZmlybWF0aW9uX2Zvb3RlcicpO1xyXG4gICAgICAgIGhlYWRlcih0aXRsZSk7XHJcbiAgICAgICAgYm9keVRlbXBsYXRlKCdtb2RhbEJvZHknKTtcclxuICAgICAgICBib2R5KG1lc3NhZ2UpO1xyXG4gICAgICAgIGNsb3NlQnV0dG9uKHRyYW5zbGF0b3IudHJhbnNsYXRlKFwiU2hhcmVkRG9tYWluLkNhbmNlbEJ1dHRvbi5UZXh0XCIpKTtcclxuICAgICAgICB2aXNpYmxlKHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFzayh7dGl0bGUsIG1lc3NhZ2UsIHllc0J1dHRvbiwgbm9CdXR0b24sIHllc0NhbGxiYWNrLCBub0NhbGxiYWNrfSkge1xyXG4gICAgICAgIG9rQ2FsbGJhY2sgPSB5ZXNDYWxsYmFjaztcclxuICAgICAgICBjbG9zZUNhbGxiYWNrID0gbm9DYWxsYmFjaztcclxuICAgICAgICBmb290ZXJUZW1wbGF0ZSgnYXNrX2Zvb3RlcicpO1xyXG4gICAgICAgIGhlYWRlcih0aXRsZSk7XHJcbiAgICAgICAgYm9keVRlbXBsYXRlKCdtb2RhbEJvZHknKTtcclxuICAgICAgICBib2R5KG1lc3NhZ2UpO1xyXG4gICAgICAgIG9rQnV0dG9uKHllc0J1dHRvbik7XHJcbiAgICAgICAgY2xvc2VCdXR0b24obm9CdXR0b24pO1xyXG4gICAgICAgIHZpc2libGUodHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5mbyh7dGl0bGUsIG1lc3NhZ2UsIGh0bWxUZW1wbGF0ZU5hbWV9KSB7XHJcbiAgICAgICAgc2hvd0NhbGxvdXQoZmFsc2UpO1xyXG4gICAgICAgIGNhbGxvdXRUaW1lb3V0KDUwMDApO1xyXG4gICAgICAgIGNhbGxvdXRTdHlsZShcImluZm9cIik7XHJcbiAgICAgICAgaGVhZGVyKHRpdGxlKTtcclxuICAgICAgICBib2R5VGVtcGxhdGUoJ21vZGFsQm9keScpO1xyXG4gICAgICAgIGJvZHkobWVzc2FnZSk7XHJcbiAgICAgICAgbWVzc2FnZSAhPSB1bmRlZmluZWQgPyBjb250ZW50KHRpdGxlICsgJy4gJyArIG1lc3NhZ2UpIDogY29udGVudCh0aXRsZSk7XHJcbiAgICAgICAgc2V0SHRtbFRlbXBsYXRlKGh0bWxUZW1wbGF0ZU5hbWUpO1xyXG4gICAgICAgIHNob3dDYWxsb3V0KHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG9rKCkge1xyXG4gICAgICAgIHZpc2libGUoZmFsc2UpO1xyXG4gICAgICAgIGlmIChva0NhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQob2tDYWxsYmFjaywgMTAwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBva1dpdGhvdXRUaW1lb3V0KCkge1xyXG4gICAgICAgIHZpc2libGUoZmFsc2UpO1xyXG4gICAgICAgIGlmIChva0NhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIG9rQ2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY2xvc2UoKSB7XHJcbiAgICAgICAgdmlzaWJsZShmYWxzZSk7XHJcbiAgICAgICAgaWYgKGNsb3NlQ2FsbGJhY2spIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dChjbG9zZUNhbGxiYWNrLCAxMDAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgIFxyXG4gICAgZnVuY3Rpb24gY2xvc2VXaXRob3V0VGltZW91dCgpe1xyXG4gICAgICAgIHZpc2libGUoZmFsc2UpO1xyXG4gICAgICAgIGlmIChjbG9zZUNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGNsb3NlQ2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdmlzaWJsZSxcclxuICAgICAgICBoZWFkZXIsXHJcbiAgICAgICAgYm9keSxcclxuICAgICAgICBjbG9zZUJ1dHRvbixcclxuICAgICAgICBib2R5VGVtcGxhdGUsXHJcbiAgICAgICAgZm9vdGVyVGVtcGxhdGUsXHJcbiAgICAgICAgb2tCdXR0b24sXHJcbiAgICAgICAgb2ssXHJcbiAgICAgICAgb2tXaXRob3V0VGltZW91dCxcclxuICAgICAgICBjbG9zZSxcclxuICAgICAgICBjb25maXJtYXRpb24sXHJcbiAgICAgICAgYXNrLFxyXG4gICAgICAgIHNob3dDYWxsb3V0LFxyXG4gICAgICAgIGNhbGxvdXRTdHlsZSxcclxuICAgICAgICBjb250ZW50LFxyXG4gICAgICAgIHN1Y2Nlc3MsXHJcbiAgICAgICAgY2FsbG91dFRpbWVvdXQsXHJcbiAgICAgICAgaHRtbFRlbXBsYXRlLFxyXG4gICAgICAgIGh0bWxEYXRhLFxyXG4gICAgICAgIGVycm9yLFxyXG4gICAgICAgIHdhcm5pbmcsXHJcbiAgICAgICAgY2xvc2VXaXRob3V0VGltZW91dCxcclxuICAgICAgICBpbmZvXHJcbiAgICB9O1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhpc3RvcnkoKSB7XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkKGZpbHRlcnMpIHtcclxuICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUodW5kZWZpbmVkLCAnJywgY3VycmVudFVybChmaWx0ZXJzKSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIGJhY2soZGVmYXVsdFVybCl7XHJcbiAgICAgICAgaWYgKGRvY3VtZW50LnJlZmVycmVyID09IFwiXCIpIHtcclxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gZGVmYXVsdFVybDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBkb2N1bWVudC5yZWZlcnJlcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY3VycmVudFVybChmaWx0ZXJzKSB7XHJcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmxvY2F0aW9uLm9yaWdpbiArIGRvY3VtZW50LmxvY2F0aW9uLnBhdGhuYW1lICsgJz8nICsgJC5wYXJhbShmaWx0ZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGFkZCxcclxuICAgICAgICBjdXJyZW50VXJsLFxyXG4gICAgICAgIGJhY2tcclxuICAgIH07XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUcmFuc2xhdGlvblNlcnZpY2UodHJhbnNsYXRpb25zSnNvbiwgY3VsdHVyZU5hbWUpIHtcclxuXHJcbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUoa2V5LCBwYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgbGV0IHRyYW5zbGF0aW9uID0gdHJhbnNsYXRpb25zSnNvbltrZXldO1xyXG4gICAgICAgIGlmICghdHJhbnNsYXRpb24pIHJldHVybiBgISR7a2V5fSFgO1xyXG4gICAgICAgIGlmIChwYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRpb24gPSB0cmFuc2xhdGlvbi5yZXBsYWNlKGB7JHtpfX1gLCBwYXJhbWV0ZXJzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRyYW5zbGF0aW9uIHx8IGtleTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHRyYW5zbGF0ZSxcclxuICAgICAgICBjdWx0dXJlTmFtZVxyXG4gICAgfTtcclxufSIsIu+7v2V4cG9ydCBjb25zdCBVc2VyUGVybWlzc2lvbnMgPSB7XHJcbiAgICBXb3Jrc2hvcDoge1xyXG4gICAgICAgIENyZWF0ZUFwcG9pbnRtZW50OiAyMTM5XHJcbiAgICB9XHJcbn07Iiwi77u/ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVXNlclJpZ2h0c1NlcnZpY2UodXNlclBlcm1pc3Npb25zKSB7XHJcblxyXG4gICAgZnVuY3Rpb24gaGFzUGVybWlzc2lvbihwZXJtaXNzaW9uSWQpIHtcclxuICAgICAgICBjb25zdCB1c2VyUGVybWlzc2lvbiA9IF8uZmluZCh1c2VyUGVybWlzc2lvbnMsIHggPT4geC5QZXJtaXNzaW9uRGVmaW5pdGlvbiA9PSBwZXJtaXNzaW9uSWQpO1xyXG4gICAgICAgIGlmICh1c2VyUGVybWlzc2lvbiAhPSB1bmRlZmluZWQpIHJldHVybiB1c2VyUGVybWlzc2lvbi5IYXNQZXJtaXNzaW9uO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTsgXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHsgaGFzUGVybWlzc2lvbiB9O1xyXG59Iiwi77u/XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZhbGlkYXRpb25TZXJ2aWNlKCkge1xyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRWYWxpZGF0aW9uKCkge1xyXG4gICAgICAgIGtvLnZhbGlkYXRpb24uaW5pdCh7XHJcbiAgICAgICAgICAgIHJlZ2lzdGVyRXh0ZW5kZXJzOiB0cnVlLFxyXG4gICAgICAgICAgICBtZXNzYWdlc09uTW9kaWZpZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBpbnNlcnRNZXNzYWdlczogZmFsc2UsXHJcbiAgICAgICAgICAgIHBhcnNlSW5wdXRBdHRyaWJ1dGVzOiB0cnVlLFxyXG4gICAgICAgICAgICBtZXNzYWdlVGVtcGxhdGU6IG51bGxcclxuICAgICAgICB9LCB0cnVlKTtcclxuXHJcbiAgICAgICAgcmVnaXN0ZXJFeHRlbmRlcnMoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZWdpc3RlckV4dGVuZGVycygpIHtcclxuICAgICAgICBrby52YWxpZGF0aW9uLnJ1bGVzWydtYXRjaHMnXSA9IHtcclxuICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbih2YWx1ZSwgZmllbGRUb0NvbXBhcmUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0ga28udW53cmFwKGZpZWxkVG9Db21wYXJlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWVzc2FnZTogJ1RoZSBmaWVsZHMgbXVzdCBoYXZlIHRoZSBzYW1lIHZhbHVlJ1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGtvLnZhbGlkYXRpb24ucmVnaXN0ZXJFeHRlbmRlcnMoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGluaXRWYWxpZGF0aW9uXHJcbiAgICB9O1xyXG59IiwiaW1wb3J0IHsgRGVwZW5kZW5jeVByb3ZpZGVyRmFjdG9yeSB9IGZyb20gXCIuL2RlcGVuZGVuY3lQcm92aWRlckZhY3RvcnlcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbXBvbmVudFJlZ2lzdGVyKG5hbWUsIGRlZmluaXRpb24pIHtcclxuICAgIGtvLmNvbXBvbmVudHMucmVnaXN0ZXIobmFtZSwge1xyXG4gICAgICAgIHZpZXdNb2RlbDoge1xyXG4gICAgICAgICAgICBjcmVhdGVWaWV3TW9kZWw6IChwYXJhbXMpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBzY3JpcHQgPSBkZWZpbml0aW9uLnNjcmlwdC5jcmVhdGUgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBkZWZpbml0aW9uLnNjcmlwdC5jcmVhdGUgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkZWZpbml0aW9uLnNjcmlwdDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNjcmlwdEluc3RhbmNlID0gc2NyaXB0KHBhcmFtcywgRGVwZW5kZW5jeVByb3ZpZGVyRmFjdG9yeS5nZXQoKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbi5zY3JpcHQub25DcmVhdGVkKSB7IGRlZmluaXRpb24uc2NyaXB0Lm9uQ3JlYXRlZChzY3JpcHRJbnN0YW5jZSwgcGFyYW1zKTsgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjcmlwdEluc3RhbmNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0ZW1wbGF0ZTogZGVmaW5pdGlvbi50ZW1wbGF0ZVxyXG4gICAgfSk7XHJcbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSAqLyAvLyBBdXRvZ2VuZXJhdGVkIHdpdGggR3VscCAodGFzazogcGFyc2UtY29tcG9uZW50cy10ZW1wbGF0ZXMpXG4vLyBEb250IGNoYW5nZSB0aGlzIGZpbGUsIGNoYW5nZSB0aGUgLmh0bWwgZmlsZSBpbnN0ZWFkIGFuZCBydW4gR3VscFxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gXCJcXG48ZGl2IGNsYXNzPVxcXCJjb2wtbGctNSBjb2wteHMtNiBjYWxsb3V0LWNvbnRhaW5lclxcXCIgZGF0YS1iaW5kPVxcXCJmYWRlVmlzaWJsZTogc2hvd0NhbGxvdXRcXFwiPlxcbiAgICA8ZGl2IGlkPVxcXCJjYWxsb3V0XFxcIiBkYXRhLWJpbmQ9XFxcImZhZGVWaXNpYmxlOiBzaG93Q2FsbG91dCwgY3NzOiBjYWxsb3V0U3R5bGUsIHRlbXBsYXRlOiB7IG5hbWU6IGh0bWxUZW1wbGF0ZSwgZGF0YTogaHRtbERhdGEgfVxcXCI+PC9kaXY+XFxuPC9kaXY+XFxuPHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2h0bWxcXFwiIGlkPVxcXCJkZWZhdWx0X3RlbXBsYXRlXFxcIj5cXG4gICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJjbG9zZVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2xvc2VcXFwiPsOXPC9idXR0b24+XFxuICAgIDxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogbWVzc2FnZVxcXCI+PC9zcGFuPlxcbjwvc2NyaXB0PlwiO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYlhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWlJc0ltWnBiR1VpT2lKRE9pOVFjbTlxWldOMGN5OVRTVTFCTWk5T1JWUXZTVzVtY21GemRISjFZM1IxY21VdlNXNW1jbUZ6ZEhKMVkzUjFjbVV1UTI5eVpTNVhaV0l2VTJOeWFYQjBjeTl6Y21NdlkyOXRjRzl1Wlc1MGN5OWpZV3hzYjNWMExYZHBibVJ2ZHk5allXeHNiM1YwTFhkcGJtUnZkeTEwWlcxd2JHRjBaUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYlhYMD0iLCJpbXBvcnQgUmVnaXN0ZXJDb21wb25lbnQgZnJvbSBcIi4uLy4uL2NvbXBvbmVudFJlZ2lzdGVyXCI7XHJcbmltcG9ydCBUZW1wbGF0ZSBmcm9tIFwiLi9jYWxsb3V0LXdpbmRvdy10ZW1wbGF0ZVwiO1xyXG5cclxuUmVnaXN0ZXJDb21wb25lbnQoJ2NhbGxvdXQtd2luZG93Jywge1xyXG4gICAgc2NyaXB0OiAocHJvcHMpID0+IHtcclxuICAgICAgICBjb25zdCBzaG93Q2FsbG91dCA9IHByb3BzLnZpc2libGU7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IHByb3BzLnRleHQ7XHJcbiAgICAgICAgY29uc3QgaHRtbFRlbXBsYXRlID0gcHJvcHMuaHRtbCA/IHByb3BzLmh0bWwudGVtcGxhdGUgOiBrby5vYnNlcnZhYmxlKCk7XHJcbiAgICAgICAgY29uc3QgaHRtbERhdGEgPSBwcm9wcy5odG1sID8gcHJvcHMuaHRtbC5kYXRhIDoga28ub2JzZXJ2YWJsZSgpO1xyXG4gICAgICAgIGNvbnN0IGFjdGlvblJlc3VsdCA9IHByb3BzLmFjdGlvblJlc3VsdDtcclxuICAgICAgICBjb25zdCBjYWxsb3V0U3R5bGUgPSBrby5vYnNlcnZhYmxlKCk7XHJcbiAgICAgICAgY29uc3QgaWNvblN0eWxlID0ga28ub2JzZXJ2YWJsZSgpO1xyXG4gICAgICAgIGxldCBhY3RpdmVUaW1lb3V0O1xyXG4gICAgICAgIGxldCBjbG9zZUNhbGxiYWNrID0gKCkgPT4geyB9O1xyXG5cclxuICAgICAgICBhY3Rpb25SZXN1bHQuc3Vic2NyaWJlKCgpID0+IHNldFN0eWxlKCkpO1xyXG5cclxuICAgICAgICBzZXRUZW1wbGF0ZSgpO1xyXG4gICAgICAgIHNldFN0eWxlKCk7XHJcbiAgICAgICAgY29uZmlnVGltZW91dChwcm9wcy50aW1lb3V0KTtcclxuICAgICAgICBpZiAocHJvcHMuY2xvc2VDYWxsYmFjaykgY2xvc2VDYWxsYmFjayA9IHByb3BzLmNsb3NlQ2FsbGJhY2s7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNsb3NlKCkge1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZlVGltZW91dCkgY2xlYXJUaW1lb3V0KGFjdGl2ZVRpbWVvdXQpO1xyXG4gICAgICAgICAgICBzaG93Q2FsbG91dChmYWxzZSk7XHJcbiAgICAgICAgICAgIGNsb3NlQ2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRldGVybWluZUNzc0J5UmVzdWx0KGFjdGlvblJlc3VsdCkge1xyXG4gICAgICAgICAgICBsZXQgc3R5bGVzTWFwID0ge1xyXG4gICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiB7IGFsZXJ0OiBcImFsZXJ0IGFsZXJ0LXN1Y2Nlc3NcIiwgaWNvbjogXCJpY29uIGZhIGZhLWNoZWNrXCIgfSxcclxuICAgICAgICAgICAgICAgICdpbmZvJzogeyBhbGVydDogXCJhbGVydCBhbGVydC1pbmZvXCIsIGljb246IFwiaWNvbiBmYSBmYS1pbmZvXCIgfSxcclxuICAgICAgICAgICAgICAgICd3YXJuaW5nJzogeyBhbGVydDogXCJhbGVydCBhbGVydC13YXJuaW5nXCIsIGljb246IFwiaWNvbiBmYSBmYS13YXJuaW5nXCIgfSxcclxuICAgICAgICAgICAgICAgICdlcnJvcic6IHsgYWxlcnQ6IFwiYWxlcnQgYWxlcnQtZXJyb3JcIiwgaWNvbjogXCJpY29uIGZhIGZhLWJhblwiIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzdHlsZXNNYXBbYWN0aW9uUmVzdWx0XSB8fCBzdHlsZXNNYXBbJ2luZm8nXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNvbmZpZ1RpbWVvdXQodGltZW91dCkge1xyXG4gICAgICAgICAgICBzaG93Q2FsbG91dC5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNob3dDYWxsb3V0KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlVGltZW91dCkgY2xlYXJUaW1lb3V0KGFjdGl2ZVRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxvdXRUaW1lb3V0ID0ga28udW53cmFwKHRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxsb3V0VGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVUaW1lb3V0ID0gc2V0VGltZW91dChjbG9zZSwga28udW53cmFwKHRpbWVvdXQpKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVUaW1lb3V0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0VGVtcGxhdGUoKSB7XHJcbiAgICAgICAgICAgIGlmICghaHRtbFRlbXBsYXRlKCkpIHtcclxuICAgICAgICAgICAgICAgIGh0bWxUZW1wbGF0ZShcImRlZmF1bHRfdGVtcGxhdGVcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGh0bWxUZW1wbGF0ZSgpID09IFwiZGVmYXVsdF90ZW1wbGF0ZVwiKSB7XHJcbiAgICAgICAgICAgICAgICBodG1sRGF0YSh7IGNsb3NlLCBpY29uU3R5bGUsIG1lc3NhZ2UgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNldFN0eWxlKCkge1xyXG4gICAgICAgICAgICBjb25zdCBzdHlsZSA9IGRldGVybWluZUNzc0J5UmVzdWx0KGFjdGlvblJlc3VsdCgpKTtcclxuICAgICAgICAgICAgY2FsbG91dFN0eWxlKHN0eWxlLmFsZXJ0KTtcclxuICAgICAgICAgICAgaWNvblN0eWxlKHN0eWxlLmljb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHsgc2hvd0NhbGxvdXQsIG1lc3NhZ2UsIGNhbGxvdXRTdHlsZSwgaWNvblN0eWxlLCBjbG9zZSwgaHRtbFRlbXBsYXRlLCBodG1sRGF0YSB9O1xyXG4gICAgfSxcclxuICAgIHRlbXBsYXRlOiBUZW1wbGF0ZVxyXG59KTsiLCIvKiBlc2xpbnQtZGlzYWJsZSAqLyAvLyBBdXRvZ2VuZXJhdGVkIHdpdGggR3VscCAodGFzazogcGFyc2UtY29tcG9uZW50cy10ZW1wbGF0ZXMpXG4vLyBEb250IGNoYW5nZSB0aGlzIGZpbGUsIGNoYW5nZSB0aGUgLmh0bWwgZmlsZSBpbnN0ZWFkIGFuZCBydW4gR3VscFxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gXCJcXG48ZGl2IGlkPVxcXCJkaWFsb2dzXFxcIj5cXG4gICAgPGRpdiBkYXRhLWJpbmQ9XFxcIm1vZGFsOiB7XFxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiB2aXNpYmxlLFxcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyOiB7IGRhdGE6IHsgbGFiZWw6IGhlYWRlcn0gfSxcXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHsgbmFtZTogYm9keVRlbXBsYXRlLCBkYXRhOiB7IGNvbnRlbnQ6IGJvZHkgfSB9LFxcbiAgICAgICAgICAgICAgICAgICAgZm9vdGVyOiB7IG5hbWU6IGZvb3RlclRlbXBsYXRlLCBkYXRhOiB7IHByaW1hcnlMYWJlbDogb2tCdXR0b24sIG9rQWN0aW9uOiBvaywgY2xvc2VMYWJlbDogY2xvc2VCdXR0b24sIGNsb3NlQWN0aW9uOiBjbG9zZX0gfSxcXG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ0NzczogJ21vZGFsLWF1dG8td2lkdGgnXFxuICAgICAgICAgICAgICAgIH1cXFwiPlxcbiAgICA8L2Rpdj5cXG5cXG4gICAgPHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2h0bWxcXFwiIGlkPVxcXCJtb2RhbEJvZHlcXFwiPlxcbiAgICAgICAgPGRpdiBkYXRhLWJpbmQ9XFxcImh0bWw6IGNvbnRlbnRcXFwiPjwvZGl2PlxcbiAgICA8L3NjcmlwdD5cXG5cXG4gICAgPHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2h0bWxcXFwiIGlkPVxcXCJub19mb290ZXJcXFwiPlxcbiAgICA8L3NjcmlwdD5cXG5cXG4gICAgPHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2h0bWxcXFwiIGlkPVxcXCJpbmZvcm1hdGlvbl9mb290ZXJcXFwiPlxcbiAgICAgICAgPGEgaHJlZj1cXFwiI1xcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgZGF0YS1iaW5kPVxcXCJodG1sOiBjbG9zZUxhYmVsXFxcIiBkYXRhLWRpc21pc3M9XFxcIm1vZGFsXFxcIj48L2E+XFxuICAgIDwvc2NyaXB0PlxcblxcbiAgICA8c2NyaXB0IHR5cGU9XFxcInRleHQvaHRtbFxcXCIgaWQ9XFxcImNvbmZpcm1hdGlvbl9mb290ZXJcXFwiPlxcbiAgICAgICAgPGEgaHJlZj1cXFwiI1xcXCIgY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogb2tBY3Rpb24sIGh0bWw6IHByaW1hcnlMYWJlbFxcXCI+PC9hPlxcbiAgICAgICAgPGEgaHJlZj1cXFwiI1xcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgZGF0YS1iaW5kPVxcXCJodG1sOiBjbG9zZUxhYmVsXFxcIiBkYXRhLWRpc21pc3M9XFxcIm1vZGFsXFxcIj48L2E+XFxuICAgIDwvc2NyaXB0PlxcblxcbiAgICA8c2NyaXB0IHR5cGU9XFxcInRleHQvaHRtbFxcXCIgaWQ9XFxcImFza19mb290ZXJcXFwiPlxcbiAgICAgICAgPGEgaHJlZj1cXFwiI1xcXCIgY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogb2tBY3Rpb24sIGh0bWw6IHByaW1hcnlMYWJlbFxcXCI+PC9hPlxcbiAgICAgICAgPGEgaHJlZj1cXFwiI1xcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2xvc2VBY3Rpb24sIGh0bWw6IGNsb3NlTGFiZWxcXFwiPjwvYT5cXG4gICAgPC9zY3JpcHQ+XFxuXFxuICAgIDxkaXYgY2xhc3M9XFxcInJvd1xcXCI+XFxuICAgICAgICA8Y2FsbG91dC13aW5kb3cgcGFyYW1zPVxcXCJ2aXNpYmxlOiBzaG93Q2FsbG91dCwgdGV4dDogY29udGVudCAsIGh0bWw6IHsgdGVtcGxhdGU6IGh0bWxUZW1wbGF0ZSwgZGF0YTogaHRtbERhdGEgfSwgYWN0aW9uUmVzdWx0OiBjYWxsb3V0U3R5bGUsIHRpbWVvdXQ6IGNhbGxvdXRUaW1lb3V0LCBjbG9zZUNhbGxiYWNrOiBjbG9zZVdpdGhvdXRUaW1lb3V0XFxcIj48L2NhbGxvdXQtd2luZG93PlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cIjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklpSXNJbVpwYkdVaU9pSkRPaTlRY205cVpXTjBjeTlUU1UxQk1pOU9SVlF2U1c1bWNtRnpkSEoxWTNSMWNtVXZTVzVtY21GemRISjFZM1IxY21VdVEyOXlaUzVYWldJdlUyTnlhWEIwY3k5emNtTXZZMjl0Y0c5dVpXNTBjeTlrYVdGc2IyY3RjSEpsYzJWdWRHVnlMMlJwWVd4dlp5MXdjbVZ6Wlc1MFpYSXRkR1Z0Y0d4aGRHVXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2VzExOSIsImltcG9ydCBSZWdpc3RlckNvbXBvbmVudCBmcm9tIFwiLi4vLi4vY29tcG9uZW50UmVnaXN0ZXJcIjtcclxuaW1wb3J0IFRlbXBsYXRlIGZyb20gXCIuL2RpYWxvZy1wcmVzZW50ZXItdGVtcGxhdGVcIjtcclxuaW1wb3J0IERpYWxvZ3NWaWV3TW9kZWwgZnJvbSBcIi4uLy4uL0RpYWxvZ3NcIjtcclxuXHJcblJlZ2lzdGVyQ29tcG9uZW50KCdkaWFsb2ctcHJlc2VudGVyJywge1xyXG4gICAgc2NyaXB0OiB7XHJcbiAgICAgICAgY3JlYXRlOiAocHJvcHMsIGRlcGVuZGVuY3lQcm92aWRlcikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gRGlhbG9ncyh7IGRpYWxvZ1B1Ymxpc2hlcjogZGVwZW5kZW5jeVByb3ZpZGVyLmdldERpYWxvZ1B1Ymxpc2hlcigpLCB0cmFuc2xhdG9yOiBkZXBlbmRlbmN5UHJvdmlkZXIuZ2V0VHJhbnNsYXRvcigpfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkNyZWF0ZWQ6IChzY3JpcHQpID0+IHsgc2NyaXB0LmluaXRpYWxpemUoKTsgfVxyXG4gICAgfSxcclxuICAgIHRlbXBsYXRlOiBUZW1wbGF0ZVxyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERpYWxvZ3Moe2RpYWxvZ1B1Ymxpc2hlciwgdHJhbnNsYXRvcn0pe1xyXG4gICAgY29uc3QgZGlhbG9nc1ZtID0gRGlhbG9nc1ZpZXdNb2RlbCh0cmFuc2xhdG9yKTtcclxuXHJcbiAgICBmdW5jdGlvbiBpbml0aWFsaXplKCl7XHJcbiAgICAgICAgZGlhbG9nUHVibGlzaGVyLm9uU3VjY2VzcyhkZ1N1Y2Nlc3MpO1xyXG4gICAgICAgIGRpYWxvZ1B1Ymxpc2hlci5vbkVycm9yKGRnRXJyb3IpO1xyXG4gICAgICAgIGRpYWxvZ1B1Ymxpc2hlci5vbldhcm5pbmcoZGdXYXJuaW5nKTtcclxuICAgICAgICBkaWFsb2dQdWJsaXNoZXIub25Db25maXJtYXRpb24oZGdDb25maXJtYXRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRnU3VjY2Vzcyh7bWVzc2FnZSwgaHRtbFRlbXBsYXRlTmFtZX0pe1xyXG4gICAgICAgIGRpYWxvZ3NWbS5zdWNjZXNzKHttZXNzYWdlLGh0bWxUZW1wbGF0ZU5hbWV9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkZ0Vycm9yKHt0aXRsZSwgbWVzc2FnZSwgaHRtbFRlbXBsYXRlTmFtZX0pe1xyXG4gICAgICAgIGRpYWxvZ3NWbS5lcnJvcih7dGl0bGUsIG1lc3NhZ2UsIGh0bWxUZW1wbGF0ZU5hbWV9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkZ1dhcm5pbmcoe3RpdGxlLCBtZXNzYWdlLCBodG1sVGVtcGxhdGVOYW1lfSl7XHJcbiAgICAgICAgZGlhbG9nc1ZtLndhcm5pbmcoe3RpdGxlLCBtZXNzYWdlLCBodG1sVGVtcGxhdGVOYW1lfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZGdDb25maXJtYXRpb24oe3RpdGxlLCBtZXNzYWdlLCBjYWxsYmFja30pIHtcclxuICAgICAgICBkaWFsb2dzVm0uY29uZmlybWF0aW9uKHt0aXRsZSwgbWVzc2FnZSwgY2FsbGJhY2t9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHZpc2libGU6IGRpYWxvZ3NWbS52aXNpYmxlLFxyXG4gICAgICAgIGhlYWRlcjogZGlhbG9nc1ZtLmhlYWRlcixcclxuICAgICAgICBib2R5OiBkaWFsb2dzVm0uYm9keSxcclxuICAgICAgICBjbG9zZUJ1dHRvbjogZGlhbG9nc1ZtLmNsb3NlQnV0dG9uLFxyXG4gICAgICAgIGJvZHlUZW1wbGF0ZTogZGlhbG9nc1ZtLmJvZHlUZW1wbGF0ZSxcclxuICAgICAgICBmb290ZXJUZW1wbGF0ZTogZGlhbG9nc1ZtLmZvb3RlclRlbXBsYXRlLFxyXG4gICAgICAgIG9rQnV0dG9uOiBkaWFsb2dzVm0ub2tCdXR0b24sXHJcbiAgICAgICAgb2s6IGRpYWxvZ3NWbS5vayxcclxuICAgICAgICBva1dpdGhvdXRUaW1lb3V0OiBkaWFsb2dzVm0ub2tXaXRob3V0VGltZW91dCxcclxuICAgICAgICBjbG9zZTogZGlhbG9nc1ZtLmNsb3NlLFxyXG4gICAgICAgIGNvbmZpcm1hdGlvbjogZGlhbG9nc1ZtLmNvbmZpcm1hdGlvbixcclxuICAgICAgICBhc2s6IGRpYWxvZ3NWbS5hc2ssXHJcbiAgICAgICAgc2hvd0NhbGxvdXQ6IGRpYWxvZ3NWbS5zaG93Q2FsbG91dCxcclxuICAgICAgICBjYWxsb3V0U3R5bGU6IGRpYWxvZ3NWbS5jYWxsb3V0U3R5bGUsXHJcbiAgICAgICAgY29udGVudDogZGlhbG9nc1ZtLmNvbnRlbnQsXHJcbiAgICAgICAgc3VjY2VzczogZGlhbG9nc1ZtLnN1Y2Nlc3MsXHJcbiAgICAgICAgY2FsbG91dFRpbWVvdXQ6IGRpYWxvZ3NWbS5jYWxsb3V0VGltZW91dCxcclxuICAgICAgICBodG1sVGVtcGxhdGU6IGRpYWxvZ3NWbS5odG1sVGVtcGxhdGUsXHJcbiAgICAgICAgaHRtbERhdGE6IGRpYWxvZ3NWbS5odG1sRGF0YSxcclxuICAgICAgICBlcnJvcjogZGlhbG9nc1ZtLmVycm9yLFxyXG4gICAgICAgIHdhcm5pbmc6IGRpYWxvZ3NWbS53YXJuaW5nLFxyXG4gICAgICAgIGNsb3NlV2l0aG91dFRpbWVvdXQ6IGRpYWxvZ3NWbS5jbG9zZVdpdGhvdXRUaW1lb3V0LFxyXG4gICAgICAgIGluZm86IGRpYWxvZ3NWbS5pbmZvLFxyXG4gICAgICAgIGluaXRpYWxpemVcclxuICAgIH07XHJcbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSAqLyAvLyBBdXRvZ2VuZXJhdGVkIHdpdGggR3VscCAodGFzazogcGFyc2UtY29tcG9uZW50cy10ZW1wbGF0ZXMpXG4vLyBEb250IGNoYW5nZSB0aGlzIGZpbGUsIGNoYW5nZSB0aGUgLmh0bWwgZmlsZSBpbnN0ZWFkIGFuZCBydW4gR3VscFxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFwiXFxuPCEtLSBrbyBpZjogbGFiZWwgLS0+XFxuPGxhYmVsIGRhdGEtYmluZD1cXFwidGV4dDogbGFiZWxcXFwiPjwvbGFiZWw+XFxuPCEtLSAva28gLS0+XFxuPHNlbGVjdCBkYXRhLWJpbmQ9XFxcIm9wdGlvbnM6IG9wdGlvbnMsXFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zVmFsdWU6ICdpZCcsXFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zVGV4dDogJ2Rlc2NyaXB0aW9uJyxcXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiB7IGNoYW5nZTogZnVuY3Rpb24oKSB7IGlmKG9uU2VsZWN0ZWQpIHsgb25TZWxlY3RlZCgpOyB9fSB9XFxcIiBjbGFzcz1cXFwiaW5wdXQtc21cXFwiPjwvc2VsZWN0PlwiO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYlhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWlJc0ltWnBiR1VpT2lKRE9pOVFjbTlxWldOMGN5OVRTVTFCTWk5T1JWUXZTVzVtY21GemRISjFZM1IxY21VdlNXNW1jbUZ6ZEhKMVkzUjFjbVV1UTI5eVpTNVhaV0l2VTJOeWFYQjBjeTl6Y21NdlkyOXRjRzl1Wlc1MGN5OWtjbTl3Wkc5M2JpOWtjbTl3Wkc5M2JpMTBaVzF3YkdGMFpTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiWFgwPSIsImltcG9ydCBSZWdpc3RlckNvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnRSZWdpc3Rlcic7XHJcbmltcG9ydCBUZW1wbGF0ZSBmcm9tICcuL2Ryb3Bkb3duLXRlbXBsYXRlJztcclxuXHJcblJlZ2lzdGVyQ29tcG9uZW50KCdkcm9wZG93bicsIHtcclxuICAgIHNjcmlwdDoge1xyXG4gICAgICAgIGNyZWF0ZTogKHByb3BzKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogcHJvcHMubGFiZWwsXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBwcm9wcy5vcHRpb25zLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHByb3BzLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgb25TZWxlY3RlZDogcHJvcHMub25TZWxlY3RlZFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICB0ZW1wbGF0ZTogVGVtcGxhdGVcclxufSk7IiwiLyogZXNsaW50LWRpc2FibGUgKi8gLy8gQXV0b2dlbmVyYXRlZCB3aXRoIEd1bHAgKHRhc2s6IHBhcnNlLWNvbXBvbmVudHMtdGVtcGxhdGVzKVxuLy8gRG9udCBjaGFuZ2UgdGhpcyBmaWxlLCBjaGFuZ2UgdGhlIC5odG1sIGZpbGUgaW5zdGVhZCBhbmQgcnVuIEd1bHBcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBcIlxcbjxidXR0b24gZGF0YS1iaW5kPVxcXCJjbGljazogY2xpY2ssIGVuYWJsZTogZW5hYmxlLCB0ZXh0OiB0ZXh0LCB2aXNpYmxlOiB2aXNpYmxlLCBhdHRyOiB7IGNsYXNzOiBzdHlsZSB9XFxcIj48L2J1dHRvbj5cIjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklpSXNJbVpwYkdVaU9pSkRPaTlRY205cVpXTjBjeTlUU1UxQk1pOU9SVlF2U1c1bWNtRnpkSEoxWTNSMWNtVXZTVzVtY21GemRISjFZM1IxY21VdVEyOXlaUzVYWldJdlUyTnlhWEIwY3k5emNtTXZZMjl0Y0c5dVpXNTBjeTltYjNKdExXSjFkSFJ2Ymk5bWIzSnRMV0oxZEhSdmJpMTBaVzF3YkdGMFpTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiWFgwPSIsIu+7v2ltcG9ydCBSZWdpc3RlckNvbXBvbmVudCBmcm9tIFwiLi4vLi4vY29tcG9uZW50UmVnaXN0ZXJcIjtcclxuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vZm9ybS1idXR0b24tdGVtcGxhdGUnO1xyXG5cclxuUmVnaXN0ZXJDb21wb25lbnQoJ2Zvcm0tYnV0dG9uJywge1xyXG4gICAgc2NyaXB0OiAocHJvcHMpID0+IHtcclxuICAgICAgICBjb25zdCBidG5UeXBlID0gcHJvcHMudHlwZSB8fCAnZGVmYXVsdCc7XHJcbiAgICAgICAgY29uc3QgZW5hYmxlID0gcHJvcHMuZW5hYmxlIHx8IHRydWU7XHJcbiAgICAgICAgY29uc3QgdmlzaWJsZSA9IHByb3BzLnZpc2libGUgfHwgdHJ1ZTtcclxuICAgICAgICBjb25zdCBzdHlsZSA9IFwiYnRuIGJ0bi1cIiArIGJ0blR5cGU7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNsaWNrOiBwcm9wcy5jbGljayxcclxuICAgICAgICAgICAgdGV4dDogcHJvcHMudGV4dCxcclxuICAgICAgICAgICAgZW5hYmxlLFxyXG4gICAgICAgICAgICB2aXNpYmxlLFxyXG4gICAgICAgICAgICBzdHlsZVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdGVtcGxhdGU6IHRlbXBsYXRlXHJcbn0pOyIsIi8qIGVzbGludC1kaXNhYmxlICovIC8vIEF1dG9nZW5lcmF0ZWQgd2l0aCBHdWxwICh0YXNrOiBwYXJzZS1jb21wb25lbnRzLXRlbXBsYXRlcylcbi8vIERvbnQgY2hhbmdlIHRoaXMgZmlsZSwgY2hhbmdlIHRoZSAuaHRtbCBmaWxlIGluc3RlYWQgYW5kIHJ1biBHdWxwXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBcIlxcbjxkaXYgY2xhc3M9XFxcImNvbC1sZy0xMiBjb2wtbWQtMTIgZm9ybS1ncm91cFxcXCI+XFxuICAgIDxsYWJlbCBjbGFzcz1cXFwiY29sLWxnLTMgY29sLW1kLTMgY29udHJvbC1sYWJlbFxcXCIgZGF0YS1iaW5kPVxcXCJ0ZXh0OiBwcm9wcy5sYWJlbFxcXCI+PC9sYWJlbD5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLWxnLTkgY29sLW1kLTkgY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICA8aW5wdXQgY2xhc3M9XFxcImNvbnRyb2wtZGF0YVxcXCIgdHlwZT1cXFwiY2hlY2tib3hcXFwiIGRhdGEtYmluZD1cXFwiY2hlY2tlZDogcHJvcHMuaXNDaGVja2VkXFxcIiAvPlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cIjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklpSXNJbVpwYkdVaU9pSkRPaTlRY205cVpXTjBjeTlUU1UxQk1pOU9SVlF2U1c1bWNtRnpkSEoxWTNSMWNtVXZTVzVtY21GemRISjFZM1IxY21VdVEyOXlaUzVYWldJdlUyTnlhWEIwY3k5emNtTXZZMjl0Y0c5dVpXNTBjeTlzWVdKbGJHVmtMV05vWldOclltOTRMMnhoWW1Wc1pXUXRZMmhsWTJ0aWIzZ3RkR1Z0Y0d4aGRHVXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2VzExOSIsImltcG9ydCBsYWJlbGVkQ2hlY2tib3hUZW1wbGF0ZSBmcm9tICcuL2xhYmVsZWQtY2hlY2tib3gtdGVtcGxhdGUnO1xyXG5cclxua28uY29tcG9uZW50cy5yZWdpc3RlcignbGFiZWxlZC1jaGVja2JveCcsIHtcclxuICAgIHZpZXdNb2RlbDogKHBhcmFtcykgPT4geyBcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBwcm9wczogcGFyYW1zXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB0ZW1wbGF0ZTogbGFiZWxlZENoZWNrYm94VGVtcGxhdGVcclxufSk7IiwiLyogZXNsaW50LWRpc2FibGUgKi8gLy8gQXV0b2dlbmVyYXRlZCB3aXRoIEd1bHAgKHRhc2s6IHBhcnNlLWNvbXBvbmVudHMtdGVtcGxhdGVzKVxuLy8gRG9udCBjaGFuZ2UgdGhpcyBmaWxlLCBjaGFuZ2UgdGhlIC5odG1sIGZpbGUgaW5zdGVhZCBhbmQgcnVuIEd1bHBcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFwiXFxuPGRpdiBjbGFzcz1cXFwiY29sLWxnLTEyIGZvcm0tZ3JvdXBcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogcHJvcHMuaXNWaXNpYmxlXFxcIj5cXG4gICAgPGxhYmVsIGNsYXNzPVxcXCJjb2wtbGctMyBjb2wtbWQtMTIgY29udHJvbC1sYWJlbCBmaXgtYWxpZ21lbnQtdHdvLWxpbmVzLWxhYmVsXFxcIiBkYXRhLWJpbmQ9XFxcInRleHQ6IHByb3BzLmxhYmVsXFxcIj48L2xhYmVsPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbGctOSBjb2wtbWQtMTJcXFwiPlxcbiAgICAgICAgPGlucHV0IGNsYXNzPVxcXCJjb250cm9sLWRhdGFcXFwiIGRhdGEtYmluZD1cXFwiZGF0ZXRpbWVwaWNrZXI6IHByb3BzLnZhbHVlLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZERhdGU6IHRvZGF5LFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdNb2RlOiAnZGVjYWRlcycsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzOiB7J21pc3NpbmctZmllbGQnOiBwcm9wcy5pc01pc3Npbmd9XFxcIiAvPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidGV4dC1yZWRcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogcHJvcHMuaXNNaXNzaW5nLCB0ZXh0OiBwcm9wcy5taXNzaW5nVGV4dFxcXCI+PC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlwiO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYlhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWlJc0ltWnBiR1VpT2lKRE9pOVFjbTlxWldOMGN5OVRTVTFCTWk5T1JWUXZTVzVtY21GemRISjFZM1IxY21VdlNXNW1jbUZ6ZEhKMVkzUjFjbVV1UTI5eVpTNVhaV0l2VTJOeWFYQjBjeTl6Y21NdlkyOXRjRzl1Wlc1MGN5OXNZV0psYkdWa0xXUmhkR1V0YVc1d2RYUXZiR0ZpWld4bFpDMWtZWFJsTFdsdWNIVjBMWFJsYlhCc1lYUmxMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2x0ZGZRPT0iLCJpbXBvcnQgbGFiZWxlZERhdGVJbnB1dFRlbXBsYXRlIGZyb20gJy4vbGFiZWxlZC1kYXRlLWlucHV0LXRlbXBsYXRlJztcclxuXHJcbmtvLmNvbXBvbmVudHMucmVnaXN0ZXIoJ2xhYmVsZWQtZGF0ZS1pbnB1dCcsIHtcclxuICAgIHZpZXdNb2RlbDogKHBhcmFtcykgPT4geyBcclxuICAgICAgICBjb25zdCB0b2RheSA9IG1vbWVudC51dGMoKS5mb3JtYXQoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcHJvcHM6IHBhcmFtcyxcclxuICAgICAgICAgICAgdG9kYXlcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHRlbXBsYXRlOiBsYWJlbGVkRGF0ZUlucHV0VGVtcGxhdGVcclxufSk7IiwiLyogZXNsaW50LWRpc2FibGUgKi8gLy8gQXV0b2dlbmVyYXRlZCB3aXRoIEd1bHAgKHRhc2s6IHBhcnNlLWNvbXBvbmVudHMtdGVtcGxhdGVzKVxuLy8gRG9udCBjaGFuZ2UgdGhpcyBmaWxlLCBjaGFuZ2UgdGhlIC5odG1sIGZpbGUgaW5zdGVhZCBhbmQgcnVuIEd1bHBcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFwiXFxuPGRpdiBjbGFzcz1cXFwiY29sLWxnLTEyIGZvcm0tZ3JvdXBcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogaXNWaXNpYmxlXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLWxnLTQgY29sLW1kLTRcXFwiPlxcbiAgICAgICAgPGxhYmVsIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIiBkYXRhLWJpbmQ9XFxcInRleHQ6IGxhYmVsXFxcIj48L2xhYmVsPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLWxnLTggY29sLW1kLThcXFwiPlxcbiAgICAgICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGNsYXNzPVxcXCJjb250cm9sLWRhdGFcXFwiIGRhdGEtYmluZD1cXFwidmFsdWU6IHZhbHVlLCB2YWx1ZVVwZGF0ZTogJ2FmdGVya2V5ZG93bicsIGNzczogZ2V0SW5wdXRDc3NDbGFzc2VzKClcXFwiXFxuICAgICAgICAvPlxcbiAgICAgICAgPCEtLSBrbyBpZjogIWlzVmFsaWQoKSAtLT5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcIm5vLWhvcml6b250YWwtcGFkZGluZ1xcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmFsaWRhdGlvbi1ib3hcXFwiPlxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidGV4dC1yZWRcXFwiIGRhdGEtYmluZD1cXFwidmFsaWRhdGlvbk1lc3NhZ2U6IHZhbHVlXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwhLS0gL2tvIC0tPlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cIjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklpSXNJbVpwYkdVaU9pSkRPaTlRY205cVpXTjBjeTlUU1UxQk1pOU9SVlF2U1c1bWNtRnpkSEoxWTNSMWNtVXZTVzVtY21GemRISjFZM1IxY21VdVEyOXlaUzVYWldJdlUyTnlhWEIwY3k5emNtTXZZMjl0Y0c5dVpXNTBjeTlzWVdKbGJHVmtMV2x1Y0hWMExYUmxlSFF2YkdGaVpXeGxaQzFwYm5CMWRDMTBaWGgwTFhSbGJYQnNZWFJsTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sdGRmUT09IiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vbGFiZWxlZC1pbnB1dC10ZXh0LXRlbXBsYXRlJztcclxuXHJcbmtvLmNvbXBvbmVudHMucmVnaXN0ZXIoJ2xhYmVsZWQtaW5wdXQtdGV4dCcsIHtcclxuICAgIHZpZXdNb2RlbDogKHByb3BzKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaW5wdXRTaXplID0gcHJvcHMuaW5wdXRTaXplIHx8IFwic21hbGxcIjtcclxuICAgICAgICBjb25zdCBpc1Zpc2libGUgPSBwcm9wcy5pc1Zpc2libGUgfHwgdHJ1ZTtcclxuICAgICAgICBjb25zdCBpc1ZhbGlkID0gcHJvcHMuaXNWYWxpZCB8fCAoKCkgPT4gdHJ1ZSk7XHJcbiAgICAgICAgY29uc3QgaW5wdXRTaXplQ2xhc3MgPSBnZXRJbnB1dFNpemVDc3NDbGFzcygpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRJbnB1dENzc0NsYXNzZXMoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFkZGl0aW9uYWxDbGFzc2VzID0ge307XHJcbiAgICAgICAgICAgIGFkZGl0aW9uYWxDbGFzc2VzWydtaXNzaW5nLWZpZWxkJ10gPSAhaXNWYWxpZCgpO1xyXG4gICAgICAgICAgICBhZGRpdGlvbmFsQ2xhc3Nlc1tpbnB1dFNpemVDbGFzc10gPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gYWRkaXRpb25hbENsYXNzZXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRJbnB1dFNpemVDc3NDbGFzcygpIHtcclxuICAgICAgICAgICAgaWYgKGlucHV0U2l6ZSA9PT0gXCJzbWFsbFwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ3aWR0aC1zbVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpbnB1dFNpemUgPT09ICdtZWRpdW0nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3dpZHRoLW1kJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aHJvdyBgVGhlIGlucHV0IHNpemUgJHtpbnB1dFNpemV9IGRvZXMgbm90IGV4aXN0IGZvciBsYWJlbGVkIGlucHV0IGNvbXBvbmVudGA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBsYWJlbDogcHJvcHMubGFiZWwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZSxcclxuICAgICAgICAgICAgaXNWYWxpZCxcclxuICAgICAgICAgICAgaXNWaXNpYmxlLFxyXG4gICAgICAgICAgICBnZXRJbnB1dENzc0NsYXNzZXNcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZVxyXG59KTsiLCIvKiBlc2xpbnQtZGlzYWJsZSAqLyAvLyBBdXRvZ2VuZXJhdGVkIHdpdGggR3VscCAodGFzazogcGFyc2UtY29tcG9uZW50cy10ZW1wbGF0ZXMpXG4vLyBEb250IGNoYW5nZSB0aGlzIGZpbGUsIGNoYW5nZSB0aGUgLmh0bWwgZmlsZSBpbnN0ZWFkIGFuZCBydW4gR3VscFxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gXCJcXG4gPGRpdiBjbGFzcz1cXFwiY29sLWxnLTEyIGZvcm0tZ3JvdXBcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogcHJvcHMuaXNWaXNpYmxlXFxcIj5cXG4gICAgPGxhYmVsIGNsYXNzPVxcXCJjb2wtbGctMyBjb2wtbWQtMTIgY29udHJvbC1sYWJlbFxcXCIgZGF0YS1iaW5kPVxcXCJ0ZXh0OiBnZXRMYWJlbFRleHQoKVxcXCI+PC9sYWJlbD5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLWxnLTkgY29sLW1kLTEyXFxcIj5cXG4gICAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBjbGFzcz1cXFwiY29udHJvbC1kYXRhXFxcIiBkYXRhLWJpbmQ9XFxcInZhbHVlOiBwcm9wcy52YWx1ZSwgdmFsdWVVcGRhdGU6ICdhZnRlcmtleWRvd24nLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzczogZ2V0SW5wdXRDc3NDbGFzc2VzKCksIGF0dHI6IHsgbWF4bGVuZ3RoOiBwcm9wcy52YWx1ZU1heExlbmd0aCB9XFxcIi8+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ0ZXh0LXJlZFxcXCIgZGF0YS1iaW5kPVxcXCJ2aXNpYmxlOiBwcm9wcy5pc01pc3NpbmcsIHRleHQ6IHByb3BzLm1pc3NpbmdUZXh0XFxcIj48L2Rpdj5cXG4gICAgICAgIDwhLS0ga28gaWY6ICFwcm9wcy5pc1ZhbGlkKCkgLS0+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJuby1ob3Jpem9udGFsLXBhZGRpbmdcXFwiIGRhdGEtYmluZD1cXFwiIHRlbXBsYXRlOntuYW1lOid2YWxpZGF0aW9uX21lc3NhZ2UnLCBkYXRhOiB7ZmllbGQ6IHByb3BzLnZhbHVlfX1cXFwiPjwvZGl2PlxcbiAgICAgICAgPCEtLSAva28gLS0+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlwiO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYlhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWlJc0ltWnBiR1VpT2lKRE9pOVFjbTlxWldOMGN5OVRTVTFCTWk5T1JWUXZTVzVtY21GemRISjFZM1IxY21VdlNXNW1jbUZ6ZEhKMVkzUjFjbVV1UTI5eVpTNVhaV0l2VTJOeWFYQjBjeTl6Y21NdlkyOXRjRzl1Wlc1MGN5OXNZV0psYkdWa0xXbHVjSFYwTFhkcGRHZ3RiV2x6YzJsdVp5OXNZV0psYkdWa0xXbHVjSFYwTFhkcGRHZ3RiV2x6YzJsdVp5MTBaVzF3YkdGMFpTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiWFgwPSIsImltcG9ydCBsYWJlbGVkSW5wdXRXaXRoTWlzc2luZ1RlbXBsYXRlIGZyb20gJy4vbGFiZWxlZC1pbnB1dC13aXRoLW1pc3NpbmctdGVtcGxhdGUnO1xyXG5cclxua28uY29tcG9uZW50cy5yZWdpc3RlcignbGFiZWxlZC1pbnB1dC13aXRoLW1pc3NpbmcnLCB7XHJcbiAgICB2aWV3TW9kZWw6IChwYXJhbXMpID0+IHsgXHJcbiAgICAgICAgbGV0IHByb3BzID0gcGFyYW1zO1xyXG4gICAgICAgIHByb3BzLmlzVmlzaWJsZSA9IHByb3BzLmlzVmlzaWJsZSB8fCB0cnVlO1xyXG4gICAgICAgIHByb3BzLmlzTWlzc2luZyA9IHByb3BzLmlzTWlzc2luZyB8fCBmYWxzZTtcclxuICAgICAgICBwcm9wcy5taXNzaW5nVGV4dCA9IHByb3BzLm1pc3NpbmdUZXh0IHx8IFwiXCI7XHJcbiAgICAgICAgcHJvcHMuaW5wdXRTaXplID0gcHJvcHMuaW5wdXRTaXplIHx8IFwibWVkaXVtXCI7XHJcbiAgICAgICAgcHJvcHMuaXNNYW5kYXRvcnkgPSBwcm9wcy5pc01hbmRhdG9yeSB8fCBmYWxzZTtcclxuICAgICAgICBwcm9wcy5pc1ZhbGlkID0gcHJvcHMuaXNWYWxpZCB8fCAoKCkgPT4gdHJ1ZSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldExhYmVsVGV4dCgpIHtcclxuICAgICAgICAgICAgbGV0IGxhYmVsVGV4dCA9IHByb3BzLmxhYmVsO1xyXG4gICAgICAgICAgICBpZiAocHJvcHMuaXNNYW5kYXRvcnkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsYWJlbFRleHQgKyBcIipcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbGFiZWxUZXh0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0SW5wdXRDc3NDbGFzc2VzKCkge1xyXG4gICAgICAgICAgICBjb25zdCBhZGRpdGlvbmFsQ2xhc3NlcyA9IHt9O1xyXG4gICAgICAgICAgICBhZGRpdGlvbmFsQ2xhc3Nlc1snbWlzc2luZy1maWVsZCddID0gcHJvcHMuaXNNaXNzaW5nIHx8ICFwcm9wcy5pc1ZhbGlkKCk7XHJcbiAgICAgICAgICAgIGFkZGl0aW9uYWxDbGFzc2VzW2dldElucHV0U2l6ZUNzc0NsYXNzKCldID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIGFkZGl0aW9uYWxDbGFzc2VzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0SW5wdXRTaXplQ3NzQ2xhc3MoKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9wcy5pbnB1dFNpemUgPT09IFwic21hbGxcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwid2lkdGgtc21cIjtcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgaWYgKHByb3BzLmlucHV0U2l6ZSA9PT0gJ21lZGl1bScpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnd2lkdGgtbWQnOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRocm93IGBUaGUgaW5wdXQgc2l6ZSAke3Byb3BzLmlucHV0U2l6ZX0gZG9lcyBub3QgZXhpc3QgZm9yIGxhYmVsZWQgaW5wdXQgY29tcG9uZW50YDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHByb3BzOiBwcm9wcyxcclxuICAgICAgICAgICAgZ2V0SW5wdXRDc3NDbGFzc2VzLFxyXG4gICAgICAgICAgICBnZXRMYWJlbFRleHRcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHRlbXBsYXRlOiBsYWJlbGVkSW5wdXRXaXRoTWlzc2luZ1RlbXBsYXRlXHJcbn0pOyIsIi8qIGVzbGludC1kaXNhYmxlICovIC8vIEF1dG9nZW5lcmF0ZWQgd2l0aCBHdWxwICh0YXNrOiBwYXJzZS1jb21wb25lbnRzLXRlbXBsYXRlcylcbi8vIERvbnQgY2hhbmdlIHRoaXMgZmlsZSwgY2hhbmdlIHRoZSAuaHRtbCBmaWxlIGluc3RlYWQgYW5kIHJ1biBHdWxwXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBcIlxcbjxkaXYgY2xhc3M9XFxcImNvbC1sZy0xMiBmb3JtLWdyb3VwXFxcIiBkYXRhLWJpbmQ9XFxcInZpc2libGU6IHByb3BzLmlzVmlzaWJsZVxcXCI+XFxuICAgIDxsYWJlbCBjbGFzcz1cXFwiY29sLWxnLTMgY29sLW1kLTEyIGNvbnRyb2wtbGFiZWxcXFwiIGRhdGEtYmluZD1cXFwidGV4dDogcHJvcHMubGFiZWxcXFwiPjwvbGFiZWw+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC1sZy05IGNvbC1tZC0xMlxcXCI+XFxuICAgICAgICA8c2VsZWN0IGNsYXNzPVxcXCJ3aWR0aC1tZFxcXCIgZGF0YS1iaW5kPVxcXCJvcHRpb25zOiBwcm9wcy5vcHRpb25zLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1RleHQ6IHByb3BzLnRleHRQcm9wZXJ0eSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnNWYWx1ZTogcHJvcHMudmFsdWVQcm9wZXJ0eSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnNDYXB0aW9uOiBwcm9wcy5oaW50LFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzOiB7J21pc3NpbmctZmllbGQnOiBwcm9wcy5pc01pc3Npbmd9XFxcIj5cXG4gICAgICAgIDwvc2VsZWN0PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidGV4dC1yZWRcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogcHJvcHMuaXNNaXNzaW5nLCB0ZXh0OiBwcm9wcy5taXNzaW5nVGV4dFxcXCI+PC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlwiO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYlhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWlJc0ltWnBiR1VpT2lKRE9pOVFjbTlxWldOMGN5OVRTVTFCTWk5T1JWUXZTVzVtY21GemRISjFZM1IxY21VdlNXNW1jbUZ6ZEhKMVkzUjFjbVV1UTI5eVpTNVhaV0l2VTJOeWFYQjBjeTl6Y21NdlkyOXRjRzl1Wlc1MGN5OXNZV0psYkdWa0xXOXdkR2x2Ym5NdmJHRmlaV3hsWkMxdmNIUnBiMjV6TFhSbGJYQnNZWFJsTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sdGRmUT09IiwiaW1wb3J0IGxhYmVsZWRPcHRpb25zVGVtcGxhdGUgZnJvbSAnLi9sYWJlbGVkLW9wdGlvbnMtdGVtcGxhdGUnO1xyXG5cclxua28uY29tcG9uZW50cy5yZWdpc3RlcignbGFiZWxlZC1vcHRpb25zJywge1xyXG4gICAgdmlld01vZGVsOiAocHJvcHMpID0+IHsgcmV0dXJuIHtwcm9wc307IH0sXHJcblxyXG4gICAgdGVtcGxhdGU6IGxhYmVsZWRPcHRpb25zVGVtcGxhdGVcclxufSk7IiwiLyogZXNsaW50LWRpc2FibGUgKi8gLy8gQXV0b2dlbmVyYXRlZCB3aXRoIEd1bHAgKHRhc2s6IHBhcnNlLWNvbXBvbmVudHMtdGVtcGxhdGVzKVxuLy8gRG9udCBjaGFuZ2UgdGhpcyBmaWxlLCBjaGFuZ2UgdGhlIC5odG1sIGZpbGUgaW5zdGVhZCBhbmQgcnVuIEd1bHBcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFwiXFxuPGxhYmVsIGNsYXNzPVxcXCJ3aXRoLW1hcmdpbi1yaWd0aCBjbGlja2FibGVcXFwiIGRhdGEtYmluZD1cXFwidGV4dDogcHJvcHMubGFiZWxcXFwiPjwvbGFiZWw+XFxuPGRpdiBjbGFzcz1cXFwicmFkaW8tb3JhbmdlXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBwcm9wcy5vbkNsaWNrLCBjc3M6IHsgJ2NoZWNrZWQnOiBwcm9wcy5pc0NoZWNrZWQoKSB9XFxcIj5cXG4gICAgPGlucHV0IHR5cGU9XFxcInJhZGlvXFxcIiBjbGFzcz1cXFwid2l0aG91dC1vcGFjaXR5XFxcIj5cXG48L2Rpdj4gXCI7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJaUlzSW1acGJHVWlPaUpET2k5UWNtOXFaV04wY3k5VFNVMUJNaTlPUlZRdlNXNW1jbUZ6ZEhKMVkzUjFjbVV2U1c1bWNtRnpkSEoxWTNSMWNtVXVRMjl5WlM1WFpXSXZVMk55YVhCMGN5OXpjbU12WTI5dGNHOXVaVzUwY3k5c1lXSmxiR1ZrTFhKaFpHbHZMV0oxZEhSdmJpOXNZV0psYkdWa0xYSmhaR2x2TFdKMWRIUnZiaTEwWlcxd2JHRjBaUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYlhYMD0iLCJpbXBvcnQgbGFiZWxlZFJhZGlvQnV0dG9uVGVtcGxhdGUgZnJvbSAnLi9sYWJlbGVkLXJhZGlvLWJ1dHRvbi10ZW1wbGF0ZSc7XHJcblxyXG5rby5jb21wb25lbnRzLnJlZ2lzdGVyKCdsYWJlbGVkLXJhZGlvLWJ1dHRvbicsIHtcclxuICAgIHZpZXdNb2RlbDogKHBhcmFtcykgPT4geyByZXR1cm4geyBwcm9wczogcGFyYW1zIH07IH0sXHJcbiAgICB0ZW1wbGF0ZTogbGFiZWxlZFJhZGlvQnV0dG9uVGVtcGxhdGVcclxufSk7IiwiLyogZXNsaW50LWRpc2FibGUgKi8gLy8gQXV0b2dlbmVyYXRlZCB3aXRoIEd1bHAgKHRhc2s6IHBhcnNlLWNvbXBvbmVudHMtdGVtcGxhdGVzKVxuLy8gRG9udCBjaGFuZ2UgdGhpcyBmaWxlLCBjaGFuZ2UgdGhlIC5odG1sIGZpbGUgaW5zdGVhZCBhbmQgcnVuIEd1bHBcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFwiXFxuPGRpdiBjbGFzcz1cXFwiY29sLWxnLTEyIGZvcm0tZ3JvdXBcXFwiPlxcbiAgICA8bGFiZWwgY2xhc3M9XFxcImNvbC1sZy0zIGNvbC1tZC0xMiBjb250cm9sLWxhYmVsXFxcIiBkYXRhLWJpbmQ9XFxcInRleHQ6IHByb3BzLmxhYmVsXFxcIj48L2xhYmVsPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbGctOSBjb2wtbWQtMTJcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwid2lkdGgtbWRcXFwiPlxcbiAgICAgICAgICAgIDxzZWxlY3QgZGF0YS1iaW5kPVxcXCJvcHRpb25zU2VsZWN0MjogcHJvcHMub3B0aW9ucyxcXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNDYXB0aW9uOiBwcm9wcy5oaW50LFxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVTZWxlY3QyOiBwcm9wcy52YWx1ZSxcXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNUZXh0OiBwcm9wcy50ZXh0UHJvcGVydHksXFxuICAgICAgICAgICAgICAgICAgICBpc01pc3Npbmc6IHByb3BzLmlzTWlzc2luZ1xcXCI+PC9zZWxlY3Q+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidGV4dC1yZWRcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogcHJvcHMuaXNNaXNzaW5nLCB0ZXh0OiBwcm9wcy5taXNzaW5nVGV4dFxcXCI+PC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJaUlzSW1acGJHVWlPaUpET2k5UWNtOXFaV04wY3k5VFNVMUJNaTlPUlZRdlNXNW1jbUZ6ZEhKMVkzUjFjbVV2U1c1bWNtRnpkSEoxWTNSMWNtVXVRMjl5WlM1WFpXSXZVMk55YVhCMGN5OXpjbU12WTI5dGNHOXVaVzUwY3k5c1lXSmxiR1ZrTFhObFlYSmphR0ZpYkdVdGIzQjBhVzl1Y3k5c1lXSmxiR1ZrTFhObFlYSmphR0ZpYkdVdGIzQjBhVzl1Y3kxMFpXMXdiR0YwWlM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJYWDA9IiwiaW1wb3J0IGxhYmVsZWRTZWFyY2hhYmxlT3B0aW9uc1RlbXBsYXRlIGZyb20gJy4vbGFiZWxlZC1zZWFyY2hhYmxlLW9wdGlvbnMtdGVtcGxhdGUnO1xyXG5cclxua28uY29tcG9uZW50cy5yZWdpc3RlcignbGFiZWxlZC1zZWFyY2hhYmxlLW9wdGlvbnMnLCB7XHJcbiAgICB2aWV3TW9kZWw6IChwcm9wcykgPT4geyByZXR1cm4ge3Byb3BzfTsgfSxcclxuICAgIHRlbXBsYXRlOiBsYWJlbGVkU2VhcmNoYWJsZU9wdGlvbnNUZW1wbGF0ZVxyXG59KTsiLCIvKiBlc2xpbnQtZGlzYWJsZSAqLyAvLyBBdXRvZ2VuZXJhdGVkIHdpdGggR3VscCAodGFzazogcGFyc2UtY29tcG9uZW50cy10ZW1wbGF0ZXMpXG4vLyBEb250IGNoYW5nZSB0aGlzIGZpbGUsIGNoYW5nZSB0aGUgLmh0bWwgZmlsZSBpbnN0ZWFkIGFuZCBydW4gR3VscFxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gXCJcXG48ZGl2IGNsYXNzPVxcXCJtYXJnaW4gY29sLWxnLTEyIGNvbC1tZC0xMiBmb3JtLWdyb3VwXFxcIj5cXG4gICAgPGxhYmVsIGNsYXNzPVxcXCJjb2wtbGctMyBjb2wtbWQtNiBjb250cm9sLWxhYmVsXFxcIiBkYXRhLWJpbmQ9XFxcInRleHQ6IHByb3BzLmxhYmVsXFxcIj48L2xhYmVsPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbGctOSBjb2wtbWQtNlxcXCI+XFxuICAgICAgICA8bGFiZWwgY2xhc3M9XFxcImlubGluZS1jb250cm9sLWRhdGFcXFwiIGRhdGEtYmluZD1cXFwidGV4dDogcHJvcHMudmFsdWVcXFwiIC8+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlwiO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYlhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWlJc0ltWnBiR1VpT2lKRE9pOVFjbTlxWldOMGN5OVRTVTFCTWk5T1JWUXZTVzVtY21GemRISjFZM1IxY21VdlNXNW1jbUZ6ZEhKMVkzUjFjbVV1UTI5eVpTNVhaV0l2VTJOeWFYQjBjeTl6Y21NdlkyOXRjRzl1Wlc1MGN5OXNZV0psYkdWa0xYWmhiSFZsTDJ4aFltVnNaV1F0ZG1Gc2RXVXRkR1Z0Y0d4aGRHVXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2VzExOSIsImltcG9ydCBsYWJlbGVkVmFsdWVUZW1wbGF0ZSBmcm9tICcuL2xhYmVsZWQtdmFsdWUtdGVtcGxhdGUnO1xyXG5cclxua28uY29tcG9uZW50cy5yZWdpc3RlcignbGFiZWxlZC12YWx1ZScsIHtcclxuICAgIHZpZXdNb2RlbDogKHBhcmFtcykgPT4geyBcclxuICAgICAgICByZXR1cm4geyBwcm9wczogcGFyYW1zIH07XHJcbiAgICB9LFxyXG4gICAgdGVtcGxhdGU6IGxhYmVsZWRWYWx1ZVRlbXBsYXRlXHJcbn0pOyIsIi8qIGVzbGludC1kaXNhYmxlICovIC8vIEF1dG9nZW5lcmF0ZWQgd2l0aCBHdWxwICh0YXNrOiBwYXJzZS1jb21wb25lbnRzLXRlbXBsYXRlcylcbi8vIERvbnQgY2hhbmdlIHRoaXMgZmlsZSwgY2hhbmdlIHRoZSAuaHRtbCBmaWxlIGluc3RlYWQgYW5kIHJ1biBHdWxwXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBcIlxcbjxkaXYgY2xhc3M9XFxcImJveC10b29sc1xcXCI+XFxuICAgIDxmb3JtIGRhdGEtYmluZD1cXFwic3VibWl0OiBmdW5jdGlvbigpIHsgc2VhcmNoKCk7IH1cXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXAgaW5wdXQtZ3JvdXAtc20gcHVsbC1yaWdodFxcXCI+XFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGRhdGEtYmluZD1cXFwidmFsdWU6IHNlYXJjaFRlcm0sIGF0dHI6IHtwbGFjZWhvbGRlcjogbGFiZWxzLnNlYXJjaH1cXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwLWJ0blxcXCI+XFxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cXFwic3VibWl0XFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIj48aSBjbGFzcz1cXFwiZmEgZmEtc2VhcmNoXFxcIj48L2k+PC9idXR0b24+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9mb3JtPlxcbjwvZGl2PlwiO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYlhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWlJc0ltWnBiR1VpT2lKRE9pOVFjbTlxWldOMGN5OVRTVTFCTWk5T1JWUXZTVzVtY21GemRISjFZM1IxY21VdlNXNW1jbUZ6ZEhKMVkzUjFjbVV1UTI5eVpTNVhaV0l2VTJOeWFYQjBjeTl6Y21NdlkyOXRjRzl1Wlc1MGN5OXpaV0Z5WTJndFltOTRMM05sWVhKamFDMWliM2d0ZEdWdGNHeGhkR1V1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNlcxMTkiLCJpbXBvcnQgUmVnaXN0ZXJDb21wb25lbnQgZnJvbSBcIi4uLy4uL2NvbXBvbmVudFJlZ2lzdGVyXCI7XHJcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tIFwiLi9zZWFyY2gtYm94LXRlbXBsYXRlXCI7XHJcblxyXG5SZWdpc3RlckNvbXBvbmVudCgnc2VhcmNoLWJveCcsIHtcclxuICAgIHNjcmlwdDoge1xyXG4gICAgICAgIGNyZWF0ZTogKHByb3BzLCBkZXBlbmRlbmN5UHJvdmlkZXIpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdHJhbnNsYXRvciA9IGRlcGVuZGVuY3lQcm92aWRlci5nZXRUcmFuc2xhdG9yKCk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRMYWJlbHMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaDogdHJhbnNsYXRvci50cmFuc2xhdGUoXCJTaGFyZWREb21haW4uU2VhcmNoQnV0dG9uLlRleHRcIilcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hUZXJtOiBwcm9wcy5zZWFyY2hUZXJtLFxyXG4gICAgICAgICAgICAgICAgc2VhcmNoOiBwcm9wcy5vblNlYXJjaCxcclxuICAgICAgICAgICAgICAgIGxhYmVsczogZ2V0TGFiZWxzKClcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgdGVtcGxhdGU6IHRlbXBsYXRlXHJcbn0pOyIsIi8qIGVzbGludC1kaXNhYmxlICovIC8vIEF1dG9nZW5lcmF0ZWQgd2l0aCBHdWxwICh0YXNrOiBwYXJzZS1jb21wb25lbnRzLXRlbXBsYXRlcylcbi8vIERvbnQgY2hhbmdlIHRoaXMgZmlsZSwgY2hhbmdlIHRoZSAuaHRtbCBmaWxlIGluc3RlYWQgYW5kIHJ1biBHdWxwXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBcIlxcbjxkaXYgY2xhc3M9XFxcInJvdyBtYXJnaW5cXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ0YWItY29udGVudCB0YWJsZS1yZXNwb25zaXZlXFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInRhYi1wYW5lIGFjdGl2ZVxcXCI+XFxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzPVxcXCJ0YWJsZSB0YWJsZS1ob3ZlciB0YWJsZS1zdHJpcGVkXFxcIj5cXG4gICAgICAgICAgICAgICAgPHRoZWFkPlxcbiAgICAgICAgICAgICAgICAgICAgPHRyIGRhdGEtYmluZD1cXFwiZm9yZWFjaDogY29sdW1uc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGRhdGEtYmluZD1cXFwidGV4dDogbGFiZWwsIGF0dHI6IHsgY2xhc3M6ICd0ZXh0LScgKyBhbGlnbiB9XFxcIj48L3RoPlxcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cXG4gICAgICAgICAgICAgICAgPC90aGVhZD5cXG4gICAgICAgICAgICAgICAgPHRib2R5IGRhdGEtYmluZD1cXFwiZm9yZWFjaDoge2RhdGE6IHJvd3MsIGFzOiAncm93J31cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHRyIGRhdGEtYmluZD1cXFwiZm9yZWFjaDoge2RhdGE6ICRwYXJlbnQuY29sdW1ucywgYXM6ICdjb2wnfVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIGtvIGlmOiBjb2wudHlwZSAhPSAnZGF0ZScgLS0+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJ0ZXh0OiByb3dbY29sLm5hbWVdLCBhdHRyOiB7IGNsYXNzOiAndGV4dC0nICsgYWxpZ24gfVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gL2tvIC0tPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIGtvIGlmOiBjb2wudHlwZSA9PSAnZGF0ZScgLS0+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJzaG9ydERhdGVUZXh0OiByb3dbY29sLm5hbWVdLCBhdHRyOiB7IGNsYXNzOiAndGV4dC0nICsgYWxpZ24gfVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gL2tvIC0tPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxcbiAgICAgICAgICAgICAgICA8L3Rib2R5PlxcbiAgICAgICAgICAgIDwvdGFibGU+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJaUlzSW1acGJHVWlPaUpET2k5UWNtOXFaV04wY3k5VFNVMUJNaTlPUlZRdlNXNW1jbUZ6ZEhKMVkzUjFjbVV2U1c1bWNtRnpkSEoxWTNSMWNtVXVRMjl5WlM1WFpXSXZVMk55YVhCMGN5OXpjbU12WTI5dGNHOXVaVzUwY3k5elpXRnlZMmd0Y21WemRXeDBjeTEwWVdKc1pTOXpaV0Z5WTJndGNtVnpkV3gwY3kxMFlXSnNaUzEwWlcxd2JHRjBaUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYlhYMD0iLCJpbXBvcnQgUmVnaXN0ZXJDb21wb25lbnQgZnJvbSBcIi4uLy4uL2NvbXBvbmVudFJlZ2lzdGVyXCI7XHJcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3NlYXJjaC1yZXN1bHRzLXRhYmxlLXRlbXBsYXRlJztcclxuXHJcblJlZ2lzdGVyQ29tcG9uZW50KCdzZWFyY2gtcmVzdWx0cy10YWJsZScsIHtcclxuICAgIHNjcmlwdDogKHByb3BzKSA9PiB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29sdW1uczogcHJvcHMuY29sdW1ucyxcclxuICAgICAgICAgICAgcm93czogcHJvcHMucm93c1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdGVtcGxhdGU6IHRlbXBsYXRlXHJcbn0pOyIsIi8qIGVzbGludC1kaXNhYmxlICovIC8vIEF1dG9nZW5lcmF0ZWQgd2l0aCBHdWxwICh0YXNrOiBwYXJzZS1jb21wb25lbnRzLXRlbXBsYXRlcylcbi8vIERvbnQgY2hhbmdlIHRoaXMgZmlsZSwgY2hhbmdlIHRoZSAuaHRtbCBmaWxlIGluc3RlYWQgYW5kIHJ1biBHdWxwXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBcIlxcbjxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICA8IS0tIGtvIGlmOiBsYWJlbCAhPSB1bmRlZmluZWQgLS0+XFxuICAgIDxsYWJlbCBjbGFzcz1cXFwiY29sLXNtLTJcXFwiIGRhdGEtYmluZD1cXFwidGV4dDogbGFiZWxcXFwiPjwvbGFiZWw+XFxuICAgIDwhLS0gL2tvIC0tPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtc20tMTBcXFwiPlxcbiAgICAgICAgPHNlbGVjdCBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiBkYXRhLWJpbmQ9XFxcIm9wdGlvbnNTZWxlY3QyOiBvcHRpb25zLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnNDYXB0aW9uOiBwbGFjZWhvbGRlcixcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNlbGVjdDI6IHNlbGVjdGVkLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnNUZXh0OiAnZGVzY3JpcHRpb24nLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZTogZW5hYmxlZCxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bkNzc0NsYXNzOiAnYmlnZHJvcCdcXFwiPjwvc2VsZWN0PlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cIjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklpSXNJbVpwYkdVaU9pSkRPaTlRY205cVpXTjBjeTlUU1UxQk1pOU9SVlF2U1c1bWNtRnpkSEoxWTNSMWNtVXZTVzVtY21GemRISjFZM1IxY21VdVEyOXlaUzVYWldJdlUyTnlhWEIwY3k5emNtTXZZMjl0Y0c5dVpXNTBjeTl6WldGeVkyZ3RjMlZzWldOMEwzTmxZWEpqYUMxelpXeGxZM1F0ZEdWdGNHeGhkR1V1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNlcxMTkiLCJpbXBvcnQgQ29tcG9uZW50UmVnaXN0ZXIgZnJvbSAnLi4vLi4vY29tcG9uZW50UmVnaXN0ZXInO1xyXG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9zZWFyY2gtc2VsZWN0LXRlbXBsYXRlJztcclxuXHJcbkNvbXBvbmVudFJlZ2lzdGVyKCdzZWFyY2gtc2VsZWN0Jywge1xyXG4gICAgc2NyaXB0OiAocHJvcHMpID0+IHtcclxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIGxhYmVsOiBwcm9wcy5sYWJlbCB8fCB1bmRlZmluZWQsIFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogcHJvcHMucGxhY2Vob2xkZXIsIFxyXG4gICAgICAgICAgICBvcHRpb25zOiBwcm9wcy5vcHRpb25zLCBcclxuICAgICAgICAgICAgc2VsZWN0ZWQ6IHByb3BzLnNlbGVjdGVkLCBcclxuICAgICAgICAgICAgd2hlblNlbGVjdGVkOiBwcm9wcy53aGVuU2VsZWN0ZWQsIFxyXG4gICAgICAgICAgICBlbmFibGVFdmVudHM6IHByb3BzLmVuYWJsZUV2ZW50c1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0U2VsZWN0b3JTY3JpcHQocGFyYW1zKTtcclxuICAgIH0sXHJcbiAgICB0ZW1wbGF0ZTogdGVtcGxhdGVcclxufSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMaXN0U2VsZWN0b3JTY3JpcHQoe2xhYmVsLCBwbGFjZWhvbGRlciwgb3B0aW9ucywgc2VsZWN0ZWQsIHdoZW5TZWxlY3RlZCwgZW5hYmxlRXZlbnRzfSkge1xyXG4gICAgbGV0IHJlYWRPbmx5ID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XHJcbiAgICBsZXQgZW5hYmxlZCA9IGtvLmNvbXB1dGVkKCgpID0+IG9wdGlvbnMoKS5sZW5ndGggPiAwICYmICFyZWFkT25seSgpKTtcclxuICAgIGxldCBldmVudHNFbmFibGVkID0ga28udW53cmFwKGVuYWJsZUV2ZW50cykgfHwgdHJ1ZTtcclxuXHJcbiAgICBzZWxlY3RlZC5zdWJzY3JpYmUoZnVuY3Rpb24ob3B0aW9uU2VsZWN0ZWQpIHtcclxuICAgICAgICBpZiAoZXZlbnRzRW5hYmxlZCAmJiB3aGVuU2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgd2hlblNlbGVjdGVkKG9wdGlvblNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGxhYmVsLFxyXG4gICAgICAgIHBsYWNlaG9sZGVyLFxyXG4gICAgICAgIG9wdGlvbnMsXHJcbiAgICAgICAgZW5hYmxlZCxcclxuICAgICAgICBzZWxlY3RlZFxyXG4gICAgfTtcclxufSIsIi8qIGVzbGludC1kaXNhYmxlICovIC8vIEF1dG9nZW5lcmF0ZWQgd2l0aCBHdWxwICh0YXNrOiBwYXJzZS1jb21wb25lbnRzLXRlbXBsYXRlcylcbi8vIERvbnQgY2hhbmdlIHRoaXMgZmlsZSwgY2hhbmdlIHRoZSAuaHRtbCBmaWxlIGluc3RlYWQgYW5kIHJ1biBHdWxwXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBcIlxcbjxkaXYgY2xhc3M9XFxcInJvdyBib3gtYm9keSBtYXJnaW5cXFwiPlxcbiAgICA8IS0tIGtvIHdpdGg6ICRwYXJlbnQgLS0+XFxuICAgIDwhLS0ga28gdGVtcGxhdGU6IHsgbm9kZXM6ICRjb21wb25lbnRUZW1wbGF0ZU5vZGVzIH0gLS0+PCEtLSAva28gLS0+IFxcbiAgICA8IS0tIC9rbyAtLT5cXG48L2Rpdj4gIFwiO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYlhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWlJc0ltWnBiR1VpT2lKRE9pOVFjbTlxWldOMGN5OVRTVTFCTWk5T1JWUXZTVzVtY21GemRISjFZM1IxY21VdlNXNW1jbUZ6ZEhKMVkzUjFjbVV1UTI5eVpTNVhaV0l2VTJOeWFYQjBjeTl6Y21NdlkyOXRjRzl1Wlc1MGN5OXpaV04wYVc5dUxXSnZaSGt2YzJWamRHbHZiaTFpYjJSNUxYUmxiWEJzWVhSbExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHRkZlE9PSIsImltcG9ydCBzZWN0aW9uQm9keVRlbXBsYXRlIGZyb20gJy4vc2VjdGlvbi1ib2R5LXRlbXBsYXRlJztcclxuXHJcbmtvLmNvbXBvbmVudHMucmVnaXN0ZXIoJ3NlY3Rpb24tYm9keScsIHtcclxuICAgIHZpZXdNb2RlbDogKHByb3BzKSA9PiB7IFxyXG4gICAgICAgIHJldHVybiB7IHByb3BzIH07XHJcbiAgICB9LFxyXG4gICAgdGVtcGxhdGU6IHNlY3Rpb25Cb2R5VGVtcGxhdGVcclxufSk7IiwiLyogZXNsaW50LWRpc2FibGUgKi8gLy8gQXV0b2dlbmVyYXRlZCB3aXRoIEd1bHAgKHRhc2s6IHBhcnNlLWNvbXBvbmVudHMtdGVtcGxhdGVzKVxuLy8gRG9udCBjaGFuZ2UgdGhpcyBmaWxlLCBjaGFuZ2UgdGhlIC5odG1sIGZpbGUgaW5zdGVhZCBhbmQgcnVuIEd1bHBcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFwiXFxuPGRpdiBjbGFzcz1cXFwiYm94IGJveC1kZXRhaWxcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJib3gtaGVhZGVyXFxcIj5cXG4gICAgICAgIDxoMyBjbGFzcz1cXFwiYm94LXRpdGxlIHdpZHRoLWZ1bGxcXFwiPlxcbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1jb2xsYXBzZSBwdWxsLXJpZ2h0XFxcIiBkYXRhLXRvZ2dsZT1cXFwiY29sbGFwc2VcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IHRvZ2dsZVZpc2liaWxpdHksIGF0dHI6IHsgJ2RhdGEtdGFyZ2V0JzogJyMnICsgY29sbGFwc2FibGVFbGVtZW50SWQgfVxcXCI+XFxuICAgICAgICAgICAgICAgIDxpIGRhdGEtYmluZD1cXFwiIGNzczogeyAnZmEtbWludXMnOiAhY29sbGFwc2VkKCksICdmYS1wbHVzJzogY29sbGFwc2VkIH1cXFwiIGNsYXNzPVxcXCJmYVxcXCI+PC9pPlxcbiAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJ0ZXh0OiB0aXRsZVxcXCI+PC9kaXY+XFxuICAgICAgICA8L2gzPlxcbiAgICA8L2Rpdj5cXG4gICAgPCEtLSBrbyB3aXRoOiAkcGFyZW50IC0tPlxcbiAgICA8IS0tIGtvIHRlbXBsYXRlOiB7IG5vZGVzOiAkY29tcG9uZW50VGVtcGxhdGVOb2RlcyB9IC0tPjwhLS0gL2tvIC0tPiBcXG4gICAgPCEtLSAva28gLS0+IFxcbjwvZGl2PlwiO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYlhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWlJc0ltWnBiR1VpT2lKRE9pOVFjbTlxWldOMGN5OVRTVTFCTWk5T1JWUXZTVzVtY21GemRISjFZM1IxY21VdlNXNW1jbUZ6ZEhKMVkzUjFjbVV1UTI5eVpTNVhaV0l2VTJOeWFYQjBjeTl6Y21NdlkyOXRjRzl1Wlc1MGN5OXpaV04wYVc5dUxXSnZlQzFqYjJ4c1lYQnpZV0pzWlM5elpXTjBhVzl1TFdKdmVDMWpiMnhzWVhCellXSnNaUzEwWlcxd2JHRjBaUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYlhYMD0iLCJpbXBvcnQgc2VjdGlvbkJveENvbGxhcHNhYmxlVGVtcGxhdGUgZnJvbSAnLi9zZWN0aW9uLWJveC1jb2xsYXBzYWJsZS10ZW1wbGF0ZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTZWN0aW9uQm94Vm0ocGFyYW1zKSB7XHJcbiAgICBjb25zdCB0aXRsZSA9IHBhcmFtcy50aXRsZTtcclxuICAgIGNvbnN0IGNvbGxhcHNhYmxlRWxlbWVudElkID0gcGFyYW1zLmNvbGxhcHNhYmxlRWxlbWVudElkO1xyXG4gICAgY29uc3Qgd2hlbkV4cGFuZGVkID0gcGFyYW1zLndoZW5FeHBhbmRlZDsgXHJcbiAgICBjb25zdCBjb2xsYXBzZWQgPSBrby5vYnNlcnZhYmxlKHRydWUpO1xyXG5cclxuICAgIGZ1bmN0aW9uIHRvZ2dsZVZpc2liaWxpdHkoKXtcclxuICAgICAgICBpZiAoY29sbGFwc2VkKCkpIHtcclxuICAgICAgICAgICAgY29sbGFwc2VkKGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKHdoZW5FeHBhbmRlZCkgeyB3aGVuRXhwYW5kZWQoKTsgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSAgICAgICBcclxuICAgICAgICBjb2xsYXBzZWQodHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBjb2xsYXBzZWQsXHJcbiAgICAgICAgY29sbGFwc2FibGVFbGVtZW50SWQsXHJcbiAgICAgICAgdG9nZ2xlVmlzaWJpbGl0eSxcclxuICAgICAgICB0aXRsZVxyXG4gICAgfTtcclxufVxyXG5cclxua28uY29tcG9uZW50cy5yZWdpc3Rlcignc2VjdGlvbi1ib3gtY29sbGFwc2FibGUnLCB7XHJcbiAgICB2aWV3TW9kZWw6IFNlY3Rpb25Cb3hWbSxcclxuICAgIHRlbXBsYXRlOiBzZWN0aW9uQm94Q29sbGFwc2FibGVUZW1wbGF0ZVxyXG59KTsiLCIvKiBlc2xpbnQtZGlzYWJsZSAqLyAvLyBBdXRvZ2VuZXJhdGVkIHdpdGggR3VscCAodGFzazogcGFyc2UtY29tcG9uZW50cy10ZW1wbGF0ZXMpXG4vLyBEb250IGNoYW5nZSB0aGlzIGZpbGUsIGNoYW5nZSB0aGUgLmh0bWwgZmlsZSBpbnN0ZWFkIGFuZCBydW4gR3VscFxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gXCJcXG48ZGl2IGNsYXNzPVxcXCJib3ggYm94LWRldGFpbFxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImJveC1oZWFkZXJcXFwiPlxcbiAgICAgICAgPGgzIGNsYXNzPVxcXCJib3gtdGl0bGVcXFwiIGRhdGEtYmluZD1cXFwidGV4dDogcHJvcHMudGl0bGVcXFwiPjwvaDM+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGRhdGEtYmluZD1cXFwiaWY6IHByb3BzLmlzU2hvd24sIHZpc2libGU6IHByb3BzLmlzU2hvd25cXFwiIHN0eWxlPVxcXCJkaXNwbGF5OiBub25lXFxcIj5cXG4gICAgICAgIDwhLS0ga28gd2l0aDogJHBhcmVudCAtLT5cXG4gICAgICAgIDwhLS0ga28gdGVtcGxhdGU6IHsgbm9kZXM6ICRjb21wb25lbnRUZW1wbGF0ZU5vZGVzIH0gLS0+PCEtLSAva28gLS0+IFxcbiAgICAgICAgPCEtLSAva28gLS0+IFxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cIjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklpSXNJbVpwYkdVaU9pSkRPaTlRY205cVpXTjBjeTlUU1UxQk1pOU9SVlF2U1c1bWNtRnpkSEoxWTNSMWNtVXZTVzVtY21GemRISjFZM1IxY21VdVEyOXlaUzVYWldJdlUyTnlhWEIwY3k5emNtTXZZMjl0Y0c5dVpXNTBjeTl6WldOMGFXOXVMV0p2ZUM5elpXTjBhVzl1TFdKdmVDMTBaVzF3YkdGMFpTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiWFgwPSIsImltcG9ydCBzZWN0aW9uQm94VGVtcGxhdGUgZnJvbSAnLi9zZWN0aW9uLWJveC10ZW1wbGF0ZSc7XHJcblxyXG5rby5jb21wb25lbnRzLnJlZ2lzdGVyKCdzZWN0aW9uLWJveCcsIHtcclxuICAgIHZpZXdNb2RlbDogKHByb3BzKSA9PiB7IHJldHVybiB7IHByb3BzIH07IH0sXHJcbiAgICB0ZW1wbGF0ZTogc2VjdGlvbkJveFRlbXBsYXRlXHJcbn0pOyIsIi8qIGVzbGludC1kaXNhYmxlICovIC8vIEF1dG9nZW5lcmF0ZWQgd2l0aCBHdWxwICh0YXNrOiBwYXJzZS1jb21wb25lbnRzLXRlbXBsYXRlcylcbi8vIERvbnQgY2hhbmdlIHRoaXMgZmlsZSwgY2hhbmdlIHRoZSAuaHRtbCBmaWxlIGluc3RlYWQgYW5kIHJ1biBHdWxwXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBcIlxcbjxkaXYgY2xhc3M9XFxcImJveC1mb290ZXJcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJwdWxsLXJpZ2h0XFxcIj5cXG4gICAgICAgIDwhLS0ga28gd2l0aDogJHBhcmVudCAtLT5cXG4gICAgICAgIDwhLS0ga28gdGVtcGxhdGU6IHsgbm9kZXM6ICRjb21wb25lbnRUZW1wbGF0ZU5vZGVzIH0gLS0+PCEtLSAva28gLS0+IFxcbiAgICAgICAgPCEtLSAva28gLS0+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlwiO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYlhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWlJc0ltWnBiR1VpT2lKRE9pOVFjbTlxWldOMGN5OVRTVTFCTWk5T1JWUXZTVzVtY21GemRISjFZM1IxY21VdlNXNW1jbUZ6ZEhKMVkzUjFjbVV1UTI5eVpTNVhaV0l2VTJOeWFYQjBjeTl6Y21NdlkyOXRjRzl1Wlc1MGN5OXpaV04wYVc5dUxXWnZiM1JsY2k5elpXTjBhVzl1TFdadmIzUmxjaTEwWlcxd2JHRjBaUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYlhYMD0iLCJpbXBvcnQgc2VjdGlvbkZvb3RlclRlbXBsYXRlIGZyb20gJy4vc2VjdGlvbi1mb290ZXItdGVtcGxhdGUnO1xyXG5cclxua28uY29tcG9uZW50cy5yZWdpc3Rlcignc2VjdGlvbi1mb290ZXInLCB7XHJcbiAgICB2aWV3TW9kZWw6IChwcm9wcykgPT4geyBcclxuICAgICAgICByZXR1cm4geyBwcm9wcyB9O1xyXG4gICAgfSxcclxuICAgIHRlbXBsYXRlOiBzZWN0aW9uRm9vdGVyVGVtcGxhdGVcclxufSk7Iiwia28uY29tcG9uZW50cy5yZWdpc3Rlcignc3Bpbm5lcicsIHtcclxuICAgIHZpZXdNb2RlbDoge1xyXG4gICAgICAgIGNyZWF0ZVZpZXdNb2RlbDogZnVuY3Rpb24gKHBhcmFtcywgY29tcG9uZW50SW5mbykge1xyXG4gICAgICAgICAgICBjb21wb25lbnRJbmZvLmVsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nOyBcclxuICAgICAgICAgICAgY29tcG9uZW50SW5mby5lbGVtZW50LmNsYXNzTmFtZSArPSAnIG92ZXJsYXknO1xyXG5cclxuICAgICAgICAgICAgcGFyYW1zLnNob3cuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudEluZm8uZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gcGFyYW1zLnNob3coKSA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHRlbXBsYXRlOiBgPGkgY2xhc3M9XCJmYSBmYS1yZWZyZXNoIGZhLXNwaW5cIj48L2k+YFxyXG59KTsiLCIvKiBlc2xpbnQtZGlzYWJsZSAqLyAvLyBBdXRvZ2VuZXJhdGVkIHdpdGggR3VscCAodGFzazogcGFyc2UtY29tcG9uZW50cy10ZW1wbGF0ZXMpXG4vLyBEb250IGNoYW5nZSB0aGlzIGZpbGUsIGNoYW5nZSB0aGUgLmh0bWwgZmlsZSBpbnN0ZWFkIGFuZCBydW4gR3VscFxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gXCJcXG48aSBkYXRhLWJpbmQ9XFxcInZpc2libGU6IGlzVmlzaWJsZSwgdGV4dDogdHJhbnNsYXRvci50cmFuc2xhdGUoJ1NoYXJlZERvbWFpbi5Ob1Jlc3VsdHMnKVxcXCIgXFxuICAgIGNsYXNzPVxcXCJuby1yZXN1bHRzLXRleHRcXFwiPlxcbjwvaT5cIjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklpSXNJbVpwYkdVaU9pSkRPaTlRY205cVpXTjBjeTlUU1UxQk1pOU9SVlF2U1c1bWNtRnpkSEoxWTNSMWNtVXZTVzVtY21GemRISjFZM1IxY21VdVEyOXlaUzVYWldJdlUyTnlhWEIwY3k5emNtTXZZMjl0Y0c5dVpXNTBjeTkwWVdKc1pTMWxiWEIwZVMxamIyNTBaVzUwTDNSaFlteGxMV1Z0Y0hSNUxXTnZiblJsYm5RdGRHVnRjR3hoZEdVdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXMTE5IiwiaW1wb3J0IHRhYmxlRW1wdHlDb250ZW50VGVtcGxhdGUgZnJvbSAnLi90YWJsZS1lbXB0eS1jb250ZW50LXRlbXBsYXRlJztcclxuXHJcbmtvLmNvbXBvbmVudHMucmVnaXN0ZXIoJ3RhYmxlLWVtcHR5LWNvbnRlbnQnLCB7XHJcbiAgICB2aWV3TW9kZWw6IGZ1bmN0aW9uKHBhcmFtcykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHRyYW5zbGF0b3I6IHBhcmFtcy50cmFuc2xhdG9yLFxyXG4gICAgICAgICAgICBpc1Zpc2libGU6IHBhcmFtcy5pc1Zpc2libGVcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICB0ZW1wbGF0ZTogdGFibGVFbXB0eUNvbnRlbnRUZW1wbGF0ZVxyXG59KTsiLCLvu79pbXBvcnQgVHJhbnNsYXRpb25TZXJ2aWNlIGZyb20gXCIuL3RyYW5zbGF0aW9uU2VydmljZVwiO1xyXG5pbXBvcnQgVmFsaWRhdG9yIGZyb20gXCIuL3ZhbGlkYXRvclwiO1xyXG5pbXBvcnQgeyBEaWFsb2dQdWJsaXNoZXIgfSBmcm9tIFwiLi9kaWFsb2dQdWJsaXNoZXJcIjtcclxuaW1wb3J0IEVycm9yRGlhbG9nUHVibGlzaGVyIGZyb20gXCIuL2Vycm9yRGlhbG9nUHVibGlzaGVyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEZXBlbmRlbmN5UHJvdmlkZXIoKSB7XHJcbiAgICBsZXQgdHJhbnNsYXRvckluc3RhbmNlO1xyXG4gICAgbGV0IHJlc3RDbGllbnRJbnN0YW5jZTtcclxuICAgIGxldCBlcnJvckRpYWxvZ1B1Ymxpc2hlcjtcclxuICAgIGxldCBiYXNlVXJsSW5zdGFuY2U7XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlVHJhbnNsYXRvcih0cmFuc2xhdGlvbnMsIGN1bHR1cmVOYW1lKSB7XHJcbiAgICAgICAgdHJhbnNsYXRvckluc3RhbmNlID0gVHJhbnNsYXRpb25TZXJ2aWNlKHRyYW5zbGF0aW9ucywgY3VsdHVyZU5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZUVycm9yRGlhbG9nUHVibGlzaGVyKGVycm9yTWVzc2FnZXMpe1xyXG4gICAgICAgIGVycm9yRGlhbG9nUHVibGlzaGVyID0gRXJyb3JEaWFsb2dQdWJsaXNoZXIoZ2V0RGlhbG9nUHVibGlzaGVyKCksIGVycm9yTWVzc2FnZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldEVycm9yRGlhbG9nUHVibGlzaGVyKCl7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yRGlhbG9nUHVibGlzaGVyO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNldFJlc3RDbGllbnQocmVzdENsaWVudCkge1xyXG4gICAgICAgIHJlc3RDbGllbnRJbnN0YW5jZSA9IHJlc3RDbGllbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0UmVzdENsaWVudCgpIHtcclxuICAgICAgICByZXR1cm4gcmVzdENsaWVudEluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldFRyYW5zbGF0b3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRyYW5zbGF0b3JJbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRWYWxpZGF0b3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIFZhbGlkYXRvcih0cmFuc2xhdG9ySW5zdGFuY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldERpYWxvZ1B1Ymxpc2hlcigpIHtcclxuICAgICAgICByZXR1cm4gRGlhbG9nUHVibGlzaGVyO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0QmFzZVVybCgpIHtcclxuICAgICAgICByZXR1cm4gYmFzZVVybEluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNldEJhc2VVcmwoYmFzZVVybCkge1xyXG4gICAgICAgIGJhc2VVcmxJbnN0YW5jZSA9IGJhc2VVcmw7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBjcmVhdGVUcmFuc2xhdG9yLFxyXG4gICAgICAgIGdldFRyYW5zbGF0b3IsXHJcbiAgICAgICAgc2V0UmVzdENsaWVudCxcclxuICAgICAgICBnZXRSZXN0Q2xpZW50LFxyXG4gICAgICAgIGdldFZhbGlkYXRvcixcclxuICAgICAgICBnZXREaWFsb2dQdWJsaXNoZXIsXHJcbiAgICAgICAgY3JlYXRlRXJyb3JEaWFsb2dQdWJsaXNoZXIsXHJcbiAgICAgICAgZ2V0RXJyb3JEaWFsb2dQdWJsaXNoZXIsXHJcbiAgICAgICAgZ2V0QmFzZVVybCxcclxuICAgICAgICBzZXRCYXNlVXJsXHJcbiAgICB9O1xyXG59IiwiaW1wb3J0IERlcGVuZGVuY3lQcm92aWRlciBmcm9tICcuL2RlcGVuZGVuY3lQcm92aWRlcic7XHJcblxyXG5leHBvcnQgbGV0IERlcGVuZGVuY3lQcm92aWRlckZhY3RvcnkgPSAoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIGxldCBkZXBlbmRlbmN5UHJvdmlkZXI7XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgIGlmICghZGVwZW5kZW5jeVByb3ZpZGVyKSB7XHJcbiAgICAgICAgICAgIGRlcGVuZGVuY3lQcm92aWRlciA9IERlcGVuZGVuY3lQcm92aWRlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGVwZW5kZW5jeVByb3ZpZGVyO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ2V0XHJcbiAgICB9O1xyXG59KSgpOyIsImV4cG9ydCBsZXQgRGlhbG9nUHVibGlzaGVyID0gKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgbGV0IG9uU3VjY2Vzc0NhbGxiYWNrID0gKCkgPT4ge307XHJcbiAgICBsZXQgb25XYXJuaW5nQ2FsbGJhY2sgPSAoKSA9PiB7fTtcclxuICAgIGxldCBvbkVycm9yQ2FsbGJhY2sgPSAoKSA9PiB7fTtcclxuICAgIGxldCBjb25maXJtYXRpb25DYWxsYmFjayA9ICgpID0+IHt9O1xyXG5cclxuICAgIGZ1bmN0aW9uIHN1Y2Nlc3Moe21lc3NhZ2UsIGh0bWxUZW1wbGF0ZX0pIHtcclxuICAgICAgICBvblN1Y2Nlc3NDYWxsYmFjayh7bWVzc2FnZSwgaHRtbFRlbXBsYXRlfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gb25TdWNjZXNzKGNhbGxiYWNrKXtcclxuICAgICAgICBvblN1Y2Nlc3NDYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG9uV2FybmluZyhjYWxsYmFjayl7XHJcbiAgICAgICAgb25XYXJuaW5nQ2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB3YXJuaW5nKHt0aXRsZSwgbWVzc2FnZSwgaHRtbFRlbXBsYXRlfSl7XHJcbiAgICAgICAgb25XYXJuaW5nQ2FsbGJhY2soe3RpdGxlLCBtZXNzYWdlLCBodG1sVGVtcGxhdGV9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBvbkVycm9yKGNhbGxiYWNrKXtcclxuICAgICAgICBvbkVycm9yQ2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBlcnJvcih7dGl0bGUsIG1lc3NhZ2UsIGh0bWxUZW1wbGF0ZX0pe1xyXG4gICAgICAgIG9uRXJyb3JDYWxsYmFjayh7dGl0bGUsIG1lc3NhZ2UsIGh0bWxUZW1wbGF0ZX0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG9uQ29uZmlybWF0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgY29uZmlybWF0aW9uQ2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjb25maXJtYXRpb24oe3RpdGxlLCBtZXNzYWdlLCBjYWxsYmFja30pIHtcclxuICAgICAgICBjb25maXJtYXRpb25DYWxsYmFjayh7dGl0bGUsIG1lc3NhZ2UsIGNhbGxiYWNrfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzdWNjZXNzLFxyXG4gICAgICAgIG9uU3VjY2VzcyxcclxuICAgICAgICB3YXJuaW5nLFxyXG4gICAgICAgIG9uV2FybmluZyxcclxuICAgICAgICBlcnJvcixcclxuICAgICAgICBvbkVycm9yLFxyXG4gICAgICAgIG9uQ29uZmlybWF0aW9uLFxyXG4gICAgICAgIGNvbmZpcm1hdGlvblxyXG4gICAgfTtcclxufSkoKTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBFcnJvck1lc3NhZ2VzRXh0cmFjdG9yKG1lc3NhZ2VzLCBodG1sVGVtcGxhdGVzLCB3aGVuTm90Rm91bmRNZXNzYWdlKSB7XHJcblxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdEVycm9yRGV0YWlsKHhocikge1xyXG4gICAgICAgIGlmICh4aHIgJiYgeGhyLnJlc3BvbnNlVGV4dCAhPSAnJykge1xyXG4gICAgICAgICAgICByZXR1cm4gJC5wYXJzZUpTT04oeGhyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7fTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleHRyYWN0TWVzc2FnZUZvcihlcnJvclR5cGUsIGVycm9yRGV0YWlsKSB7XHJcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSBtZXNzYWdlc1tlcnJvclR5cGVdO1xyXG4gICAgICAgIGlmICghbWVzc2FnZSkgcmV0dXJuIHdoZW5Ob3RGb3VuZE1lc3NhZ2UoKTtcclxuICAgICAgICByZXR1cm4gbWVzc2FnZShleHRyYWN0RXJyb3JEZXRhaWwoZXJyb3JEZXRhaWwpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleHRyYWN0SHRtbEZvcihlcnJvclR5cGUsIGVycm9yRGV0YWlsKSB7XHJcbiAgICAgICAgbGV0IHRlbXBsYXRlID0gaHRtbFRlbXBsYXRlc1tlcnJvclR5cGVdO1xyXG4gICAgICAgIGlmICghdGVtcGxhdGUpIHJldHVybiBudWxsO1xyXG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZShleHRyYWN0RXJyb3JEZXRhaWwoZXJyb3JEZXRhaWwpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGV4dHJhY3RNZXNzYWdlRm9yLFxyXG4gICAgICAgIGV4dHJhY3RIdG1sRm9yXHJcbiAgICB9O1xyXG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRXJyb3JEaWFsb2dQdWJsaXNoZXIoZGlhbG9nUHVibGlzaGVyLCBlcnJvck1lc3NhZ2VzKSB7XHJcblxyXG4gICAgZnVuY3Rpb24gcHVibGlzaChlcnJvclR5cGUsIHRpdGxlLCB4aHIsIGVycm9yQ2FsbGJhY2ssIGhhbmRsZXJUeXBlKSB7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGVycm9yTWVzc2FnZXMuZm9yKGVycm9yVHlwZSwgeGhyKTtcclxuICAgICAgICBjb25zdCBodG1sVGVtcGxhdGVOYW1lID0gZXJyb3JNZXNzYWdlcy5odG1sVGVtcGxhdGVGb3IoZXJyb3JUeXBlLCB4aHIpO1xyXG4gICAgICAgIGlmKGhhbmRsZXJUeXBlID09ICd3YXJuaW5nJykge1xyXG4gICAgICAgICAgICBkaWFsb2dQdWJsaXNoZXIud2FybmluZyh7dGl0bGUsIG1lc3NhZ2UsIGh0bWxUZW1wbGF0ZU5hbWV9KTsgICAgICAgICAgICBcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkaWFsb2dQdWJsaXNoZXIuZXJyb3Ioe3RpdGxlLCBtZXNzYWdlLCBodG1sVGVtcGxhdGVOYW1lfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChlcnJvckNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBwdWJsaXNoXHJcbiAgICB9O1xyXG59Iiwi77u/a28uY29tcG9uZW50cy5yZWdpc3RlcignYWN0aW9uLWJ1dHRvbicsIHtcclxuICAgIHZpZXdNb2RlbDoge1xyXG4gICAgICAgIGNyZWF0ZVZpZXdNb2RlbDogZnVuY3Rpb24ocGFyYW1zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBtYWluSWNvbjogcGFyYW1zLm1haW5JY29uIHx8ICdmYS1lbGxpcHNpcy1oJyxcclxuICAgICAgICAgICAgICAgIHZpc2libGU6IHBhcmFtcy52aXNpYmxlIHx8IHRydWUsXHJcbiAgICAgICAgICAgICAgICBlbmFibGU6IHBhcmFtcy5lbmFibGUgfHwgdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGFjdGlvbnM6IHBhcmFtcy5hY3Rpb25zXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHRlbXBsYXRlOlxyXG4gICAgICAgIGA8c3BhbiBjbGFzcz1cImRyb3Bkb3duXCI+XHJcbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IGRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIiBkYXRhLWJpbmQ9XCJlbmFibGU6IGVuYWJsZSwgdmlzaWJsZTogdmlzaWJsZVwiPlxcXHJcbiAgICAgICAgICAgICAgICA8c3Bhbj48aSBjbGFzcz1cImZhXCIgZGF0YS1iaW5kPVwiY3NzOiBtYWluSWNvblwiPjwvaT48L3NwYW4+XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51IHB1bGwtcmlnaHRcIiBkYXRhLWJpbmQ9XCJmb3JlYWNoOiBhY3Rpb25zXCI+XFxcclxuICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPVwiI1wiIGRhdGEtYmluZD1cImNsaWNrOiBhY3Rpb24sIHRleHQ6IHRpdGxlLCB2aXNpYmxlOiBpc1Zpc2libGVcIj48L2E+PC9saT5cXFxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgIDwvc3Bhbj5gXHJcbn0pO1xyXG4iLCJrby5iaW5kaW5nSGFuZGxlcnMuYWlkYWRhdGVyYW5nZXBpY2tlciA9IHtcclxuICAgIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MpIHtcclxuICAgICAgICBjb25zdCBzdGFydERhdGUgPSB2YWx1ZUFjY2Vzc29yKCk7XHJcbiAgICAgICAgY29uc3QgZW5kRGF0ZSA9ICBhbGxCaW5kaW5ncy5nZXQoXCJlbmREYXRlXCIpO1xyXG4gICAgICAgIGNvbnN0IG1pbkRhdGUgPSAgYWxsQmluZGluZ3MuZ2V0KFwibWluRGF0ZVwiKSB8fCBtb21lbnQoKTtcclxuICAgICAgICBjb25zdCBmb3JtYXRQYXR0ZXJuID0gYWxsQmluZGluZ3MuZ2V0KFwiZm9ybWF0UGF0dGVyblwiKTsgICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGFwcGx5TGFiZWwgPSBhbGxCaW5kaW5ncy5nZXQoXCJhcHBseUxhYmVsXCIpIHx8IFwiQXBwbHlcIjtcclxuICAgICAgICBjb25zdCBjYW5jZWxMYWJlbCA9IGFsbEJpbmRpbmdzLmdldChcImNhbmNlbExhYmVsXCIpIHx8IFwiQ2FuY2VsXCI7ICAgICAgICBcclxuICAgICAgICBsZXQgc0RhdGUgPSBtb21lbnQoc3RhcnREYXRlKCkpO1xyXG4gICAgICAgIGxldCBlRGF0ZSA9IG1vbWVudChlbmREYXRlKCkpO1xyXG5cclxuICAgICAgICAkKGVsZW1lbnQpLmRhdGVyYW5nZXBpY2tlcih7XHJcbiAgICAgICAgICAgIHRpbWVQaWNrZXI6IHRydWUsXHJcbiAgICAgICAgICAgIHRpbWVQaWNrZXIyNEhvdXI6IHRydWUsXHJcbiAgICAgICAgICAgIHRpbWVQaWNrZXJJbmNyZW1lbnQ6IDE1LFxyXG4gICAgICAgICAgICBsb2NhbGU6IHsgXHJcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IGZvcm1hdFBhdHRlcm4sXHJcbiAgICAgICAgICAgICAgICBhcHBseUxhYmVsOiBhcHBseUxhYmVsLFxyXG4gICAgICAgICAgICAgICAgY2FuY2VsTGFiZWw6IGNhbmNlbExhYmVsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0YXJ0RGF0ZTogc0RhdGUsXHJcbiAgICAgICAgICAgIGVuZERhdGU6IGVEYXRlLFxyXG4gICAgICAgICAgICBidXR0b25DbGFzc2VzOiBcImJ0blwiLFxyXG4gICAgICAgICAgICBhcHBseUNsYXNzOiBcImJ0bi1wcmltYXJ5XCIsXHJcbiAgICAgICAgICAgIG1pbkRhdGU6IG1pbkRhdGVcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICAkKGVsZW1lbnQpLm9uKCdhcHBseS5kYXRlcmFuZ2VwaWNrZXInLCBmdW5jdGlvbihldiwgcGlja2VyKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0RGF0ZSh0b0lTTzg2MDFGb3JtYXQocGlja2VyLnN0YXJ0RGF0ZSkpO1xyXG4gICAgICAgICAgICBlbmREYXRlKHRvSVNPODYwMUZvcm1hdChwaWNrZXIuZW5kRGF0ZSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZ1bmN0aW9uIHRvSVNPODYwMUZvcm1hdChkYXRlKSB7XHJcbiAgICAgICAgICAgIGlmICghZGF0ZSkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIHJldHVybiBtb21lbnQoZGF0ZSwgJ0wnKS50b0lTT1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTsiLCLvu79rby5jb21wb25lbnRzLnJlZ2lzdGVyKCdjYWxsb3V0Jywge1xyXG4gICAgdmlld01vZGVsOiB7XHJcbiAgICAgICAgY3JlYXRlVmlld01vZGVsOiBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNob3dDYWxsb3V0ID0gcGFyYW1zLnZpc2libGU7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBwYXJhbXMudGV4dDtcclxuICAgICAgICAgICAgY29uc3QgaHRtbFRlbXBsYXRlID0gcGFyYW1zLmh0bWwgPyBwYXJhbXMuaHRtbC50ZW1wbGF0ZSA6IGtvLm9ic2VydmFibGUoKTtcclxuICAgICAgICAgICAgY29uc3QgaHRtbERhdGEgPSBwYXJhbXMuaHRtbCA/IHBhcmFtcy5odG1sLmRhdGEgOiBrby5vYnNlcnZhYmxlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvblJlc3VsdCA9IHBhcmFtcy5hY3Rpb25SZXN1bHQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhbGxvdXRTdHlsZSA9IGtvLm9ic2VydmFibGUoKTtcclxuICAgICAgICAgICAgY29uc3QgaWNvblN0eWxlID0ga28ub2JzZXJ2YWJsZSgpO1xyXG4gICAgICAgICAgICBsZXQgYWN0aXZlVGltZW91dDtcclxuICAgICAgICAgICAgbGV0IGNsb3NlQ2FsbGJhY2sgPSAoKSA9PiB7fTtcclxuXHJcbiAgICAgICAgICAgIGFjdGlvblJlc3VsdC5zdWJzY3JpYmUoKCkgPT4gc2V0U3R5bGUoKSk7XHJcblxyXG4gICAgICAgICAgICBzZXRUZW1wbGF0ZSgpO1xyXG4gICAgICAgICAgICBzZXRTdHlsZSgpO1xyXG4gICAgICAgICAgICBjb25maWdUaW1lb3V0KHBhcmFtcy50aW1lb3V0KTtcclxuICAgICAgICAgICAgaWYgKHBhcmFtcy5jbG9zZUNhbGxiYWNrKSBjbG9zZUNhbGxiYWNrID0gcGFyYW1zLmNsb3NlQ2FsbGJhY2s7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBjbG9zZUNhbGxvdXQoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlVGltZW91dCkgY2xlYXJUaW1lb3V0KGFjdGl2ZVRpbWVvdXQpOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHNob3dDYWxsb3V0KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGNsb3NlQ2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZGV0ZXJtaW5lQ3NzQnlSZXN1bHQoYWN0aW9uUmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3R5bGVzTWFwID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJzogeyBhbGVydDogXCJhbGVydCBhbGVydC1zdWNjZXNzXCIsIGljb246IFwiaWNvbiBmYSBmYS1jaGVja1wiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgJ2luZm8nOiB7IGFsZXJ0OiBcImFsZXJ0IGFsZXJ0LWluZm9cIiwgaWNvbjogXCJpY29uIGZhIGZhLWluZm9cIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgICd3YXJuaW5nJzogeyBhbGVydDogXCJhbGVydCBhbGVydC13YXJuaW5nXCIsIGljb246IFwiaWNvbiBmYSBmYS13YXJuaW5nXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICAnZXJyb3InOiB7IGFsZXJ0OiBcImFsZXJ0IGFsZXJ0LWVycm9yXCIsIGljb246IFwiaWNvbiBmYSBmYS1iYW5cIiB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZXNNYXBbYWN0aW9uUmVzdWx0XSB8fCBzdHlsZXNNYXBbJ2luZm8nXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gY29uZmlnVGltZW91dCh0aW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICBzaG93Q2FsbG91dC5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaG93Q2FsbG91dCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmVUaW1lb3V0KSBjbGVhclRpbWVvdXQoYWN0aXZlVGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxvdXRUaW1lb3V0ID0ga28udW53cmFwKHRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbG91dFRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGNsb3NlQ2FsbG91dCwga28udW53cmFwKHRpbWVvdXQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVRpbWVvdXQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldFRlbXBsYXRlKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFodG1sVGVtcGxhdGUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWxUZW1wbGF0ZShcImRlZmF1bHRfdGVtcGxhdGVcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaHRtbFRlbXBsYXRlKCkgPT0gXCJkZWZhdWx0X3RlbXBsYXRlXCIpe1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWxEYXRhKHtjbG9zZUNhbGxvdXQsIGljb25TdHlsZSwgbWVzc2FnZX0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldFN0eWxlKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBkZXRlcm1pbmVDc3NCeVJlc3VsdChhY3Rpb25SZXN1bHQoKSk7XHJcbiAgICAgICAgICAgICAgICBjYWxsb3V0U3R5bGUoc3R5bGUuYWxlcnQpO1xyXG4gICAgICAgICAgICAgICAgaWNvblN0eWxlKHN0eWxlLmljb24pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4geyBzaG93Q2FsbG91dCwgbWVzc2FnZSwgY2FsbG91dFN0eWxlLCBpY29uU3R5bGUsIGNsb3NlQ2FsbG91dCwgaHRtbFRlbXBsYXRlLCBodG1sRGF0YSB9O1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgdGVtcGxhdGU6XHJcbiAgICAnPGRpdiBjbGFzcz1cImNvbC1sZy01IGNvbC14cy02IGNhbGxvdXQtY29udGFpbmVyXCIgZGF0YS1iaW5kPVwiZmFkZVZpc2libGU6IHNob3dDYWxsb3V0XCI+XFxcclxuICAgICAgICA8ZGl2IGlkPVwiY2FsbG91dFwiIGRhdGEtYmluZD1cImZhZGVWaXNpYmxlOiBzaG93Q2FsbG91dCwgY3NzOiBjYWxsb3V0U3R5bGUsIHRlbXBsYXRlOiB7IG5hbWU6IGh0bWxUZW1wbGF0ZSwgZGF0YTogaHRtbERhdGEgfVwiPjwvZGl2PlxcXHJcbiAgICA8L2Rpdj5cXFxyXG4gICAgPHNjcmlwdCB0eXBlPVwidGV4dC9odG1sXCIgaWQ9XCJkZWZhdWx0X3RlbXBsYXRlXCI+XFxcclxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJjbG9zZVwiIGRhdGEtYmluZD1cImNsaWNrOiBjbG9zZUNhbGxvdXRcIj7DlzwvYnV0dG9uPlxcXHJcbiAgICAgICAgICAgIDxzcGFuIGRhdGEtYmluZD1cInRleHQ6IG1lc3NhZ2VcIj48L3NwYW4+XFxcclxuICAgIDwvc2NyaXB0PidcclxufSk7Iiwia28uY29tcG9uZW50cy5yZWdpc3RlcignY29sdW1uY2hlY2tib3gnLCB7XHJcbiAgICB2aWV3TW9kZWw6IHtcclxuICAgICAgICBjcmVhdGVWaWV3TW9kZWw6IGZ1bmN0aW9uKHBhcmFtcykge1xyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3QgPSBwYXJhbXMuc2VsZWN0O1xyXG4gICAgICAgICAgICBjb25zdCB1bnNlbGVjdCA9IHBhcmFtcy51bnNlbGVjdDtcclxuICAgICAgICAgICAgY29uc3QgY2hlY2tlZCA9IHBhcmFtcy5jaGVja2VkO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY2hlY2tlZC5zdWJzY3JpYmUoKCk9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tlZCgpKSBzZWxlY3QoKTtcclxuICAgICAgICAgICAgICAgIGlmICghY2hlY2tlZCgpKSB1bnNlbGVjdCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiB7IGNoZWNrZWQgfTtcclxuICAgICAgICB9IFxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgdGVtcGxhdGU6XHJcbiAgICAnPGlucHV0IGlkPVwiY29sdW1uQ2hlY2tlclwiIHR5cGU9XCJjaGVja2JveFwiIGRhdGEtYmluZD1cImNoZWNrZWQ6IGNoZWNrZWRcIj4nXHJcbn0pOyIsIu+7v2tvLmJpbmRpbmdIYW5kbGVycy5kYXRlcGlja2VyID0ge1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzQWNjZXNzb3IpIHtcclxuICAgICAgICBjb25zdCBzZWxlY3RlZERhdGUgPSBnZXRJbml0aWFsVmFsdWUoKTtcclxuICAgICAgICBjb25zdCBlbmREYXRlID0gYWxsQmluZGluZ3NBY2Nlc3Nvci5nZXQoXCJlbmREYXRlXCIpO1xyXG4gICAgICAgIGNvbnN0IGxhbmd1YWdlID0gYWxsQmluZGluZ3NBY2Nlc3Nvci5nZXQoXCJsYW5ndWFnZVwiKTtcclxuICAgICAgICBjb25zdCBzdGFydFZpZXcgPSBnZXRTdGFydFZpZXcoKTtcclxuICAgICAgICBjb25zdCBzdGFydERhdGUgPSBhbGxCaW5kaW5nc0FjY2Vzc29yLmdldChcInN0YXJ0RGF0ZVwiKTtcclxuICAgICAgICBjb25zdCBjbGVhckJ1dHRvbiA9IGFsbEJpbmRpbmdzQWNjZXNzb3IuZ2V0KFwiY2xlYXJCdXR0b25cIik7XHJcbiAgICAgICAgbGV0IHVwZGF0aW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgICQoZWxlbWVudCkuZGF0ZXBpY2tlcih7XHJcbiAgICAgICAgICAgIGZvcm1hdDoge1xyXG4gICAgICAgICAgICAgICAgdG9EaXNwbGF5OiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQoZGF0ZSkuZm9ybWF0KCdMJyk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdG9WYWx1ZTogZnVuY3Rpb24gKGRhdGVBc1N0cmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGUgPSBtb21lbnQoZGF0ZUFzU3RyaW5nLCBcIkxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGUuaXNWYWxpZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRlLnRvRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZUFzU3RyaW5nID8gbW9tZW50KGRhdGVBc1N0cmluZykudG9EYXRlKCkgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbmREYXRlOiBlbmREYXRlLFxyXG4gICAgICAgICAgICBsYW5ndWFnZTogbGFuZ3VhZ2UsXHJcbiAgICAgICAgICAgIHN0YXJ0Vmlldzogc3RhcnRWaWV3LFxyXG4gICAgICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSxcclxuICAgICAgICAgICAgY2xlYXJCdG46IGNsZWFyQnV0dG9uLFxyXG4gICAgICAgICAgICBhdXRvY2xvc2U6IHRydWUsXHJcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiBcImJvdHRvbSBhdXRvXCJcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJChlbGVtZW50KS5vbihcImNoYW5nZURhdGVcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB1cGRhdGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIGxldCBkYXRlID0gJChlbGVtZW50KS5kYXRlcGlja2VyKCdnZXRGb3JtYXR0ZWREYXRlJyk7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkRGF0ZSh0b0lTTzg2MDFGb3JtYXQoZGF0ZSkpO1xyXG4gICAgICAgICAgICB1cGRhdGluZyA9IGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKGVsZW1lbnQpLmFkZENsYXNzKFwiZGF0ZXBpY2tlclwiKTtcclxuXHJcbiAgICAgICAgc2VsZWN0ZWREYXRlLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh1cGRhdGluZykgcmV0dXJuO1xyXG4gICAgICAgICAgICB1cGRhdGVEYXRlUGlja2VyVmFsdWUoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0SW5pdGlhbFZhbHVlKCkge1xyXG4gICAgICAgICAgICBsZXQgaW5pdGlhbERhdGUgPSB2YWx1ZUFjY2Vzc29yKCk7XHJcbiAgICAgICAgICAgIGlmIChpbml0aWFsRGF0ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdGlhbERhdGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhbGxCaW5kaW5nc0FjY2Vzc29yLmdldChcImluaXRpYWxWYWx1ZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGluaXRpYWxWYWx1ZSA9IGFsbEJpbmRpbmdzQWNjZXNzb3IuZ2V0KFwiaW5pdGlhbFZhbHVlXCIpO1xyXG4gICAgICAgICAgICAgICAgaW5pdGlhbERhdGUoaW5pdGlhbFZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaW5pdGlhbERhdGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRTdGFydFZpZXcoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IERBWV9WSUVXID0gMDtcclxuICAgICAgICAgICAgaWYgKGFsbEJpbmRpbmdzQWNjZXNzb3IuZ2V0KFwic3RhcnRWaWV3XCIpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxsQmluZGluZ3NBY2Nlc3Nvci5nZXQoXCJzdGFydFZpZXdcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIERBWV9WSUVXO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlRGF0ZVBpY2tlclZhbHVlKCkge1xyXG4gICAgICAgICAgICAkKGVsZW1lbnQpLmRhdGVwaWNrZXIoJ3VwZGF0ZScsIHNlbGVjdGVkRGF0ZSgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHRvSVNPODYwMUZvcm1hdChkYXRlKSB7XHJcbiAgICAgICAgICAgIGlmICghZGF0ZSkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIHJldHVybiBtb21lbnQoZGF0ZSwgJ0wnKS50b0lTT1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdXBkYXRlRGF0ZVBpY2tlclZhbHVlKCk7XHJcblxyXG4gICAgICAgIGtvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5hZGREaXNwb3NlQ2FsbGJhY2soZWxlbWVudCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkKGVsZW1lbnQpLmRhdGVwaWNrZXIoJ2Rlc3Ryb3knKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufTsiLCJrby5iaW5kaW5nSGFuZGxlcnMuZGF0ZXRpbWVwaWNrZXIgPSB7XHJcbiAgICBpbml0OiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3Nvcikge1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkRGF0ZSA9IGdldEluaXRpYWxWYWx1ZSgpO1xyXG4gICAgICAgIGNvbnN0IGVuZERhdGUgPSBhbGxCaW5kaW5nc0FjY2Vzc29yLmdldChcImVuZERhdGVcIik7XHJcbiAgICAgICAgY29uc3Qgc3RhcnREYXRlID0gYWxsQmluZGluZ3NBY2Nlc3Nvci5nZXQoXCJzdGFydERhdGVcIik7XHJcbiAgICAgICAgY29uc3Qgdmlld01vZGUgPSBnZXRWaWV3TW9kZSgpO1xyXG4gICAgICAgIGNvbnN0IGNsZWFyQnV0dG9uID0gYWxsQmluZGluZ3NBY2Nlc3Nvci5nZXQoXCJjbGVhckJ1dHRvblwiKTtcclxuICAgICAgICBjb25zdCBpbmxpbmUgPSBhbGxCaW5kaW5nc0FjY2Vzc29yLmdldChcImlubGluZVwiKSA/IGFsbEJpbmRpbmdzQWNjZXNzb3IuZ2V0KFwiaW5saW5lXCIpIDogZmFsc2U7XHJcbiAgICAgICAgbGV0IHN1YnNjcmlwdGlvblRvU3RhcnREYXRlO1xyXG5cclxuICAgICAgICBzdWJzY3JpYmVUb1N0YXJ0RGF0ZUNoYW5nZXMoKTtcclxuXHJcbiAgICAgICAgJChlbGVtZW50KS5kYXRldGltZXBpY2tlcih7XHJcbiAgICAgICAgICAgIGZvcm1hdDogJ0wnLFxyXG4gICAgICAgICAgICBsb2NhbGU6IG1vbWVudC5sb2NhbGUoKSxcclxuICAgICAgICAgICAgbWluRGF0ZToga28udW53cmFwKHN0YXJ0RGF0ZSksXHJcbiAgICAgICAgICAgIG1heERhdGU6IGVuZERhdGUsXHJcbiAgICAgICAgICAgIHZpZXdNb2RlOiB2aWV3TW9kZSxcclxuICAgICAgICAgICAgc2hvd0NsZWFyOiBjbGVhckJ1dHRvbixcclxuICAgICAgICAgICAgc2hvd0Nsb3NlOiBjbGVhckJ1dHRvbixcclxuICAgICAgICAgICAgaW5saW5lOiBpbmxpbmUsXHJcbiAgICAgICAgICAgIGtlZXBPcGVuOiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKGVsZW1lbnQpLmRhdGEoXCJEYXRlVGltZVBpY2tlclwiKS5kYXRlKG1vbWVudChzZWxlY3RlZERhdGUoKSkpO1xyXG5cclxuICAgICAgICBrby51dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcihlbGVtZW50LCBcImRwLmNoYW5nZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgaWYgKGtvLmlzT2JzZXJ2YWJsZShzZWxlY3RlZERhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZERhdGUodG9JU084NjAxRm9ybWF0KGV2ZW50LmRhdGUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBrby51dGlscy5kb21Ob2RlRGlzcG9zYWwuYWRkRGlzcG9zZUNhbGxiYWNrKGVsZW1lbnQsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0IHBpY2tlciA9ICQoZWxlbWVudCkuZGF0YShcIkRhdGVUaW1lUGlja2VyXCIpO1xyXG4gICAgICAgICAgICBpZiAocGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICBwaWNrZXIuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb25Ub1N0YXJ0RGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uVG9TdGFydERhdGUuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHN1YnNjcmliZVRvU3RhcnREYXRlQ2hhbmdlcygpIHtcclxuICAgICAgICAgICAgaWYgKGtvLmlzT2JzZXJ2YWJsZShzdGFydERhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25Ub1N0YXJ0RGF0ZSA9IHN0YXJ0RGF0ZS5zdWJzY3JpYmUoKCk9PntcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtaW5EYXRlID0gbW9tZW50KHN0YXJ0RGF0ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXhEYXRlID0gbW9tZW50KCQoZWxlbWVudCkuZGF0YShcIkRhdGVUaW1lUGlja2VyXCIpLm1heERhdGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1pbkRhdGUuaXNTYW1lT3JCZWZvcmUobWF4RGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5kYXRhKFwiRGF0ZVRpbWVQaWNrZXJcIikubWluRGF0ZShtaW5EYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0SW5pdGlhbFZhbHVlKCkge1xyXG4gICAgICAgICAgICBsZXQgaW5pdGlhbERhdGUgPSB2YWx1ZUFjY2Vzc29yKCk7XHJcbiAgICAgICAgICAgIGlmIChpbml0aWFsRGF0ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdGlhbERhdGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhbGxCaW5kaW5nc0FjY2Vzc29yLmdldChcImluaXRpYWxWYWx1ZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGluaXRpYWxWYWx1ZSA9IGFsbEJpbmRpbmdzQWNjZXNzb3IuZ2V0KFwiaW5pdGlhbFZhbHVlXCIpO1xyXG4gICAgICAgICAgICAgICAgaW5pdGlhbERhdGUoaW5pdGlhbFZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaW5pdGlhbERhdGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRWaWV3TW9kZSgpIHtcclxuICAgICAgICAgICAgY29uc3QgREFZX1ZJRVcgPSAnZGF5cyc7XHJcbiAgICAgICAgICAgIGlmIChhbGxCaW5kaW5nc0FjY2Vzc29yLmdldChcInZpZXdNb2RlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxsQmluZGluZ3NBY2Nlc3Nvci5nZXQoXCJ2aWV3TW9kZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gREFZX1ZJRVc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB0b0lTTzg2MDFGb3JtYXQoZGF0ZSkge1xyXG4gICAgICAgICAgICBpZiAoIWRhdGUpIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XHJcbiAgICAgICAgbGV0IGRhdGVQaWNrZXIgPSAkKGVsZW1lbnQpLmRhdGEoXCJEYXRlVGltZVBpY2tlclwiKTtcclxuICAgICAgICBpZiAoZGF0ZVBpY2tlcikge1xyXG4gICAgICAgICAgICBsZXQga29EYXRlID0gdmFsdWVBY2Nlc3NvcigpO1xyXG4gICAgICAgICAgICBpZiAoa29EYXRlKCkpIHtcclxuICAgICAgICAgICAgICAgIGRhdGVQaWNrZXIuZGF0ZShtb21lbnQoa29EYXRlKCkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgZGF0ZVBpY2tlci5jbGVhcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59OyIsIu+7v2tvLmJpbmRpbmdIYW5kbGVycy5ldmVuUm93U3R5bGUgPSB7XHJcbiAgICBpbml0OiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xyXG5cclxuICAgICAgICBsZXQgcm93SW5kZXggPSAkKGVsZW1lbnQpLmluZGV4KCk7XHJcbiAgICAgICAgbGV0IGNzc0NsYXNzTmFtZSA9IGtvLnVud3JhcCh2YWx1ZUFjY2Vzc29yKCkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChyb3dJbmRleCAlIDIgIT09IDApIHtcclxuICAgICAgICAgICAgJChlbGVtZW50KS5hZGRDbGFzcyhjc3NDbGFzc05hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTsiLCJrby5leHRlbmRlcnMudXBwZXJjYXNlID0gZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgY29uc3QgdXBwZXJjYXNlT2JzZXJ2YWJsZSA9IGtvLmNvbXB1dGVkKHtcclxuICAgICAgICByZWFkOiB0YXJnZXQsXHJcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gdGFyZ2V0KCk7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZVRvV3JpdGU7XHJcblxyXG4gICAgICAgICAgICBpZiAobmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlVG9Xcml0ZSA9IG5ld1ZhbHVlLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZVRvV3JpdGUgIT09IGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldCh2YWx1ZVRvV3JpdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdXBwZXJjYXNlT2JzZXJ2YWJsZSh0YXJnZXQoKSk7XHJcblxyXG4gICAgcmV0dXJuIHVwcGVyY2FzZU9ic2VydmFibGU7XHJcbn07Iiwia28uYmluZGluZ0hhbmRsZXJzLmZhZGVWaXNpYmxlID0ge1xyXG4gICAgaW5pdDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVBY2Nlc3NvcigpO1xyXG4gICAgICAgICQoZWxlbWVudCkudG9nZ2xlKGtvLnVud3JhcCh2YWx1ZSkpOyBcclxuICAgIH0sXHJcbiAgICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlQWNjZXNzb3IoKTtcclxuICAgICAgICBrby51bndyYXAodmFsdWUpID8gJChlbGVtZW50KS5mYWRlSW4oKSA6ICQoZWxlbWVudCkuZmFkZU91dCgpO1xyXG4gICAgfVxyXG59OyIsIu+7v2tvLmJpbmRpbmdIYW5kbGVycy5mZWF0dXJlVHJhY2sgPSB7XHJcbiAgICBpbml0OiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5nc0FjY2Vzc29yKSB7XHJcbiAgICAgICAgbGV0IGRhdGFUb1RyYWNrID0gdmFsdWVBY2Nlc3NvcigpO1xyXG4gICAgICAgIGxldCB0cmFja2VyVXJsID0gYWxsQmluZGluZ3NBY2Nlc3Nvci5nZXQoXCJ1cmxcIik7XHJcblxyXG4gICAgICAgIGNvbnN0IGlucHV0VHlwZSA9IGdldElucHV0VHlwZShlbGVtZW50KTtcclxuICAgICAgICBzd2l0Y2ggKGlucHV0VHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwidGV4dFwiOlxyXG4gICAgICAgICAgICAgICAgdHJhY2tPbkVudGVyS2V5KCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInNlbGVjdFwiOlxyXG4gICAgICAgICAgICAgICAgdHJhY2tPbkNoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0cmFja09uQ2xpY2soKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldElucHV0VHlwZShlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LnRhZ05hbWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgP1xyXG4gICAgICAgICAgICAgICAgJChlbGVtZW50KS5wcm9wKFwidHlwZVwiKS50b0xvd2VyQ2FzZSgpIDpcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdHJhY2tPbkVudGVyS2V5KCkge1xyXG4gICAgICAgICAgICBjb25zdCBJTlRSTyA9IDEzO1xyXG4gICAgICAgICAgICAkKGVsZW1lbnQpLmtleXByZXNzKChldnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChldnQud2hpY2ggPT0gSU5UUk8pIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFjaygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHRyYWNrT25DaGFuZ2UoKSB7XHJcbiAgICAgICAgICAgICQoZWxlbWVudCkuY2hhbmdlKHRyYWNrKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHRyYWNrT25DbGljaygpIHtcclxuICAgICAgICAgICAgJChlbGVtZW50KS5jbGljayh0cmFjayk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB0cmFjaygpIHtcclxuICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgIHVybDogdHJhY2tlclVybCxcclxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIixcclxuICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KGRhdGFUb1RyYWNrKSxcclxuICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07Iiwi77u/a28uYmluZGluZ0hhbmRsZXJzLmltYWdlV2l0aFByZWxvYWQgPSB7XHJcbiAgICBpbml0OiAoZWxlbWVudCwgdmFsdWVBY2Nlc3NvcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSB2YWx1ZUFjY2Vzc29yKCk7XHJcbiAgICAgICAgY29uc3QgdXJsID0gcGFyYW1ldGVycy51cmw7XHJcbiAgICAgICAgY29uc3QgaW1nQ3NzID0gcGFyYW1ldGVycy5pbWdDc3M7XHJcbiAgICAgICAgY29uc3Qgc3Bpbm5lckNzcyA9IHBhcmFtZXRlcnMuc3Bpbm5lckNzcyB8fCBcImZhIGZhLXJlZnJlc2ggZmEtc3BpbiBmYS0yeCB0ZXh0LWNlbnRlclwiO1xyXG4gICAgICAgIFxyXG4gICAgICAgICQoZWxlbWVudCkuYWRkQ2xhc3MoJ3RleHQtY2VudGVyJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3Qgc3Bpbm5lciA9IGNyZWF0ZVNwaW5uZXIoc3Bpbm5lckNzcyk7XHJcbiAgICAgICAgY29uc3QgaW1nID0gY3JlYXRlSW1nKGltZ0Nzcyk7XHJcblxyXG4gICAgICAgIGltZy5sb2FkKCgpPT4gc3Bpbm5lci5oaWRlKCkpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVTcGlubmVyKHNwaW5uZXJDc3MpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3Bpbm5lciA9ICQoJzxpPjwvaT4nKTtcclxuICAgICAgICAgICAgc3Bpbm5lci5hZGRDbGFzcyhzcGlubmVyQ3NzKTtcclxuICAgICAgICAgICAgc3Bpbm5lci5jc3MoJ21hcmdpbi10b3AnLCAnMTAlJyk7XHJcbiAgICAgICAgICAgIHNwaW5uZXIuY3NzKCdtYXJnaW4tYm90dG9tJywgJzEwJScpO1xyXG4gICAgICAgICAgICAkKGVsZW1lbnQpLmFwcGVuZChzcGlubmVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHNwaW5uZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVJbWcoaW1nQ3NzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGltZ0VsZW1lbnQgPSAkKCc8aW1nPicpO1xyXG4gICAgICAgICAgICAkKGVsZW1lbnQpLmFwcGVuZChpbWdFbGVtZW50KTtcclxuICAgICAgICAgICAgaW1nRWxlbWVudC5hdHRyKCdzcmMnLCB1cmwpO1xyXG4gICAgICAgICAgICBpbWdFbGVtZW50LmFkZENsYXNzKGltZ0Nzcyk7XHJcbiAgICAgICAgICAgIHJldHVybiBpbWdFbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTsiLCLvu79leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBLbm9ja291dEV4dGVuc2lvbk51bWJlcihrbykge1xyXG4gICAgZnVuY3Rpb24gZGVmaW5lS25vY2tvdXROdW1iZXJCaW5kaW5nKGN1bHR1cmUpIHtcclxuXHJcbiAgICAgICAga28uYmluZGluZ0hhbmRsZXJzLm51bWJlclRleHQgPSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZTogKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZXRGb3JtYXROdW1iZXIoZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0Rm9ybWF0TnVtYmVyKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0ga28udW53cmFwKHZhbHVlQWNjZXNzb3IoKSk7XHJcbiAgICAgICAgICAgIGxldCBtaW5pbXVtRGlnaXRzID0gYWxsQmluZGluZ3MuZ2V0KFwibWluaW11bURpZ2l0c1wiKTtcclxuICAgICAgICAgICAgaWYgKG1pbmltdW1EaWdpdHMgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBtaW5pbXVtRGlnaXRzID0gMjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBudW1iZXJBc1RleHQgPSB2YWx1ZSAhPSB1bmRlZmluZWQgPyB2YWx1ZS50b0xvY2FsZVN0cmluZyhjdWx0dXJlLm5hbWUsIHsgbWluaW11bUZyYWN0aW9uRGlnaXRzOiBtaW5pbXVtRGlnaXRzLCBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDIgfSkgOiAnJztcclxuICAgICAgICAgICAga28udXRpbHMuc2V0VGV4dENvbnRlbnQoZWxlbWVudCwgbnVtYmVyQXNUZXh0KTsgICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkZWZpbmVLbm9ja291dE51bWJlckJpbmRpbmdcclxuICAgIH07XHJcblxyXG59Iiwi77u/ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmaW5lUmVtb3RlU2VsZWN0MihjdWx0dXJlKSB7XHJcblxyXG4gICAgY29uc3QgY3VsdHVyZVNlbGVjdDIgPSBjdWx0dXJlO1xyXG5cclxuICAgIGZ1bmN0aW9uIGluaXQoZWxlbWVudCx2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5ncyl7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRWYWx1ZSA9IGFsbEJpbmRpbmdzLmdldChcInZhbHVlU2VsZWN0MlwiKTtcclxuICAgICAgICBjb25zdCB2aXNpYmxlcyA9IGFsbEJpbmRpbmdzLmdldChcInZpc2libGVzU2VsZWN0MlwiKTtcclxuICAgICAgICBjb25zdCBhbGxvd0NsZWFyID0gYWxsQmluZGluZ3MuZ2V0KFwiYWxsb3dDbGVhclNlbGVjdDJcIikgfHwgZmFsc2U7XHJcbiAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSBhbGxCaW5kaW5ncy5nZXQoXCJwbGFjZWhvbGRlclNlbGVjdDJcIikgfHwgXCJcIjtcclxuICAgICAgICBjb25zdCBtaW5pbXVtSW5wdXRMZW5ndGggPSBhbGxCaW5kaW5ncy5nZXQoXCJtaW5pbXVtSW5wdXRMZW5ndGhTZWxlY3QyXCIpIHx8IFwiXCI7XHJcbiAgICAgICAgY29uc3QgdGVtcGxhdGVTZWxlY3QyID0gYWxsQmluZGluZ3MuZ2V0KFwidGVtcGxhdGVTZWxlY3QyXCIpO1xyXG5cclxuICAgICAgICBjcmVhdGVSZW1vdGVTZWxlY3QyKCk7XHJcbiAgICAgICAgc3Vic2NyaWJlVG9TZWxlY3QyQ2hhbmdlc1RvTm90aWZ5Vmlld01vZGVsKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaGFja1ByZXZlbnRPcGVuT25DbGVhcihlbGVtZW50KTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlUmVtb3RlU2VsZWN0MigpIHtcclxuICAgICAgICAgICAgbGV0IHJlbW90ZVVybCA9IGtvLnVud3JhcCh2YWx1ZUFjY2Vzc29yKCkpO1xyXG4gICAgICAgICAgICBjb25zdCBvcHRpb25zVGV4dCA9IGFsbEJpbmRpbmdzLmdldChcIm9wdGlvbnNUZXh0XCIpO1xyXG5cclxuICAgICAgICAgICAgJChlbGVtZW50KS5zZWxlY3QyKHtcclxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcclxuICAgICAgICAgICAgICAgIGFsbG93Q2xlYXI6IGFsbG93Q2xlYXIsXHJcbiAgICAgICAgICAgICAgICBtaW5pbXVtSW5wdXRMZW5ndGg6IG1pbmltdW1JbnB1dExlbmd0aCxcclxuICAgICAgICAgICAgICAgIGVzY2FwZU1hcmt1cDogZnVuY3Rpb24obWFya3VwKSB7IHJldHVybiBtYXJrdXA7IH0sXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVJlc3VsdDogKG9wdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb24ubG9hZGluZykgcmV0dXJuIG9wdGlvbi50ZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZVNlbGVjdDIgPyByZW5kZXJUZW1wbGF0ZSh0ZW1wbGF0ZVNlbGVjdDIsIG9wdGlvbikgOiBvcHRpb24udGV4dDtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBsYW5ndWFnZTogY3VsdHVyZVNlbGVjdDIsXHJcbiAgICAgICAgICAgICAgICBhamF4OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiByZW1vdGVVcmwsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDI1MCxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiAocGFyYW1zKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHF1ZXJ5OiBwYXJhbXMudGVybSB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1Jlc3VsdHM6IChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2aXNpYmxlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga28udXRpbHMuYXJyYXlQdXNoQWxsKHZpc2libGVzLCBkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0czogXy5tYXAoZGF0YSwgKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGVzY3JpcHRpb24gPSBpdGVtLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiA9IG9wdGlvbnNUZXh0KGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0J1ZzogRWwgSWQgZGViZSBzZXIgc3RyaW5nLiBodHRwczovL2dpdGh1Yi5jb20vc2VsZWN0Mi9zZWxlY3QyL2lzc3Vlcy80MDUyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGl0ZW0uaWQudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc29jaWF0ZWRPYmplY3Q6IGl0ZW1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgc2V0U2VsZWN0ZWRWYWx1ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVuZGVyVGVtcGxhdGUodGVtcGxhdGUsIG9wdGlvbikge1xyXG4gICAgICAgICAgICBjb25zdCB0ZW1wID0gJChcIjxkaXY+XCIpO1xyXG4gICAgICAgICAgICBrby5hcHBseUJpbmRpbmdzVG9Ob2RlKHRlbXBbMF0sIHsgdGVtcGxhdGU6IHsgbmFtZTogdGVtcGxhdGUsIGRhdGE6IG9wdGlvbiB9IH0pO1xyXG4gICAgICAgICAgICBjb25zdCBodG1sID0gdGVtcC5odG1sKCk7XHJcbiAgICAgICAgICAgIHRlbXAucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0U2VsZWN0ZWRWYWx1ZSgpIHtcclxuICAgICAgICAgICAgaWYgKHNlbGVjdGVkVmFsdWUoKSAmJiBzZWxlY3RlZFZhbHVlKCkuaWQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBvcHRpb24gPSAkKFwiPG9wdGlvbiBzZWxlY3RlZD48L29wdGlvbj5cIikudmFsKHNlbGVjdGVkVmFsdWUoKS5pZCkudGV4dChzZWxlY3RlZFZhbHVlKCkuZGVzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgJChlbGVtZW50KS5hcHBlbmQob3B0aW9uKS50cmlnZ2VyKCdjaGFuZ2UnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodmlzaWJsZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIV8uZmluZCh2aXNpYmxlcywgKHgpID0+IHguaWQgPT0gc2VsZWN0ZWRWYWx1ZSgpLmlkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlcy5wdXNoKHNlbGVjdGVkVmFsdWUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkVmFsdWUoKSA9PSBcIlwiKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAocGxhY2Vob2xkZXIgIT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkuc2VsZWN0MigndmFsJywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICQoZWxlbWVudCkucGFyZW50KCkuZmluZChcIltjbGFzcz1zZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWRdXCIpLnRleHQoJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzdWJzY3JpYmVUb1NlbGVjdDJDaGFuZ2VzVG9Ob3RpZnlWaWV3TW9kZWwoKSB7XHJcbiAgICAgICAgICAgICQoZWxlbWVudCkub24oXCJjaGFuZ2VcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IG9iamVjdFNlbGVjdGVkID0gJChlbGVtZW50KS5zZWxlY3QyKCdkYXRhJylbMF07XHJcbiAgICAgICAgICAgICAgICBpZiAob2JqZWN0U2VsZWN0ZWQgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRWYWx1ZSh1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoSXNBY3R1YWxWYWx1ZURpZmZlcmVudFRoYW4ob2JqZWN0U2VsZWN0ZWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRWYWx1ZSh7IGlkOiBvYmplY3RTZWxlY3RlZC5pZCwgZGVzY3JpcHRpb246IG9iamVjdFNlbGVjdGVkLnRleHQsIHZhbHVlOiBvYmplY3RTZWxlY3RlZC5hc3NvY2lhdGVkT2JqZWN0IH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIElzQWN0dWFsVmFsdWVEaWZmZXJlbnRUaGFuKG9iamVjdFNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhc2VsZWN0ZWRWYWx1ZSgpIHx8XHJcbiAgICAgICAgICAgICAgICAhc2VsZWN0ZWRWYWx1ZSgpLmlkIHx8XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFZhbHVlKCkuaWQgIT0gb2JqZWN0U2VsZWN0ZWQuaWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxlY3RlZFZhbHVlLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHNldFNlbGVjdGVkVmFsdWUoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaGFja1ByZXZlbnRPcGVuT25DbGVhcihlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICQoZWxlbWVudCkub24oJ3NlbGVjdDI6b3BlbmluZycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCQoZWxlbWVudCkuZGF0YSgndW5zZWxlY3RpbmcnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkucmVtb3ZlRGF0YSgndW5zZWxlY3RpbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLnNlbGVjdDIoJ2Nsb3NlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pLm9uKCdzZWxlY3QyOnVuc2VsZWN0aW5nJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmRhdGEoJ3Vuc2VsZWN0aW5nJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAga28uYmluZGluZ0hhbmRsZXJzLm9wdGlvbnNSZW1vdGVTZWxlY3QyID0ge1xyXG4gICAgICAgIGluaXQ6IGluaXRcclxuICAgIH07XHJcblxyXG4gICAga28uYmluZGluZ0hhbmRsZXJzLmlzTWlzc2luZ1JlbW90ZVNlbGVjdDIgPSB7XHJcbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKXtcclxuICAgICAgICAgICAgaWYgKHZhbHVlQWNjZXNzb3IoKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgJHNlbGVjdDIgPSAkKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgJHNlbGVjdDIuZGF0YSgnc2VsZWN0MicpLiRzZWxlY3Rpb24uYWRkQ2xhc3MoXCJtaXNzaW5nLWZpZWxkXCIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgJHNlbGVjdDIgPSAkKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgJHNlbGVjdDIuZGF0YSgnc2VsZWN0MicpLiRzZWxlY3Rpb24ucmVtb3ZlQ2xhc3MoXCJtaXNzaW5nLWZpZWxkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuIiwi77u/bGV0IHVwZGF0aW5nQ29tcG9uZW50O1xyXG5cclxuZnVuY3Rpb24gaW5pdChlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5ncykge1xyXG5cclxuICAgIGxldCBpbml0aWFsT3B0aW9ucyA9IGtvLnVud3JhcCh2YWx1ZUFjY2Vzc29yKCkpO1xyXG4gICAgY29uc3Qgc2VsZWN0ZWRPcHRpb24gPSBhbGxCaW5kaW5ncy5nZXQoXCJ2YWx1ZVNlbGVjdDJcIikoKTtcclxuICAgIGxldCBzdWJzY3JpcHRpb25Ub1ZpZXdNb2RlbDtcclxuICAgIFxyXG4gICAgY3JlYXRlU2VsZWN0MkNvbXBvbmVudFdpdGgoZWxlbWVudCxhbGxCaW5kaW5ncyxpbml0aWFsT3B0aW9ucywgc2VsZWN0ZWRPcHRpb24pO1xyXG4gICAgc3Vic2NyaWJlVG9TZWxlY3QyQ2hhbmdlc1RvTm90aWZ5Vmlld01vZGVsKCk7XHJcbiAgICBzdWJzY3JpYmVUb1ZpZXdNb2RlbENoYW5nZXNUb05vdGlmeVNlbGVjdDIoKTtcclxuICAgIGNsZWFuVXBTdWJzY3JpcHRpb25zV2hlbkRvbU5vZGVJc0RlbGV0ZWQoKTtcclxuXHJcbiAgICBoYWNrUHJldmVudE9wZW5PbkNsZWFyKGVsZW1lbnQpO1xyXG5cclxuICAgIGZ1bmN0aW9uIHN1YnNjcmliZVRvVmlld01vZGVsQ2hhbmdlc1RvTm90aWZ5U2VsZWN0MigpIHtcclxuICAgICAgICBzdWJzY3JpcHRpb25Ub1ZpZXdNb2RlbCA9IHZhbHVlQWNjZXNzb3IoKS5zdWJzY3JpYmUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXBhaW50RWxlbWVudChlbGVtZW50LCBhbGxCaW5kaW5ncyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYWxsQmluZGluZ3MuZ2V0KFwidmFsdWVTZWxlY3QyXCIpLnN1YnNjcmliZShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHVwZGF0aW5nQ29tcG9uZW50KSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBsZXQgc2VsZWN0ZWRPcHRpb24gPSBhbGxCaW5kaW5ncy5nZXQoXCJ2YWx1ZVNlbGVjdDJcIikoKTtcclxuICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBhbGxCaW5kaW5ncy5nZXQoXCJvcHRpb25zU2VsZWN0MlwiKSgpO1xyXG4gICAgICAgICAgICBzZWxlY3RPcHRpb24oZWxlbWVudCwgb3B0aW9ucywgc2VsZWN0ZWRPcHRpb24pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzdWJzY3JpYmVUb1NlbGVjdDJDaGFuZ2VzVG9Ob3RpZnlWaWV3TW9kZWwoKSB7XHJcbiAgICAgICAgbGV0IHNlbGVjdGVkVmFsdWUgPSBhbGxCaW5kaW5ncy5nZXQoXCJ2YWx1ZVNlbGVjdDJcIik7XHJcbiAgICAgICAgJChlbGVtZW50KS5vbihcImNoYW5nZVwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHVwZGF0aW5nQ29tcG9uZW50KSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB1cGRhdGluZ1VJKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG9iamVjdFNlbGVjdGVkID0gJChlbGVtZW50KS5zZWxlY3QyKCdkYXRhJylbMF0uYXNzb2NpYXRlZE9iamVjdDtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkVmFsdWUob2JqZWN0U2VsZWN0ZWQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBoYWNrUHJldmVudE9wZW5PbkNsZWFyKGVsZW1lbnQpIHtcclxuICAgICAgICAkKGVsZW1lbnQpLm9uKCdzZWxlY3QyOm9wZW5pbmcnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCQoZWxlbWVudCkuZGF0YSgndW5zZWxlY3RpbmcnKSkge1xyXG4gICAgICAgICAgICAgICAgJChlbGVtZW50KS5yZW1vdmVEYXRhKCd1bnNlbGVjdGluZycpO1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLnNlbGVjdDIoJ2Nsb3NlJyk7XHJcbiAgICAgICAgICAgICAgICB9LCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLm9uKCdzZWxlY3QyOnVuc2VsZWN0aW5nJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICQoZWxlbWVudCkuZGF0YSgndW5zZWxlY3RpbmcnLCB0cnVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjbGVhblVwU3Vic2NyaXB0aW9uc1doZW5Eb21Ob2RlSXNEZWxldGVkKCkge1xyXG4gICAgICAgIGtvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5hZGREaXNwb3NlQ2FsbGJhY2soZWxlbWVudCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzdWJzY3JpcHRpb25Ub1ZpZXdNb2RlbC5kaXNwb3NlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlcGFpbnRFbGVtZW50KGVsZW1lbnQsYWxsQmluZGluZ3MpIHtcclxuICAgICQoZWxlbWVudCkuc2VsZWN0MihcImRlc3Ryb3lcIik7XHJcbiAgICBsZXQgc2VsZWN0ZWRWYWx1ZSA9IGFsbEJpbmRpbmdzLmdldChcInZhbHVlU2VsZWN0MlwiKSgpO1xyXG4gICAgbGV0IGNoYW5nZWRPcHRpb25zID0gYWxsQmluZGluZ3MuZ2V0KFwib3B0aW9uc1NlbGVjdDJcIikoKTtcclxuICAgIGNyZWF0ZVNlbGVjdDJDb21wb25lbnRXaXRoKGVsZW1lbnQsIGFsbEJpbmRpbmdzLCBjaGFuZ2VkT3B0aW9ucywgc2VsZWN0ZWRWYWx1ZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdDJDb21wb25lbnRXaXRoKGVsZW1lbnQsIGFsbEJpbmRpbmdzLCBvcHRpb25zLCBzZWxlY3RlZE9wdGlvbikge1xyXG4gICAgbGV0IHNlbGVjdDJDb25maWcgPSBjcmVhdGVTZWxlY3QyQ29uZmlndXJhdGlvbihlbGVtZW50LCBhbGxCaW5kaW5ncyxvcHRpb25zKTtcclxuICAgICQoZWxlbWVudCkuZW1wdHkoKTtcclxuICAgICQoZWxlbWVudCkuYXBwZW5kKFwiPG9wdGlvbj48L29wdGlvbj5cIik7XHJcbiAgICAkKGVsZW1lbnQpLnNlbGVjdDIoc2VsZWN0MkNvbmZpZyk7XHJcblxyXG4gICAgc2VsZWN0T3B0aW9uKGVsZW1lbnQsIG9wdGlvbnMsIHNlbGVjdGVkT3B0aW9uKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRpbmdVSSh1cGRhdGVGdW5jdGlvbikge1xyXG4gICAgdXBkYXRpbmdDb21wb25lbnQgPSB0cnVlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB1cGRhdGVGdW5jdGlvbigpO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgICB1cGRhdGluZ0NvbXBvbmVudCA9IGZhbHNlO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzZWxlY3RPcHRpb24oZWxlbWVudCwgb3B0aW9ucywgc2VsZWN0ZWRPcHRpb24pIHtcclxuICAgIHVwZGF0aW5nVUkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gc2VsZWN0ZWRPcHRpb25JbmRleChvcHRpb25zLCBzZWxlY3RlZE9wdGlvbik7XHJcbiAgICAgICAgJChlbGVtZW50KS52YWwoaW5kZXgpLnRyaWdnZXIoXCJjaGFuZ2VcIik7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2VsZWN0ZWRPcHRpb25JbmRleChvcHRpb25zLCBzZWxlY3RlZE9wdGlvbikge1xyXG4gICAgcmV0dXJuIF8uZmluZEluZGV4KG9wdGlvbnMsIGZ1bmN0aW9uKG9wdGlvbikge1xyXG4gICAgICAgIHJldHVybiBfLmVxKG9wdGlvbiwgc2VsZWN0ZWRPcHRpb24pO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlU2VsZWN0MkNvbmZpZ3VyYXRpb24oZWxlbWVudCwgYWxsQmluZGluZ3MsIG9wdGlvbnMpIHtcclxuICAgIGxldCBzZWxlY3QyQ29uZmlnID0geyBhbGxvd0NsZWFyOiB0cnVlIH07XHJcbiAgICBpZiAgKGFsbEJpbmRpbmdzLmhhcyhcImFsbG93Q2xlYXJTZWxlY3QyXCIpKXtcclxuICAgICAgICBzZWxlY3QyQ29uZmlnLmFsbG93Q2xlYXIgPSBhbGxCaW5kaW5ncy5nZXQoXCJhbGxvd0NsZWFyU2VsZWN0MlwiKTtcclxuICAgIH1cclxuICAgIGlmIChhbGxCaW5kaW5ncy5oYXMoXCJvcHRpb25zQ2FwdGlvblwiKSkge1xyXG4gICAgICAgIHNlbGVjdDJDb25maWcucGxhY2Vob2xkZXIgPSBhbGxCaW5kaW5ncy5nZXQoXCJvcHRpb25zQ2FwdGlvblwiKTtcclxuICAgIH1cclxuICAgIGlmIChhbGxCaW5kaW5ncy5oYXMoXCJkcm9wZG93bkNzc0NsYXNzXCIpKSB7XHJcbiAgICAgICAgc2VsZWN0MkNvbmZpZy5kcm9wZG93bkNzc0NsYXNzID0gYWxsQmluZGluZ3MuZ2V0KFwiZHJvcGRvd25Dc3NDbGFzc1wiKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgbGV0IG9wdGlvbnNUZXh0ID0gYWxsQmluZGluZ3MuZ2V0KFwib3B0aW9uc1RleHRcIik7XHJcbiAgICBzZWxlY3QyQ29uZmlnLmRhdGEgPSBjb252ZXJ0VG9TZWxlY3QyRGF0YShvcHRpb25zLCBvcHRpb25zVGV4dCk7XHJcblxyXG4gICAgcmV0dXJuIHNlbGVjdDJDb25maWc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbnZlcnRUb1NlbGVjdDJEYXRhKG9wdGlvbnMsIG9wdGlvbnNUZXh0KSB7XHJcbiAgICBsZXQgc2VsZWN0MkRhdGEgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCB0ZXh0O1xyXG4gICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0aW9uc1RleHQpKSB7XHJcbiAgICAgICAgICAgIHRleHQgPSBvcHRpb25zVGV4dChvcHRpb25zW2ldKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0ZXh0ID0gb3B0aW9uc1tpXVtvcHRpb25zVGV4dF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNlbGVjdDJEYXRhLnB1c2goe1xyXG4gICAgICAgICAgICBpZDogaSxcclxuICAgICAgICAgICAgdGV4dDogdGV4dCxcclxuICAgICAgICAgICAgYXNzb2NpYXRlZE9iamVjdDogb3B0aW9uc1tpXVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNlbGVjdDJEYXRhO1xyXG59XHJcblxyXG5rby5iaW5kaW5nSGFuZGxlcnMub3B0aW9uc1NlbGVjdDIgPSB7XHJcbiAgICBpbml0OiBpbml0IFxyXG59O1xyXG5cclxua28uYmluZGluZ0hhbmRsZXJzLmlzTWlzc2luZyA9IHtcclxuICAgIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcil7XHJcbiAgICAgICAgaWYgKHZhbHVlQWNjZXNzb3IoKSkge1xyXG4gICAgICAgICAgICBjb25zdCAkc2VsZWN0MiA9ICQoZWxlbWVudCk7XHJcbiAgICAgICAgICAgICRzZWxlY3QyLmRhdGEoJ3NlbGVjdDInKS4kc2VsZWN0aW9uLmFkZENsYXNzKFwibWlzc2luZy1maWVsZFwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCAkc2VsZWN0MiA9ICQoZWxlbWVudCk7XHJcbiAgICAgICAgICAgICRzZWxlY3QyLmRhdGEoJ3NlbGVjdDInKS4kc2VsZWN0aW9uLnJlbW92ZUNsYXNzKFwibWlzc2luZy1maWVsZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07Iiwia28uYmluZGluZ0hhbmRsZXJzLnNob3J0RGF0ZVRleHQgPSB7XHJcbiAgICBpbml0OiAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHsgJ2NvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzJzogdHJ1ZSB9O1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZTogKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpID0+IHtcclxuICAgICAgICBjb25zdCB2YWx1ZUFzSVNPODA2MSA9IGtvLnVud3JhcCh2YWx1ZUFjY2Vzc29yKCkpO1xyXG4gICAgICAgIGNvbnN0IGRhdGVBc1RleHQgPSB2YWx1ZUFzSVNPODA2MSA/IG1vbWVudCh2YWx1ZUFzSVNPODA2MSkuZm9ybWF0KCdMJykgOiAnJzsgICAgICAgXHJcbiAgICAgICAga28udXRpbHMuc2V0VGV4dENvbnRlbnQoZWxlbWVudCwgZGF0ZUFzVGV4dCk7XHJcbiAgICB9XHJcbn07Iiwia28uYmluZGluZ0hhbmRsZXJzLnNob3J0RGF0ZVRpbWVUZXh0ID0ge1xyXG4gICAgaW5pdDogKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB7ICdjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncyc6IHRydWUgfTtcclxuICAgIH0sXHJcbiAgICB1cGRhdGU6IChlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdmFsdWVBc0lTTzgwNjEgPSBrby51bndyYXAodmFsdWVBY2Nlc3NvcigpKTtcclxuICAgICAgICBjb25zdCBkYXRlQXNUZXh0ID0gdmFsdWVBc0lTTzgwNjEgPyBtb21lbnQodmFsdWVBc0lTTzgwNjEpLmZvcm1hdCgnTCcpIDogJyc7ICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHRpbWVBc1RleHQgPSB2YWx1ZUFzSVNPODA2MSA/IG1vbWVudCh2YWx1ZUFzSVNPODA2MSkuZm9ybWF0KCdMVFMnKSA6ICcnO1xyXG4gICAgICAgIGtvLnV0aWxzLnNldFRleHRDb250ZW50KGVsZW1lbnQsIGAke2RhdGVBc1RleHR9ICR7dGltZUFzVGV4dH1gKTtcclxuICAgIH1cclxufTsiLCJrby5iaW5kaW5nSGFuZGxlcnMuc2hvcnRUaW1lVGV4dCA9IHtcclxuICAgIGluaXQ6ICgpID0+IHtcclxuICAgICAgICByZXR1cm4geyAnY29udHJvbHNEZXNjZW5kYW50QmluZGluZ3MnOiB0cnVlIH07XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlOiAoZWxlbWVudCwgdmFsdWVBY2Nlc3NvcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlQXNJU084MDYxID0ga28udW53cmFwKHZhbHVlQWNjZXNzb3IoKSk7XHJcbiAgICAgICAgY29uc3QgdGltZUFzVGV4dCA9IHZhbHVlQXNJU084MDYxID8gbW9tZW50KHZhbHVlQXNJU084MDYxKS5mb3JtYXQoJ0hIOm1tJykgOiAnJzsgICAgICAgXHJcbiAgICAgICAga28udXRpbHMuc2V0VGV4dENvbnRlbnQoZWxlbWVudCwgdGltZUFzVGV4dCk7XHJcbiAgICB9XHJcbn07Iiwi77u/a28uYmluZGluZ0hhbmRsZXJzLmh0bWxUb29sdGlwID0ge1xyXG4gICAgaW5pdDogKGVsZW1lbnQsIHZhbHVlQWNjZXNvcikgPT4ge1xyXG4gICAgICAgICQoZWxlbWVudCkudG9vbHRpcCh7XHJcbiAgICAgICAgICAgIGh0bWw6IHRydWUsXHJcbiAgICAgICAgICAgIHRpdGxlOiB2YWx1ZUFjY2Vzb3IoKVxyXG4gICAgICAgIH0pLmFkZENsYXNzKCdodG1sLXRvb2x0aXAnKTtcclxuICAgIH0sXHJcbiAgICB1cGRhdGU6IChlbGVtZW50LCB2YWx1ZUFjY2Vzb3IpID0+IHtcclxuICAgICAgICAkKGVsZW1lbnQpLmF0dHIoJ3RpdGxlJywgdmFsdWVBY2Nlc29yKCkpLnRvb2x0aXAoJ2ZpeFRpdGxlJyk7XHJcbiAgICB9XHJcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUmVzdENsaWVudChhcGlCYXNlUGF0aCkge1xyXG5cclxuICAgIGZ1bmN0aW9uIGdldChyZXNvdXJjZVVybCwgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGFwaUJhc2VQYXRoICsgcmVzb3VyY2VVcmwsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgIFwiU0lNQS1TZXNzaW9uLVRva2VuXCI6IFwiMFwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGNhbGxiYWNrLFxyXG4gICAgICAgICAgICBlcnJvcjogZXJyb3JDYWxsYmFja1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBvc3QocmVzb3VyY2VVcmwsIGhlYWRlcnMsIGRhdGEsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBhcGlCYXNlUGF0aCArIHJlc291cmNlVXJsLFxyXG4gICAgICAgICAgICB0eXBlOiAnUE9TVCcsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcclxuICAgICAgICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiLFxyXG4gICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgICAgICAgICAgc3VjY2VzczogY2FsbGJhY2ssXHJcbiAgICAgICAgICAgIGVycm9yOiBlcnJvckNhbGxiYWNrXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlKHVybCwgaGVhZGVycywgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGFwaUJhc2VQYXRoICsgdXJsLFxyXG4gICAgICAgICAgICB0eXBlOiAnREVMRVRFJyxcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgc3VjY2VzczogY2FsbGJhY2ssXHJcbiAgICAgICAgICAgIGVycm9yOiBlcnJvckNhbGxiYWNrXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcHV0KHVybCwgaGVhZGVycywgZGF0YSwgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGFwaUJhc2VQYXRoICsgdXJsLFxyXG4gICAgICAgICAgICB0eXBlOiAnUFVUJyxcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxyXG4gICAgICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIsXHJcbiAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBjYWxsYmFjayxcclxuICAgICAgICAgICAgZXJyb3I6IGVycm9yQ2FsbGJhY2tcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyBnZXQsIHBvc3QsIHB1dCwgcmVtb3ZlIH07XHJcbn0iLCJleHBvcnQgbGV0IFNpbWFFdmVudEJ1cyA9IChmdW5jdGlvbiAoKXtcclxuICAgIGxldCBzaW1hRXZlbnRzID0gW107XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0U2ltYUV2ZW50IChldmVudE5hbWUpIHtcclxuICAgICAgICBjb25zdCBldmVudE5hbWVJbkxvd2VyID0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgaWYgKCFzaW1hRXZlbnRzW2V2ZW50TmFtZUluTG93ZXJdKSB7XHJcbiAgICAgICAgICAgIHNpbWFFdmVudHNbZXZlbnROYW1lSW5Mb3dlcl0gPSB7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25zOiBbXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2ltYUV2ZW50c1tldmVudE5hbWVJbkxvd2VyXTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzdWJzY3JpYmUgKGV2ZW50TmFtZSwgY2FsbGJhY2ssIHNjb3BlKSB7XHJcbiAgICAgICAgaWYgKHNjb3BlID09IHVuZGVmaW5lZCkgdGhyb3cgXCJTY29wZSB3YXMgbm90IHNwZWNpZmllZCBvbiBvcHRpb25zXCI7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBcIkNhbGxiYWNrIHdhcyBub3Qgc3BlY2lmaWVkIG9uIG9wdGlvbnNcIjtcclxuXHJcbiAgICAgICAgbGV0IHN1YnNjcmlwdGlvbiA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBzY29wZTogc2NvcGUudG9Mb3dlckNhc2UoKSB9O1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IGdldFNpbWFFdmVudChldmVudE5hbWUpLnN1YnNjcmlwdGlvbnM7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdWJzY3JpcHRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb25zW2ldLnNjb3BlID09PSBzY29wZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBnZXRTaW1hRXZlbnQoZXZlbnROYW1lKS5zdWJzY3JpcHRpb25zW2ldID0gc3Vic2NyaXB0aW9uO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdldFNpbWFFdmVudChldmVudE5hbWUpLnN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGV2ZW50TmFtZSwgc2NvcGUpIHtcclxuICAgICAgICBpZiAoc2NvcGUgPT0gdW5kZWZpbmVkKSB0aHJvdyBcIlNjb3BlIHdhcyBub3Qgc3BlY2lmaWVkIG9uIG9wdGlvbnNcIjtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gZ2V0U2ltYUV2ZW50KGV2ZW50TmFtZSkuc3Vic2NyaXB0aW9ucztcclxuICAgICAgICBfLnJlbW92ZShzdWJzY3JpcHRpb25zLCAoeCkgPT4geC5zY29wZSA9PT0gc2NvcGUudG9Mb3dlckNhc2UoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmFpc2UgKGV2ZW50TmFtZSwgZGF0YSkge1xyXG4gICAgICAgIGxldCBzdWJzY3JpcHRpb25zID0gZ2V0U2ltYUV2ZW50KGV2ZW50TmFtZSkuc3Vic2NyaXB0aW9ucztcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdWJzY3JpcHRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIChmdW5jdGlvbiAoc3Vic2NyaXB0aW9uLCBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5jYWxsYmFjay5jYWxsKG51bGwsIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGV4KSB7fVxyXG4gICAgICAgICAgICB9KHN1YnNjcmlwdGlvbnNbaV0sIGRhdGEpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzdWJzY3JpYmUsXHJcbiAgICAgICAgcmFpc2UsXHJcbiAgICAgICAgdW5zdWJzY3JpYmVcclxuICAgIH07XHJcbn0pKCk7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVHJhbnNsYXRpb25TZXJ2aWNlKHRyYW5zbGF0aW9uc0pzb24sIGN1bHR1cmVOYW1lKSB7XHJcblxyXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKGtleSwgcGFyYW1ldGVycykge1xyXG4gICAgICAgIGxldCB0cmFuc2xhdGlvbiA9IHRyYW5zbGF0aW9uc0pzb25ba2V5XTtcclxuICAgICAgICBpZiAoIXRyYW5zbGF0aW9uKSByZXR1cm4gYCEke2tleX0hYDtcclxuICAgICAgICBpZiAocGFyYW1ldGVycykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uID0gdHJhbnNsYXRpb24ucmVwbGFjZShgeyR7aX19YCwgcGFyYW1ldGVyc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cmFuc2xhdGlvbiB8fCBrZXk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0cmFuc2xhdGUsXHJcbiAgICAgICAgY3VsdHVyZU5hbWVcclxuICAgIH07XHJcbn0iLCLvu79cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmFsaWRhdGlvblNlcnZpY2UoKSB7XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdFZhbGlkYXRpb24oKSB7XHJcbiAgICAgICAga28udmFsaWRhdGlvbi5pbml0KHtcclxuICAgICAgICAgICAgcmVnaXN0ZXJFeHRlbmRlcnM6IHRydWUsXHJcbiAgICAgICAgICAgIG1lc3NhZ2VzT25Nb2RpZmllZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGluc2VydE1lc3NhZ2VzOiBmYWxzZSxcclxuICAgICAgICAgICAgcGFyc2VJbnB1dEF0dHJpYnV0ZXM6IHRydWUsXHJcbiAgICAgICAgICAgIG1lc3NhZ2VUZW1wbGF0ZTogbnVsbFxyXG4gICAgICAgIH0sIHRydWUpO1xyXG5cclxuICAgICAgICByZWdpc3RlckV4dGVuZGVycygpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyRXh0ZW5kZXJzKCkge1xyXG4gICAgICAgIGtvLnZhbGlkYXRpb24ucnVsZXNbJ21hdGNocyddID0ge1xyXG4gICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKHZhbHVlLCBmaWVsZFRvQ29tcGFyZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSBrby51bndyYXAoZmllbGRUb0NvbXBhcmUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtZXNzYWdlOiAnVGhlIGZpZWxkcyBtdXN0IGhhdmUgdGhlIHNhbWUgdmFsdWUnXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAga28udmFsaWRhdGlvbi5yZWdpc3RlckV4dGVuZGVycygpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5pdFZhbGlkYXRpb25cclxuICAgIH07XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBWYWxpZGF0b3IodHJhbnNsYXRvcikge1xyXG4gICAgbGV0IHZhbGlkYWJsZVByb3BzID0gW107XHJcbiAgICBsZXQgdmFsaWRhYmxlUnVsZXMgPSBbXTtcclxuXHJcbiAgICBmdW5jdGlvbiBhZGRSZXF1aXJlZCh2YWxpZGFibGVQcm9wKSB7XHJcbiAgICAgICAgdmFsaWRhYmxlUHJvcC5leHRlbmQoe1xyXG4gICAgICAgICAgICByZXF1aXJlZDoge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogdHJhbnNsYXRvci50cmFuc2xhdGUoJ1NoYXJlZERvbWFpbi5WYWxpZGF0aW9uLlJlcXVpcmVkLk1lc3NhZ2UnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFsaWRhYmxlUHJvcHMucHVzaCh2YWxpZGFibGVQcm9wKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhZGRFbWFpbCh2YWxpZGFibGVQcm9wKSB7XHJcbiAgICAgICAgdmFsaWRhYmxlUHJvcC5leHRlbmQoe1xyXG4gICAgICAgICAgICBlbWFpbDoge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogdHJhbnNsYXRvci50cmFuc2xhdGUoJ1NoYXJlZERvbWFpbi5WYWxpZGF0aW9uLkVtYWlsLk1lc3NhZ2UnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHZhbGlkYWJsZVByb3BzLnB1c2godmFsaWRhYmxlUHJvcCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkTWluaW11bSh2YWxpZGFibGVQcm9wLCBtaW5WYWx1ZSkge1xyXG4gICAgICAgIHZhbGlkYWJsZVByb3AuZXh0ZW5kKHtcclxuICAgICAgICAgICAgbWluOiB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXM6IG1pblZhbHVlLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogdHJhbnNsYXRvci50cmFuc2xhdGUoJ1NoYXJlZERvbWFpbi5WYWxpZGF0aW9uLk1pbmltdW4nLCBbbWluVmFsdWVdKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHZhbGlkYWJsZVByb3BzLnB1c2godmFsaWRhYmxlUHJvcCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkTnVtYmVyKHZhbGlkYWJsZVByb3ApIHtcclxuICAgICAgICB2YWxpZGFibGVQcm9wLmV4dGVuZCh7XHJcbiAgICAgICAgICAgIG51bWJlcjoge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogdHJhbnNsYXRvci50cmFuc2xhdGUoJ1NoYXJlZERvbWFpbi5WYWxpZGF0aW9uLk51bWVyaWMnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHZhbGlkYWJsZVByb3BzLnB1c2godmFsaWRhYmxlUHJvcCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIGFkZFJ1bGUodmFsaWRhYmxlUnVsZSkge1xyXG4gICAgICAgIHZhbGlkYWJsZVJ1bGVzLnB1c2godmFsaWRhYmxlUnVsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaXNWYWxpZCh2YWxpZGFibGVQcm9wKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbGlkYWJsZVByb3AuaXNWYWxpZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGlzQWxsVmFsaWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbGlkYWJsZVByb3BzLmV2ZXJ5KChwcm9wKSA9PiBwcm9wLmlzVmFsaWQoKSkgJiYgdmFsaWRhYmxlUnVsZXMuZXZlcnkoKHJ1bGUpID0+IHJ1bGUoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBhZGRSZXF1aXJlZCxcclxuICAgICAgICBhZGRFbWFpbCxcclxuICAgICAgICBhZGRNaW5pbXVtLFxyXG4gICAgICAgIGFkZE51bWJlcixcclxuICAgICAgICBhZGRSdWxlLFxyXG4gICAgICAgIGlzVmFsaWQsXHJcbiAgICAgICAgaXNBbGxWYWxpZFxyXG4gICAgfTtcclxufVxyXG4iLCLvu79pbXBvcnQgRXJyb3JNZXNzYWdlc0V4dHJhY3RvciBmcm9tIFwiLi9kaWFsb2dzL2Vycm9yTWVzc2FnZXNFeHRyYWN0b3JcIjtcclxuaW1wb3J0IENvbXBvbmVudFJlZ2lzdGVyIGZyb20gXCIuL2NvbXBvbmVudFJlZ2lzdGVyXCI7XHJcbmltcG9ydCB7IERlcGVuZGVuY3lQcm92aWRlckZhY3RvcnkgfSBmcm9tIFwiLi9kZXBlbmRlbmN5UHJvdmlkZXJGYWN0b3J5XCI7XHJcbmltcG9ydCB7IERpYWxvZ1B1Ymxpc2hlciB9IGZyb20gXCIuL0RpYWxvZ1B1Ymxpc2hlclwiO1xyXG5pbXBvcnQgRGlhbG9nVmlld01vZGVsIGZyb20gXCIuL0RpYWxvZ3NcIjtcclxuaW1wb3J0IEhpc3RvcnkgZnJvbSBcIi4vSGlzdG9yeVwiO1xyXG5pbXBvcnQgUmVzdENsaWVudCBmcm9tIFwiLi9yZXN0Q2xpZW50XCI7XHJcbmltcG9ydCBUcmFuc2xhdGlvblNlcnZpY2UgZnJvbSBcIi4vVHJhbnNsYXRpb25TZXJ2aWNlXCI7XHJcbmltcG9ydCBVc2VyUmlnaHRzU2VydmljZSBmcm9tIFwiLi9Vc2VyUmlnaHRzU2VydmljZVwiO1xyXG5pbXBvcnQgVmFsaWRhdGlvblNlcnZpY2UgZnJvbSBcIi4vdmFsaWRhdGlvblNlcnZpY2VcIjtcclxuaW1wb3J0IFZhbGlkYXRvciBmcm9tIFwiLi92YWxpZGF0b3JcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBleHBvcnRBcGkoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIEVycm9yTWVzc2FnZXNFeHRyYWN0b3IsXHJcbiAgICAgICAgQ29tcG9uZW50UmVnaXN0ZXIsXHJcbiAgICAgICAgRGVwZW5kZW5jeVByb3ZpZGVyRmFjdG9yeSxcclxuICAgICAgICBEaWFsb2dQdWJsaXNoZXIsXHJcbiAgICAgICAgRGlhbG9nVmlld01vZGVsLFxyXG4gICAgICAgIEhpc3RvcnksXHJcbiAgICAgICAgUmVzdENsaWVudCxcclxuICAgICAgICBUcmFuc2xhdGlvblNlcnZpY2UsXHJcbiAgICAgICAgVXNlclJpZ2h0c1NlcnZpY2UsXHJcbiAgICAgICAgVmFsaWRhdGlvblNlcnZpY2UsXHJcbiAgICAgICAgVmFsaWRhdG9yXHJcbiAgICB9O1xyXG59XHJcblxyXG52YXIgYWlkYUNvcmUgPSByZXF1aXJlKCdhaWRhLWNvcmUnKS5leHBvcnRBcGkoKTtcclxud2luZG93LmFpZGFDb3JlID0gYWlkYUNvcmU7Il19
