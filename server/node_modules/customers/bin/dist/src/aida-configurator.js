require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
                        value: true
});
exports["default"] = "\n<search-select params=\"label: labels.label, \n                        placeholder: labels.placeholder, \n                        options: options, \n                        selected: selected,\n                        whenSelected: whenColorSelected\">\n</search-select>";
module.exports = exports["default"];

},{}],2:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _colorSelectorTemplate = require('./color-selector-template');

var _colorSelectorTemplate2 = _interopRequireDefault(_colorSelectorTemplate);

aidaCore.ComponentRegister('color-selector', {
    script: function script(props, dependencyProvider) {
        var translator = dependencyProvider.getTranslator();
        var enableEvents = props.enableEvents || ko.observable(true);
        var whenColorSelected = props.whenColorSelected || function () {};

        function getLabels() {
            return {
                label: translator.translate('SharedDomain.Vehicle.Color'),
                placeholder: translator.translate('SharedDomain.SelectValue')
            };
        }

        return {
            labels: getLabels(),
            options: props.options,
            selected: props.selected,
            enableEvents: enableEvents,
            whenColorSelected: whenColorSelected
        };
    },
    template: _colorSelectorTemplate2['default']
});

},{"./color-selector-template":1}],3:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div data-backdrop=\"static\" data-keyboard=\"false\" data-bind=\"modal: {\n                    visible: visible,\n                    header: { name: headerTemplate, data: { headerLabel: labels.label }},\n                    body: { name: 'combinations_selector', data: { choices: choices }}\n                }\">\n</div>\n\n<script type=\"text/html\" id=\"header_without_close\">\n    <h3 data-bind=\"text: headerLabel\"></h3>\n</script>\n\n<script type=\"text/html\" id=\"header_with_close\">\n    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">Ã—</button>\n    <h3 data-bind=\"text: headerLabel\"></h3>\n</script>\n\n<script type=\"text/html\" id=\"combinations_selector\">\n    <div data-bind=\"foreach: choices\">\n        <div class=\"selectablebox\" data-bind=\"click: select\" style=\"margin: 5px\">\n            <ul data-bind=\"foreach: items\">\n                <li data-bind=\"text: description\"></li>\n            </ul>\n        </div>\n    </div>\n</script>";
module.exports = exports["default"];

},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = CombinationSelectorScript;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _combinationSelectorTemplate = require('./combination-selector-template');

var _combinationSelectorTemplate2 = _interopRequireDefault(_combinationSelectorTemplate);

aidaCore.ComponentRegister('combination-selector', {
    script: {
        create: function create(props, dependencyProvider) {
            var params = {
                visible: props.visible,
                isSelectionMandatory: props.isSelectionMandatory || false,
                options: props.options,
                translator: dependencyProvider.getTranslator(),
                whenSelected: props.whenSelected || function () {}
            };
            return new CombinationSelectorScript(params);
        }
    },
    template: _combinationSelectorTemplate2['default']
});

function CombinationSelectorScript(_ref) {
    var visible = _ref.visible;
    var isSelectionMandatory = _ref.isSelectionMandatory;
    var options = _ref.options;
    var translator = _ref.translator;
    var whenSelected = _ref.whenSelected;

    var currentCombinationSelected = undefined;
    var choices = ko.observableArray([]);
    var headerTemplate = ko.observable(getHeader());

    visible.subscribe(function () {
        if (visible()) {
            initialize();
        } else {
            whenSelected(currentCombinationSelected);
        }
    });

    function whenCombinationSelected(combination) {
        currentCombinationSelected = combination;
        visible(false);
    }

    function initialize() {
        headerTemplate(getHeader());
        currentCombinationSelected = undefined;
        choices.removeAll();
        _.each(options(), function (option) {
            return option.whenSelected(whenCombinationSelected);
        });
        ko.utils.arrayPushAll(choices, options());
    }

    function getHeader() {
        return ko.unwrap(isSelectionMandatory) ? 'header_without_close' : 'header_with_close';
    }

    function getLabels() {
        return {
            label: translator.translate("Configurator.CombinationSelector.Header")
        };
    }

    return {
        visible: visible,
        headerTemplate: headerTemplate,
        choices: choices,
        initialize: initialize,
        labels: getLabels()
    };
}

module.exports = exports['default'];

},{"./combination-selector-template":3}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = ColorConfigurator;

function ColorConfigurator(whenColorIsSelected) {

    var colorOptions = ko.observableArray([]);
    var colorSelected = ko.observable();

    colorSelected.subscribe(function () {
        whenColorIsSelected(colorSelected());
    });

    function initializeSelector(colors) {
        colorOptions.removeAll();
        ko.utils.arrayPushAll(colorOptions, colors);
        colorSelected(undefined);
    }

    function setOptionsForSelectedInterior(modelConfiguration, catalog) {
        if (!modelConfiguration.hasInterior()) {
            colorOptions(catalog.colors);
        } else {
            colorOptions(catalog.compatibleColorsWith(modelConfiguration.configuredInterior().code));
        }
    }

    return {
        options: colorOptions,
        selected: colorSelected,
        initializeSelector: initializeSelector,
        setOptionsForSelectedInterior: setOptionsForSelectedInterior
    };
}

module.exports = exports["default"];

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = Combination;

function Combination(root, items, dialogPublisher, translator) {
    var whenSelectedCallback = function whenSelectedCallback() {};

    function select() {
        if (anyEquipmentIsNotInCatalog()) {
            dialogPublisher.error({ title: translator.translate("Configurator.AnyEquipmentIsNotInCatalog.Error") });
            return;
        }
        whenSelectedCallback(self);
    }

    function anyEquipmentIsNotInCatalog() {
        return _.find(items, function (x) {
            return !x.isInCatalog();
        }) != undefined;
    }

    function selectItems() {
        root.selected(true);
        _.each(items, function (x) {
            return x.selected(true);
        });
    }

    function whenSelected(callback) {
        whenSelectedCallback = callback;
    }

    var self = {
        root: root,
        items: items,
        select: select,
        whenSelected: whenSelected,
        selectItems: selectItems
    };

    return self;
}

module.exports = exports["default"];

},{}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = CombinationSelectorBindings;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _combinationsBuilder = require('./combinationsBuilder');

var _combinationsBuilder2 = _interopRequireDefault(_combinationsBuilder);

function CombinationSelectorBindings(dialogPublisher, translator) {

    var combinationsBuilder = (0, _combinationsBuilder2['default'])(dialogPublisher, translator);
    var combinationOptions = ko.observable();
    var isCombinationMandatory = ko.observable(false);
    var whenCombinationSelectedCallback = function whenCombinationSelectedCallback() {};
    var combinationSelectorVisible = ko.observable(false);

    function updateToShowAsMandatory(itemCode, combinations, selectableCatalog, callback) {
        var isMandatory = true;
        update(itemCode, combinations, selectableCatalog, isMandatory, callback);
    }

    function updateToShow(itemCode, combinations, selectableCatalog, callback) {
        var isMandatory = false;
        update(itemCode, combinations, selectableCatalog, isMandatory, callback);
    }

    function update(itemCode, combinations, selectableCatalog, isMandatory, callback) {
        var combinationsForThisItem = combinationsBuilder.buildFor(itemCode, combinations, selectableCatalog);
        combinationOptions(combinationsForThisItem);
        isCombinationMandatory(isMandatory);
        whenCombinationSelectedCallback = callback;
        combinationSelectorVisible(true);
    }

    return {
        updateToShow: updateToShow,
        updateToShowAsMandatory: updateToShowAsMandatory,
        combinationSelectorVisible: combinationSelectorVisible,
        isCombinationMandatory: isCombinationMandatory,
        combinationOptions: combinationOptions,
        whenSelected: function whenSelected(selected) {
            return whenCombinationSelectedCallback(selected);
        }
    };
}

module.exports = exports['default'];

},{"./combinationsBuilder":8}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = CombinationsBuilder;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _combination = require('./combination');

var _combination2 = _interopRequireDefault(_combination);

function CombinationsBuilder(dialogPublisher, translator) {

    function buildFor(itemCode, combinations, catalog) {
        var rootOfCombinationEquipment = catalog.findItem(itemCode);
        return _.map(combinations, function (combination) {
            return buildCombinationFor(rootOfCombinationEquipment, combination, catalog);
        });
    }

    function buildCombinationFor(rootItem, combination, catalog) {
        var combinationCodes = _.map(combination, function (item) {
            return item.code;
        });
        var catalogItems = catalog.findItems(combinationCodes);
        return (0, _combination2['default'])(rootItem, catalogItems, dialogPublisher, translator);
    }

    return {
        buildFor: buildFor,
        buildCombinationFor: buildCombinationFor
    };
}

module.exports = exports['default'];

},{"./combination":6}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = ConfiguratorApplier;

function ConfiguratorApplier(configuratorNotifier, combinationBuilder, whenConfigurationChanged) {

    var EmptyInterior = undefined;

    function applyConfiguration(modelConfiguration, newConfiguration, actionType, selectableCatalog) {
        var newAutofixes = _.filter(newConfiguration.autoFixes, function (x) {
            return x.isNewAutofix;
        });
        if (newAutofixes.length > 0) {
            configuratorNotifier.notifyAutofixesConfirmation(newAutofixes, function () {
                return continueApply(modelConfiguration, newConfiguration, actionType, selectableCatalog);
            });
        } else {
            continueApply(modelConfiguration, newConfiguration, actionType, selectableCatalog);
        }
    }

    function continueApply(modelConfiguration, newConfiguration, actionType, selectableCatalog) {
        configuratorNotifier.notifyChangesInConfiguration(modelConfiguration, newConfiguration, actionType);
        commitApply(modelConfiguration, newConfiguration, selectableCatalog);
    }

    function commitApply(modelConfiguration, newConfiguration, selectableCatalog) {
        clearAllSelections(modelConfiguration, selectableCatalog);

        modelConfiguration.setAutofixes(newConfiguration.autoFixes);

        applyModelCompulsory(modelConfiguration, newConfiguration, selectableCatalog);
        applyEquipmentsAndPackages(modelConfiguration, newConfiguration, selectableCatalog);
        applyColor(modelConfiguration, newConfiguration, selectableCatalog);
        applyInterior(modelConfiguration, newConfiguration, selectableCatalog);
        whenConfigurationChanged(modelConfiguration);
    }

    function clearAllSelections(modelConfiguration, selectableCatalog) {
        modelConfiguration.cleanSelections();
        selectableCatalog.unselectAll();
    }

    function applyModelCompulsory(modelConfiguration, newConfiguration, selectableCatalog) {
        if (!newConfiguration.modelCompulsory || !newConfiguration.modelCompulsory.combinedItems) return;

        _.each(newConfiguration.modelCompulsory.combinedItems, function (x) {
            var item = selectableCatalog.findItem(x.code);
            item.selected(true);
            modelConfiguration.addCompulsory(item);
        });
    }

    function applyEquipmentsAndPackages(modelConfiguration, newConfiguration, selectableCatalog) {
        var equipmentsAndPackages = _(newConfiguration.equipments).concat(newConfiguration.packages).value();
        _.each(equipmentsAndPackages, function (x) {
            var item = selectableCatalog.findItem(x.code);
            item.selected(true);
            applyCombination(item, x.combination, selectableCatalog);
            modelConfiguration.addEquipment(item);
        });
    }

    function applyColor(modelConfiguration, newConfiguration, selectableCatalog) {
        var colorSelectable = undefined;
        if (_.isObject(newConfiguration.color)) {
            colorSelectable = selectableCatalog.findItem(newConfiguration.color.code);
            applyCombination(colorSelectable, newConfiguration.color.combination, selectableCatalog);
        }
        modelConfiguration.setColor(colorSelectable);
    }

    function applyCombination(catalogItem, combinationToApply, selectableCatalog) {
        if (combinationToApply && combinationToApply.length > 0) {
            var combination = combinationBuilder.buildCombinationFor(catalogItem, combinationToApply, selectableCatalog);
            combination.selectItems();
            catalogItem.setCombination(combination);
        }
    }

    function applyInterior(modelConfiguration, newConfiguration, selectableCatalog) {
        var interiorSelectable = EmptyInterior;
        if (_.isObject(newConfiguration.interior)) {
            interiorSelectable = selectableCatalog.findItem(newConfiguration.interior.code);
            applyCombination(interiorSelectable, newConfiguration.interior.combination, selectableCatalog);
        }
        modelConfiguration.setInterior(interiorSelectable);
    }

    return {
        applyConfiguration: applyConfiguration,
        continueApply: continueApply
    };
}

module.exports = exports["default"];

},{}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = ConfiguratorNotifier;

function ConfiguratorNotifier(dialogPublisher, translator) {

    function notifyChangesInConfiguration(modelConfiguration, newConfiguration, actionType) {
        var message = undefined;
        if (modelConfiguration.colorHasChanged(newConfiguration) && !actionType.IsChangeColor()) {
            message = translator.translate("Configurator.NotifyChangeColor.Message");
        }

        if (modelConfiguration.interiorHasChanged(newConfiguration) && !actionType.IsChangeInterior()) {
            if (message) message += " " + translator.translate("Configurator.NotifyChangeInteriorAndColor.Message");else message = translator.translate("Configurator.NotifyChangeInterior.Message");
        }

        if (message) {
            dialogPublisher.warning({ title: translator.translate("SharedDomain.Warning.Text"), message: message });
        }
    }

    function notifyAutofixesConfirmation(newAutofixes, whenConfirmed) {
        var fixesAsString = _.reduce(newAutofixes, function (acc, fix) {
            return acc + "- " + translator.translate("Configurator.ApplyConfiguration.Message", [fix.addedItem, fix.removedItem]) + '<br>';
        }, "");
        fixesAsString += "<br>" + translator.translate("Configurator.OkToContinue.Message");
        dialogPublisher.confirmation({
            title: translator.translate("Configurator.ApplyConfigurationConfirmation.Message"),
            message: fixesAsString,
            callback: whenConfirmed
        });
    }

    return {
        notifyChangesInConfiguration: notifyChangesInConfiguration,
        notifyAutofixesConfirmation: notifyAutofixesConfirmation
    };
}

module.exports = exports["default"];

},{}],11:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = EquipmentsSelector;

function EquipmentsSelector() {

    var categories = ko.observableArray();
    var search = EquipmentsSearch();
    var allEquipments = [];

    function setEquipments(equipments, packages) {
        var allSelectableItems = _(packages).concat(equipments).value();
        clean(allSelectableItems);
        groupEquipmentsByCategory(allSelectableItems);
        initSearch();
    }

    function clean(equipments) {
        allEquipments = equipments;
        categories.removeAll();
    }

    function groupEquipmentsByCategory(equipments) {
        var equipmentsGroupedByCategory = _.groupBy(equipments, "category");
        _.each(equipmentsGroupedByCategory, function (equipments, category) {
            categories.push(EquipmentCategory(equipments, category));
        });
    }

    function initSearch() {
        search.setEquipments(allEquipments);
    }

    function unselectAllEquipments() {
        _.each(allEquipments, function (x) {
            return x.selected(false);
        });
    }

    return {
        categories: categories,
        setEquipments: setEquipments,
        search: search,
        unselectAllEquipments: unselectAllEquipments
    };
}

function EquipmentCategory(equipments, name) {
    return {
        name: name,
        id: _.uniqueId('category_'),
        equipments: equipments
    };
}

function EquipmentsSearch() {
    var textToSearch = ko.observable('');
    var results = ko.observableArray([]);
    var elements = [];

    function setEquipments(equipments) {
        results.removeAll();
        elements.length = 0;
        _.each(equipments, function (equipment) {
            elements.push(equipment);
        });
        search();
    }

    function search() {
        results.removeAll();
        var filteredResults = _.filter(elements, function (element) {
            return element.contains(textToSearch());
        });
        ko.utils.arrayPushAll(results, filteredResults);
    }

    return {
        results: results,
        textToSearch: textToSearch,
        search: search,
        setEquipments: setEquipments
    };
}
module.exports = exports['default'];

},{}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = InteriorConfigurator;

function InteriorConfigurator(whenInteriorIsSelected) {

    var interiorOptions = ko.observableArray([]);
    var interiorSelected = ko.observable();

    interiorSelected.subscribe(function () {
        whenInteriorIsSelected(interiorSelected());
    });

    function initializeSelector(interiors) {
        interiorOptions.removeAll();
        ko.utils.arrayPushAll(interiorOptions, interiors);
        interiorSelected(undefined);
    }

    function setOptionsForSelectedColor(modelConfiguration, catalog) {
        if (!modelConfiguration.hasColor()) {
            interiorOptions(catalog.interiors);
        } else {
            interiorOptions(catalog.compatibleInteriorsWith(modelConfiguration.configuredColor().code));
        }
    }

    return {
        options: interiorOptions,
        selected: interiorSelected,
        initializeSelector: initializeSelector,
        setOptionsForSelectedColor: setOptionsForSelectedColor
    };
}

module.exports = exports["default"];

},{}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = ModelCatalogSelectables;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _selectableItem = require("./selectableItem");

var _selectableItem2 = _interopRequireDefault(_selectableItem);

function ModelCatalogSelectables(modelCode, modelDescription, catalogJson) {

    var colors = createSelectableColorsFrom(catalogJson);
    var interiors = createSelectableInteriorsFrom(catalogJson);
    var equipments = createSelectableEquipmentsFrom(catalogJson);
    var packages = createSelectablePackagesFrom(catalogJson);
    var model = (0, _selectableItem2["default"])({
        code: modelCode,
        description: modelDescription,
        hasForcedCombinations: catalogJson.modelCompulsoryCombinationChoices && catalogJson.modelCompulsoryCombinationChoices.length > 0,
        compulsoryCombinations: catalogJson.modelCompulsoryCombinationChoices
    });

    var allItems = _(model).concat(interiors, colors, equipments, packages).value();

    function addRelationship(colorCode, interiorCode) {
        if (_.find(catalogJson.relationship, function (x) {
            return x.colorCode == colorCode && x.interiorCode == interiorCode;
        })) return;
        catalogJson.relationship.push({ colorCode: colorCode, interiorCode: interiorCode });
    }

    function addColor(colorToAdd) {
        var color = (0, _selectableItem2["default"])({
            code: colorToAdd.code,
            description: colorToAdd.description });
        colors.push(color);
        allItems.push(color);
    }

    function addInterior(interiorToAdd) {
        var interior = (0, _selectableItem2["default"])({
            code: interiorToAdd.code,
            description: interiorToAdd.description });
        interiors.push(interior);
        allItems.push(interior);
    }

    function clean() {
        equipments.length = 0;
        interiors.length = 0;
        colors.length = 0;
        packages.length = 0;
        allItems.length = 0;
    }

    function getModel() {
        return model;
    }

    function createSelectablePackagesFrom(catalogJson) {
        return _.map(catalogJson.packages, function (x) {
            return (0, _selectableItem2["default"])(x, true);
        });
    }

    function createSelectableEquipmentsFrom(catalogJson) {
        return _.map(catalogJson.equipments, function (x) {
            return (0, _selectableItem2["default"])(x, false);
        });
    }

    function createSelectableInteriorsFrom(catalogJson) {
        return _.map(catalogJson.interiors, function (x) {
            return (0, _selectableItem2["default"])(x);
        });
    }

    function createSelectableColorsFrom(catalogJson) {
        return _.map(catalogJson.colors, function (x) {
            return (0, _selectableItem2["default"])(x);
        });
    }

    function findItems(codes) {
        return _.map(codes, function (code) {
            return findItem(code);
        });
    }

    function findItem(code) {
        var item = _.find(allItems, function (x) {
            return x.code == code;
        });
        if (_.isUndefined(item)) {
            return createEmptySelectableItem(code);
        }
        return item;
    }

    function createEmptySelectableItem(code) {
        return (0, _selectableItem2["default"])({ esmEquipment: false, code: code, description: '' });
    }

    function unselectAll() {
        _.each(allItems, function (x) {
            return x.selected(false);
        });
    }

    function compatibleColorsWith(interiorCode) {
        var interiorRelationships = _.filter(catalogJson.relationship, function (x) {
            return x.interiorCode == interiorCode;
        });
        return _.map(interiorRelationships, function (x) {
            return findColor(x.colorCode);
        });
    }

    function findColor(colorCode) {
        return _.find(colors, function (x) {
            return x.code == colorCode;
        });
    }

    function compatibleInteriorsWith(colorCode) {
        var colorRelationships = _.filter(catalogJson.relationship, function (x) {
            return x.colorCode == colorCode;
        });
        return _.map(colorRelationships, function (x) {
            return findInterior(x.interiorCode);
        });
    }

    function findInterior(interiorCode) {
        return _.find(interiors, function (x) {
            return x.code == interiorCode;
        });
    }

    return {
        equipments: equipments,
        packages: packages,
        colors: colors,
        interiors: interiors,
        findItem: findItem,
        findItems: findItems,
        unselectAll: unselectAll,
        compatibleColorsWith: compatibleColorsWith,
        compatibleInteriorsWith: compatibleInteriorsWith,
        getModel: getModel,
        clean: clean,
        addColor: addColor,
        addInterior: addInterior,
        addRelationship: addRelationship
    };
}

module.exports = exports["default"];

},{"./selectableItem":15}],14:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = ModelConfiguration;

function ModelConfiguration() {
    var modelGroupCode = undefined;
    var modelId = ko.observable();
    var modelDescription = ko.observable();
    var equipments = ko.observableArray();
    var configuredColor = ko.observable();
    var configuredInterior = ko.observable();
    var modelCompulsory = ko.observableArray();
    var showOrderCreation = ko.observable(false);
    var unableToRebuildItems = ko.observableArray();
    var isAVersion = ko.observable();
    var modelAutofixes = undefined;
    var modelCode = undefined;

    function addUnableToRebuildItem(item) {
        unableToRebuildItems.push(item);
    }

    function removeUnableToRebuildItem(item) {
        unableToRebuildItems.remove(item);
    }

    function setAutofixes(autofixes) {
        modelAutofixes = autofixes;
    }

    function canSaveOrder() {
        return hasModel() && hasColor() && hasInterior();
    }

    function addEquipment(equipment) {
        equipments.remove(equipment);
        equipments.push(equipment);
    }

    function addCompulsory(combinedItem) {
        modelCompulsory.push(combinedItem);
    }

    function setModelGroupCode(modelGroup) {
        modelGroupCode = modelGroup;
    }

    function setModel(model) {
        removeModel();
        modelCode = model.key.code;
        modelId(model.key.id);
        modelDescription(model.description);
        isAVersion(model.isAVersion);
    }

    function isNotTheSameModel(model) {
        return model.key.code != modelCode;
    }

    function clean() {
        modelGroupCode = '';
        modelCode = '';
        modelId(undefined);
        modelDescription(undefined);
        cleanSelections();
    }

    function removeModel() {
        modelCode = '';
        modelId(undefined);
        modelDescription(undefined);
        cleanSelections();
    }

    function cleanSelections() {
        showOrderCreation(false);
        equipments.removeAll();
        modelCompulsory.removeAll();
        configuredColor(undefined);
        configuredInterior(undefined);
    }

    function setColor(color) {
        configuredColor(color);
    }

    function setInterior(interior) {
        configuredInterior(interior);
    }

    function isEmpty() {
        return !hasModel();
    }

    function toJson() {
        return {
            modelGroupCode: modelGroupCode,
            modelKey: { id: modelId(), code: modelCode, description: modelDescription(), isAVersion: isAVersion() },
            color: configuredColor() != undefined ? configuredColor().toJson() : {},
            interior: configuredInterior() != undefined ? configuredInterior().toJson() : {},
            equipments: _.map(equipments(), function (x) {
                return x.toJson();
            }),
            modelCompulsory: {
                combinedItems: _.map(modelCompulsory(), function (x) {
                    return { code: x.code, type: x.type };
                })
            },
            autoFixes: modelAutofixes
        };
    }

    function hasForcedColor() {
        if (configuredColor() == undefined) return false;

        return _.any(equipments(), function (x) {
            return x.containsForcedItem(configuredColor().code);
        }) || configuredInterior() && configuredInterior().containsForcedItem(configuredColor().code) || _.any(modelCompulsory(), function (x) {
            return x.code == configuredColor().code;
        });
    }

    function hasForcedInterior() {
        if (configuredInterior() == undefined) return false;
        return _.any(equipments(), function (x) {
            return x.containsForcedItem(configuredInterior().code);
        }) || configuredColor() && configuredColor().containsForcedItem(configuredInterior().code) || _.any(modelCompulsory(), function (x) {
            return x.code == configuredInterior().code;
        });
    }

    function hasColor() {
        return !_.isUndefined(configuredColor());
    }

    function hasInterior() {
        return !_.isUndefined(configuredInterior());
    }

    function hasModel() {
        return !_.isUndefined(modelId());
    }

    function hasEquipment(equipmentCode) {
        return _.any(equipments(), function (x) {
            return x.code == equipmentCode;
        }) || _.any(modelCompulsory(), function (x) {
            return x.code == equipmentCode;
        }) || configuredColor() && configuredColor().containsForcedItem(equipmentCode) || configuredInterior() && configuredInterior().containsForcedItem(equipmentCode);
    }

    function colorHasChanged(newConfiguration) {
        return configuredColor() && newConfiguration.color && configuredColor().code != newConfiguration.color.code;
    }

    function interiorHasChanged(newConfiguration) {
        return configuredInterior() && newConfiguration.interior && configuredInterior().code != newConfiguration.interior.code;
    }

    return {
        modelId: modelId,
        modelDescription: modelDescription,
        equipments: equipments,
        modelCompulsory: modelCompulsory,
        setModelGroupCode: setModelGroupCode,
        setModel: setModel,
        setColor: setColor,
        setInterior: setInterior,
        addEquipment: addEquipment,
        addCompulsory: addCompulsory,
        clean: clean,
        removeModel: removeModel,
        toJson: toJson,
        hasColor: hasColor,
        hasInterior: hasInterior,
        hasForcedColor: hasForcedColor,
        hasForcedInterior: hasForcedInterior,
        configuredColor: configuredColor,
        configuredInterior: configuredInterior,
        colorHasChanged: colorHasChanged,
        interiorHasChanged: interiorHasChanged,
        canSaveOrder: canSaveOrder,
        showOrderCreation: showOrderCreation,
        cleanSelections: cleanSelections,
        setAutofixes: setAutofixes,
        unableToRebuildItems: unableToRebuildItems,
        addUnableToRebuildItem: addUnableToRebuildItem,
        removeUnableToRebuildItem: removeUnableToRebuildItem,
        isNotTheSameModel: isNotTheSameModel,
        hasEquipment: hasEquipment,
        isEmpty: isEmpty
    };
}

module.exports = exports['default'];

},{}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = SelectableItem;

function SelectableItem(catalogItem, isTypePackage) {
    var selected = ko.observable(catalogItem.esmEquipment);
    var forcedItems = ko.observableArray();

    function contains(text) {
        if (!text) return false;
        return catalogItem.description.toUpperCase().indexOf(text.toUpperCase()) != -1 || catalogItem.code.toUpperCase().indexOf(text.toUpperCase()) != -1;
    }

    function isInCatalog() {
        return catalogItem.description != '';
    }

    function setCombination(combination) {
        forcedItems.removeAll();
        ko.utils.arrayPushAll(forcedItems, combination.items);
    }

    function toJson() {
        return {
            code: catalogItem.code,
            description: catalogItem.description,
            combination: combinationsToJson(),
            isPackage: isPackage
        };
    }

    function combinationsToJson() {
        return _.map(forcedItems(), function (x) {
            return { code: x.code, type: x.type };
        });
    }

    function containsForcedItem(code) {
        return _.any(forcedItems(), function (x) {
            return x.code == code;
        });
    }

    function isPackage() {
        return isTypePackage;
    }

    var self = {
        category: catalogItem.category,
        family: catalogItem.family,
        description: catalogItem.code + " - " + catalogItem.description,
        descriptionWithoutCode: catalogItem.description,
        selected: selected,
        contains: contains,
        containsForcedItem: containsForcedItem,
        code: catalogItem.code,
        type: catalogItem.type,
        isInCatalog: isInCatalog,
        hasForcedCombinations: catalogItem.hasForcedCombinations,
        compulsoryCombinations: catalogItem.compulsoryCombinations,
        toJson: toJson,
        setCombination: setCombination,
        isPackage: isPackage
    };
    return self;
}

module.exports = exports["default"];

},{}],16:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"row\">\n    <div class=\"col-md-8\">\n        <div class=\"box box-default\">\n            <div class=\"box-header with-border\">\n                <h3 class=\"box-title\" data-bind=\"text: labels.title\"></h3>\n            </div>\n            <div class=\"box-body\">\n                <div class=\"form-horizontal\">\n                    <model-selector params=\"selectedBrand: selectedBrand,\n                                            selectedModel: selectedModel,\n                                            whenModelSelected: whenModelSelected, \n                                            whenModelUnselected: whenModelUnselected, \n                                            whenModelCategorySelected: whenModelCategorySelected,\n                                            whenModelCategoryUnselected: whenModelCategoryUnselected,\n                                            loadedModel: loadedModel\">\n                    </model-selector>\n                    <color-selector params=\"options: colorOptions, selected: selectedColor\"></color-selector>\n                    <interior-selector params=\"options: interiorOptions, selected: selectedInterior\"></interior-selector>\n                </div>\n            </div>\n            <spinner params=\"show: loadingCatalog\"></spinner>\n        </div>\n        <equipments-selector params=\"equipments: availableEquipments, \n                                    whenEquipmentSelected: whenEquipmentSelected,\n                                    whenEquipmentUnselected: whenEquipmentUnselected,\n                                    loadingFlag: loadingCatalog\">\n        </equipments-selector>\n        <combination-selector params=\"visible: combinationSelectorVisible, options: combinationOptions, isSelectionMandatory: isCombinationMandatory, whenSelected: whenCombinationSelected\"></combination-selector>\n    </div>\n    <div class=\"col-md-4\">\n        <!-- ko template: { nodes: $componentTemplateNodes, data: $parent } --><!-- /ko -->                                       \n    </div>\n</div>";
module.exports = exports["default"];

},{}],17:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = Configurator;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _configuratorTemplate = require('./configurator-template');

var _configuratorTemplate2 = _interopRequireDefault(_configuratorTemplate);

var _scriptsModelCatalogSelectables = require('./scripts/modelCatalogSelectables');

var _scriptsModelCatalogSelectables2 = _interopRequireDefault(_scriptsModelCatalogSelectables);

var _infrastructureClientsCatalogClient = require('../../infrastructure/clients/catalogClient');

var _infrastructureClientsCatalogClient2 = _interopRequireDefault(_infrastructureClientsCatalogClient);

var _infrastructureClientsConfigurationClient = require('../../infrastructure/clients/configurationClient');

var _infrastructureClientsConfigurationClient2 = _interopRequireDefault(_infrastructureClientsConfigurationClient);

var _scriptsModelConfiguration = require('./scripts/modelConfiguration');

var _scriptsModelConfiguration2 = _interopRequireDefault(_scriptsModelConfiguration);

var _scriptsConfiguratorApplier = require('./scripts/configuratorApplier');

var _scriptsConfiguratorApplier2 = _interopRequireDefault(_scriptsConfiguratorApplier);

var _scriptsConfiguratorNotifier = require('./scripts/configuratorNotifier');

var _scriptsConfiguratorNotifier2 = _interopRequireDefault(_scriptsConfiguratorNotifier);

var _scriptsColorConfigurator = require('./scripts/colorConfigurator');

var _scriptsColorConfigurator2 = _interopRequireDefault(_scriptsColorConfigurator);

var _scriptsInteriorConfigurator = require('./scripts/interiorConfigurator');

var _scriptsInteriorConfigurator2 = _interopRequireDefault(_scriptsInteriorConfigurator);

var _scriptsCombinationSelectorBindings = require('./scripts/combinationSelectorBindings');

var _scriptsCombinationSelectorBindings2 = _interopRequireDefault(_scriptsCombinationSelectorBindings);

var _scriptsCombinationsBuilder = require('./scripts/combinationsBuilder');

var _scriptsCombinationsBuilder2 = _interopRequireDefault(_scriptsCombinationsBuilder);

aidaCore.ComponentRegister('configurator', {
    script: function script(props, dependencyProvider) {
        var selectedBrand = props.selectedBrand;
        var whenConfigurationChanged = props.whenConfigurationChanged;
        var loadedConfiguration = props.loadedConfiguration;

        var translator = dependencyProvider.getTranslator();
        var catalogClient = (0, _infrastructureClientsCatalogClient2['default'])(dependencyProvider.getRestClient(), dependencyProvider.getErrorDialogPublisher(), {});
        var configurationClient = (0, _infrastructureClientsConfigurationClient2['default'])(dependencyProvider.getRestClient(), dependencyProvider.getErrorDialogPublisher(), {}, selectedBrand());
        var dialogPublisher = dependencyProvider.getDialogPublisher();

        return Configurator({ selectedBrand: selectedBrand, whenConfigurationChanged: whenConfigurationChanged, loadedConfiguration: loadedConfiguration }, { translator: translator, catalogClient: catalogClient, configurationClient: configurationClient, dialogPublisher: dialogPublisher });
    },
    template: _configuratorTemplate2['default']
});

function Configurator(_ref, _ref2) {
    var selectedBrand = _ref.selectedBrand;
    var whenConfigurationChanged = _ref.whenConfigurationChanged;
    var loadedConfiguration = _ref.loadedConfiguration;
    var translator = _ref2.translator;
    var catalogClient = _ref2.catalogClient;
    var configurationClient = _ref2.configurationClient;
    var dialogPublisher = _ref2.dialogPublisher;

    var currentCatalog = undefined;
    var loadingCatalog = ko.observable(false);
    var selectedModel = ko.observable();
    var configuration = (0, _scriptsModelConfiguration2['default'])();
    var colorConfigurator = (0, _scriptsColorConfigurator2['default'])(whenColorIsSelected);
    var interiorConfigurator = (0, _scriptsInteriorConfigurator2['default'])(whenInteriorIsSelected);
    var availableEquipments = ko.observableArray([]);
    var configuratorNotifier = (0, _scriptsConfiguratorNotifier2['default'])(dialogPublisher, translator);
    var combinationBuilder = (0, _scriptsCombinationsBuilder2['default'])(dialogPublisher, translator);
    var configuratorApplier = (0, _scriptsConfiguratorApplier2['default'])(configuratorNotifier, combinationBuilder, whenConfigurationIsApplied);
    var combinationSelectorBindings = (0, _scriptsCombinationSelectorBindings2['default'])(dialogPublisher, translator);
    var loadedModel = ko.observable();
    var loadedConfigurationChanged = false;

    loadedConfiguration.subscribe(loadConfiguration);

    function whenConfigurationIsApplied(newConfiguration) {
        whenConfigurationChanged(newConfiguration.toJson());
        interiorConfigurator.setOptionsForSelectedColor(newConfiguration, currentCatalog);
        colorConfigurator.setOptionsForSelectedInterior(newConfiguration, currentCatalog);
        whenModelLoaded();
    }

    function whenModelLoaded() {
        if (!loadedConfigurationChanged) return;

        setColorForConfiguration(loadedConfiguration().color);
        setInteriorForConfiguration(loadedConfiguration().interior);
        setEquipmentForConfiguration(loadedConfiguration().equipments);
        loadedConfigurationChanged = false;
        whenConfigurationChanged(configuration.toJson());
    }

    // load configuration without call to server to avoid validate the configuration rules.
    function loadConfiguration(newConfiguration) {
        configuration.clean();
        loadedConfigurationChanged = true;
        loadedModel(newConfiguration.modelKey);
    }

    function setColorForConfiguration(color) {
        var colorToLoad = _(currentCatalog.colors).find(function (x) {
            return x.code == color.code;
        });
        configuration.setColor(colorToLoad);
        colorConfigurator.selected(colorToLoad);
    }

    function setInteriorForConfiguration(interior) {
        var interiorToLoad = _(currentCatalog.interiors).find(function (x) {
            return x.code == interior.code;
        });
        configuration.setInterior(interiorToLoad);
        interiorConfigurator.selected(interiorToLoad);
    }

    function setEquipmentForConfiguration(equipment) {
        var equipmentToLoad = getAllCatalogEquipmentForConfiguration(equipment);
        configuration.equipments(equipmentToLoad);
        selectAllEquipment(equipmentToLoad);
    }

    function getAllCatalogEquipmentForConfiguration(allLoadedConfigurationEquipment) {
        var allCatalogEquipments = _(currentCatalog.equipments.concat(currentCatalog.packages)).value();
        return _(allCatalogEquipments).filter(function (x) {
            return _(allLoadedConfigurationEquipment).any(function (e) {
                return x.code == e.code;
            });
        }).value();
    }

    function selectAllEquipment(equipmentToLoad) {
        _(equipmentToLoad).forEach(function (equipment) {
            return equipment.selected(true);
        }).value();
    }

    function whenModelCategorySelected(categoryId) {
        configuration.clean();
        configuration.setModelGroupCode(getModelGroupCodeFrom(categoryId));
        whenConfigurationChanged(configuration.toJson());
    }

    function getModelGroupCodeFrom(categoryId) {
        return categoryId.substring(0, categoryId.indexOf("_"));
    }

    function whenModelCategoryUnselected() {
        configuration.clean();
        selectedModel(undefined);
        whenConfigurationChanged(configuration.toJson());
        cleanCatalog();
    }

    function whenModelSelected(model) {
        configuration.setModel(model);
        loadingCatalog(true);
        catalogClient.getCatalog(selectedBrand().id, configuration.modelId(), whenCatalogReceived, onCatalogError);
    }

    function whenModelUnselected() {
        configuration.removeModel();
        selectedModel(undefined);
        whenConfigurationChanged(configuration.toJson());
        cleanCatalog();
    }

    function cleanCatalog() {
        if (_.isObject(currentCatalog)) {
            currentCatalog.clean();
            initializeSelectors();
        }
    }

    function whenCatalogReceived(catalogJson) {
        loadingCatalog(false);
        currentCatalog = (0, _scriptsModelCatalogSelectables2['default'])(configuration.modelId(), configuration.modelDescription(), catalogJson);
        initializeSelectors();
        var model = currentCatalog.getModel();
        if (model.compulsoryCombinations && model.compulsoryCombinations.length > 1) {
            combinationSelectorBindings.updateToShowAsMandatory(model.code, model.compulsoryCombinations, currentCatalog, whenModelCombinationIsSelected);
        } else {
            configurationClient.createConfiguration(selectedBrand().id, model, whenConfigurationApplied, onConfigurationError);
        }
    }

    function onCatalogError() {
        loadingCatalog(false);
    }

    function onConfigurationError() {
        selectedModel(undefined);
    }

    function whenColorIsSelected(color) {
        if (configuration.isEmpty() || loadedConfigurationChanged) return;

        if (color && color.hasForcedCombinations) {
            combinationSelectorBindings.updateToShow(color.code, color.compulsoryCombinations, currentCatalog, whenColorCombinationSelected);
            return;
        }
        if (color) {
            configurationClient.changeColorWithoutCombination(configuration, color.code, whenConfigurationApplied, restoreConfiguredColor);
        } else {
            configurationClient.removeColor(configuration, whenConfigurationApplied);
        }
    }

    function whenInteriorIsSelected(interior) {
        if (configuration.isEmpty() || loadedConfigurationChanged) return;

        if (_.isObject(interior) && interior.hasForcedCombinations) {
            combinationSelectorBindings.updateToShow(interior.code, interior.compulsoryCombinations, currentCatalog, whenInteriorCombinationSelected);
            return;
        }
        if (_.isObject(interior)) {
            configurationClient.changeInteriorWithoutCombination(configuration, interior.code, whenConfigurationApplied, restoreConfiguredInterior);
        } else {
            configurationClient.removeInterior(configuration, whenConfigurationApplied);
        }
    }

    function whenEquipmentSelected(equipment) {
        if (equipment.hasForcedCombinations) {
            combinationSelectorBindings.updateToShow(equipment.code, equipment.compulsoryCombinations, currentCatalog, whenEquipmentWithCombinationSelected);
            return;
        }
        if (equipment.isPackage()) {
            configurationClient.addPackageWithoutCombination(configuration, equipment.code, whenConfigurationApplied);
        } else {
            configurationClient.addEquipmentWithoutCombination(configuration, equipment.code, whenConfigurationApplied);
        }
    }

    function whenEquipmentUnselected(equipment) {
        if (equipment.isPackage()) {
            configurationClient.removePackage(configuration, equipment.code, whenConfigurationApplied);
        } else {
            configurationClient.removeEquipment(configuration, equipment.code, whenConfigurationApplied);
        }
    }

    function initializeSelectors() {
        colorConfigurator.initializeSelector(currentCatalog.colors);
        interiorConfigurator.initializeSelector(currentCatalog.interiors);
        availableEquipments(currentCatalog.packages.concat(currentCatalog.equipments));
    }

    function whenModelCombinationIsSelected(selectedCombination) {
        configurationClient.createConfigurationWithCombination(selectedBrand().id, selectedCombination, whenConfigurationApplied, onConfigurationError);
    }

    function whenColorCombinationSelected(selectedCombination) {
        if (_.isObject(selectedCombination)) {
            configurationClient.changeColor(configuration, selectedCombination, whenConfigurationApplied, restoreConfiguredColor);
            return;
        }
        restoreConfiguredColor();
    }

    function whenInteriorCombinationSelected(selectedCombination) {
        if (_.isObject(selectedCombination)) {
            configurationClient.changeInterior(configuration, selectedCombination, whenConfigurationApplied, restoreConfiguredInterior);
            return;
        }
        restoreConfiguredInterior();
    }

    function whenEquipmentWithCombinationSelected(selectedCombination) {
        if (!_.isObject(selectedCombination)) return;

        if (selectedCombination.root.isPackage()) {
            configurationClient.addPackage(configuration, selectedCombination, whenConfigurationApplied);
        } else {
            configurationClient.addEquipment(configuration, selectedCombination, whenConfigurationApplied);
        }
    }

    function whenConfigurationApplied(newConfiguration, actionType) {
        configuratorApplier.applyConfiguration(configuration, newConfiguration, actionType, currentCatalog);
    }

    function restoreConfiguredColor() {
        colorConfigurator.selected(configuration.configuredColor());
    }

    function restoreConfiguredInterior() {
        interiorConfigurator.selected(configuration.configuredInterior());
    }

    function getLabels() {
        return {
            title: translator.translate('SharedDomain.Filters')
        };
    }

    return {
        labels: getLabels(),
        selectedBrand: selectedBrand,
        selectedModel: selectedModel,
        colorOptions: colorConfigurator.options,
        selectedColor: colorConfigurator.selected,
        interiorOptions: interiorConfigurator.options,
        selectedInterior: interiorConfigurator.selected,
        availableEquipments: availableEquipments,
        whenModelSelected: whenModelSelected,
        whenModelUnselected: whenModelUnselected,
        whenModelCategorySelected: whenModelCategorySelected,
        whenModelCategoryUnselected: whenModelCategoryUnselected,
        whenEquipmentSelected: whenEquipmentSelected,
        whenEquipmentUnselected: whenEquipmentUnselected,
        combinationSelectorVisible: combinationSelectorBindings.combinationSelectorVisible,
        isCombinationMandatory: combinationSelectorBindings.isCombinationMandatory,
        combinationOptions: combinationSelectorBindings.combinationOptions,
        whenCombinationSelected: combinationSelectorBindings.whenSelected,
        selectedEquipment: configuration.equipments,
        loadingCatalog: loadingCatalog,
        loadedModel: loadedModel
    };
}

module.exports = exports['default'];

},{"../../infrastructure/clients/catalogClient":42,"../../infrastructure/clients/configurationClient":43,"./configurator-template":16,"./scripts/colorConfigurator":18,"./scripts/combinationSelectorBindings":20,"./scripts/combinationsBuilder":21,"./scripts/configuratorApplier":22,"./scripts/configuratorNotifier":23,"./scripts/interiorConfigurator":24,"./scripts/modelCatalogSelectables":25,"./scripts/modelConfiguration":26}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = ColorConfigurator;

function ColorConfigurator(whenColorIsSelected) {

    var colorOptions = ko.observableArray([]);
    var colorSelected = ko.observable();

    colorSelected.subscribe(function () {
        whenColorIsSelected(colorSelected());
    });

    function initializeSelector(colors) {
        colorOptions.removeAll();
        ko.utils.arrayPushAll(colorOptions, colors);
        colorSelected(undefined);
    }

    function setOptionsForSelectedInterior(modelConfiguration, catalog) {
        if (!modelConfiguration.hasInterior()) {
            colorOptions(catalog.colors);
        } else {
            colorOptions(catalog.compatibleColorsWith(modelConfiguration.configuredInterior().code));
        }
    }

    return {
        options: colorOptions,
        selected: colorSelected,
        initializeSelector: initializeSelector,
        setOptionsForSelectedInterior: setOptionsForSelectedInterior
    };
}

module.exports = exports["default"];

},{}],19:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = Combination;

function Combination(root, items, dialogPublisher, translator) {
    var whenSelectedCallback = function whenSelectedCallback() {};

    function select() {
        if (anyEquipmentIsNotInCatalog()) {
            dialogPublisher.error({ title: translator.translate("Configurator.AnyEquipmentIsNotInCatalog.Error") });
            return;
        }
        whenSelectedCallback(self);
    }

    function anyEquipmentIsNotInCatalog() {
        return _.find(items, function (x) {
            return !x.isInCatalog();
        }) != undefined;
    }

    function selectItems() {
        root.selected(true);
        _.each(items, function (x) {
            return x.selected(true);
        });
    }

    function whenSelected(callback) {
        whenSelectedCallback = callback;
    }

    var self = {
        root: root,
        items: items,
        select: select,
        whenSelected: whenSelected,
        selectItems: selectItems
    };

    return self;
}

module.exports = exports["default"];

},{}],20:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = CombinationSelectorBindings;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _combinationsBuilder = require('./combinationsBuilder');

var _combinationsBuilder2 = _interopRequireDefault(_combinationsBuilder);

function CombinationSelectorBindings(dialogPublisher, translator) {

    var combinationsBuilder = (0, _combinationsBuilder2['default'])(dialogPublisher, translator);
    var combinationOptions = ko.observable();
    var isCombinationMandatory = ko.observable(false);
    var whenCombinationSelectedCallback = function whenCombinationSelectedCallback() {};
    var combinationSelectorVisible = ko.observable(false);

    function updateToShowAsMandatory(itemCode, combinations, selectableCatalog, callback) {
        var isMandatory = true;
        update(itemCode, combinations, selectableCatalog, isMandatory, callback);
    }

    function updateToShow(itemCode, combinations, selectableCatalog, callback) {
        var isMandatory = false;
        update(itemCode, combinations, selectableCatalog, isMandatory, callback);
    }

    function update(itemCode, combinations, selectableCatalog, isMandatory, callback) {
        var combinationsForThisItem = combinationsBuilder.buildFor(itemCode, combinations, selectableCatalog);
        combinationOptions(combinationsForThisItem);
        isCombinationMandatory(isMandatory);
        whenCombinationSelectedCallback = callback;
        combinationSelectorVisible(true);
    }

    return {
        updateToShow: updateToShow,
        updateToShowAsMandatory: updateToShowAsMandatory,
        combinationSelectorVisible: combinationSelectorVisible,
        isCombinationMandatory: isCombinationMandatory,
        combinationOptions: combinationOptions,
        whenSelected: function whenSelected(selected) {
            return whenCombinationSelectedCallback(selected);
        }
    };
}

module.exports = exports['default'];

},{"./combinationsBuilder":21}],21:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = CombinationsBuilder;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _combination = require('./combination');

var _combination2 = _interopRequireDefault(_combination);

function CombinationsBuilder(dialogPublisher, translator) {

    function buildFor(itemCode, combinations, catalog) {
        var rootOfCombinationEquipment = catalog.findItem(itemCode);
        return _.map(combinations, function (combination) {
            return buildCombinationFor(rootOfCombinationEquipment, combination, catalog);
        });
    }

    function buildCombinationFor(rootItem, combination, catalog) {
        var combinationCodes = _.map(combination, function (item) {
            return item.code;
        });
        var catalogItems = catalog.findItems(combinationCodes);
        return (0, _combination2['default'])(rootItem, catalogItems, dialogPublisher, translator);
    }

    return {
        buildFor: buildFor,
        buildCombinationFor: buildCombinationFor
    };
}

module.exports = exports['default'];

},{"./combination":19}],22:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = ConfiguratorApplier;

function ConfiguratorApplier(configuratorNotifier, combinationBuilder, whenConfigurationChanged) {

    var EmptyInterior = undefined;

    function applyConfiguration(modelConfiguration, newConfiguration, actionType, selectableCatalog) {
        var newAutofixes = _.filter(newConfiguration.autoFixes, function (x) {
            return x.isNewAutofix;
        });
        if (newAutofixes.length > 0) {
            configuratorNotifier.notifyAutofixesConfirmation(newAutofixes, function () {
                return continueApply(modelConfiguration, newConfiguration, actionType, selectableCatalog);
            });
        } else {
            continueApply(modelConfiguration, newConfiguration, actionType, selectableCatalog);
        }
    }

    function continueApply(modelConfiguration, newConfiguration, actionType, selectableCatalog) {
        configuratorNotifier.notifyChangesInConfiguration(modelConfiguration, newConfiguration, actionType);
        commitApply(modelConfiguration, newConfiguration, selectableCatalog);
    }

    function commitApply(modelConfiguration, newConfiguration, selectableCatalog) {
        clearAllSelections(modelConfiguration, selectableCatalog);

        modelConfiguration.setAutofixes(newConfiguration.autoFixes);

        applyModelCompulsory(modelConfiguration, newConfiguration, selectableCatalog);
        applyEquipmentsAndPackages(modelConfiguration, newConfiguration, selectableCatalog);
        applyColor(modelConfiguration, newConfiguration, selectableCatalog);
        applyInterior(modelConfiguration, newConfiguration, selectableCatalog);
        whenConfigurationChanged(modelConfiguration);
    }

    function clearAllSelections(modelConfiguration, selectableCatalog) {
        modelConfiguration.cleanSelections();
        selectableCatalog.unselectAll();
    }

    function applyModelCompulsory(modelConfiguration, newConfiguration, selectableCatalog) {
        if (!newConfiguration.modelCompulsory || !newConfiguration.modelCompulsory.combinedItems) return;

        _.each(newConfiguration.modelCompulsory.combinedItems, function (x) {
            var item = selectableCatalog.findItem(x.code);
            item.selected(true);
            modelConfiguration.addCompulsory(item);
        });
    }

    function applyEquipmentsAndPackages(modelConfiguration, newConfiguration, selectableCatalog) {
        var equipmentsAndPackages = _(newConfiguration.equipments).concat(newConfiguration.packages).value();
        _.each(equipmentsAndPackages, function (x) {
            var item = selectableCatalog.findItem(x.code);
            item.selected(true);
            applyCombination(item, x.combination, selectableCatalog);
            modelConfiguration.addEquipment(item);
        });
    }

    function applyColor(modelConfiguration, newConfiguration, selectableCatalog) {
        var colorSelectable = undefined;
        if (_.isObject(newConfiguration.color)) {
            colorSelectable = selectableCatalog.findItem(newConfiguration.color.code);
            applyCombination(colorSelectable, newConfiguration.color.combination, selectableCatalog);
        }
        modelConfiguration.setColor(colorSelectable);
    }

    function applyCombination(catalogItem, combinationToApply, selectableCatalog) {
        if (combinationToApply && combinationToApply.length > 0) {
            var combination = combinationBuilder.buildCombinationFor(catalogItem, combinationToApply, selectableCatalog);
            combination.selectItems();
            catalogItem.setCombination(combination);
        }
    }

    function applyInterior(modelConfiguration, newConfiguration, selectableCatalog) {
        var interiorSelectable = EmptyInterior;
        if (_.isObject(newConfiguration.interior)) {
            interiorSelectable = selectableCatalog.findItem(newConfiguration.interior.code);
            applyCombination(interiorSelectable, newConfiguration.interior.combination, selectableCatalog);
        }
        modelConfiguration.setInterior(interiorSelectable);
    }

    return {
        applyConfiguration: applyConfiguration,
        continueApply: continueApply
    };
}

module.exports = exports["default"];

},{}],23:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = ConfiguratorNotifier;

function ConfiguratorNotifier(dialogPublisher, translator) {

    function notifyChangesInConfiguration(modelConfiguration, newConfiguration, actionType) {
        var message = undefined;
        if (modelConfiguration.colorHasChanged(newConfiguration) && !actionType.IsChangeColor()) {
            message = translator.translate("Configurator.NotifyChangeColor.Message");
        }

        if (modelConfiguration.interiorHasChanged(newConfiguration) && !actionType.IsChangeInterior()) {
            if (message) message += " " + translator.translate("Configurator.NotifyChangeInteriorAndColor.Message");else message = translator.translate("Configurator.NotifyChangeInterior.Message");
        }

        if (message) {
            dialogPublisher.warning({ title: translator.translate("SharedDomain.Warning.Text"), message: message });
        }
    }

    function notifyAutofixesConfirmation(newAutofixes, whenConfirmed) {
        var fixesAsString = _.reduce(newAutofixes, function (acc, fix) {
            return acc + "- " + translator.translate("Configurator.ApplyConfiguration.Message", [fix.addedItem, fix.removedItem]) + '<br>';
        }, "");
        fixesAsString += "<br>" + translator.translate("Configurator.OkToContinue.Message");
        dialogPublisher.confirmation({
            title: translator.translate("Configurator.ApplyConfigurationConfirmation.Message"),
            message: fixesAsString,
            callback: whenConfirmed
        });
    }

    return {
        notifyChangesInConfiguration: notifyChangesInConfiguration,
        notifyAutofixesConfirmation: notifyAutofixesConfirmation
    };
}

module.exports = exports["default"];

},{}],24:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = InteriorConfigurator;

function InteriorConfigurator(whenInteriorIsSelected) {

    var interiorOptions = ko.observableArray([]);
    var interiorSelected = ko.observable();

    interiorSelected.subscribe(function () {
        whenInteriorIsSelected(interiorSelected());
    });

    function initializeSelector(interiors) {
        interiorOptions.removeAll();
        ko.utils.arrayPushAll(interiorOptions, interiors);
        interiorSelected(undefined);
    }

    function setOptionsForSelectedColor(modelConfiguration, catalog) {
        if (!modelConfiguration.hasColor()) {
            interiorOptions(catalog.interiors);
        } else {
            interiorOptions(catalog.compatibleInteriorsWith(modelConfiguration.configuredColor().code));
        }
    }

    return {
        options: interiorOptions,
        selected: interiorSelected,
        initializeSelector: initializeSelector,
        setOptionsForSelectedColor: setOptionsForSelectedColor
    };
}

module.exports = exports["default"];

},{}],25:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = ModelCatalogSelectables;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _selectableItem = require("./selectableItem");

var _selectableItem2 = _interopRequireDefault(_selectableItem);

function ModelCatalogSelectables(modelCode, modelDescription, catalogJson) {

    var colors = createSelectableColorsFrom(catalogJson);
    var interiors = createSelectableInteriorsFrom(catalogJson);
    var equipments = createSelectableEquipmentsFrom(catalogJson);
    var packages = createSelectablePackagesFrom(catalogJson);
    var model = (0, _selectableItem2["default"])({
        code: modelCode,
        description: modelDescription,
        hasForcedCombinations: catalogJson.modelCompulsoryCombinationChoices && catalogJson.modelCompulsoryCombinationChoices.length > 0,
        compulsoryCombinations: catalogJson.modelCompulsoryCombinationChoices
    });

    var allItems = _(model).concat(interiors, colors, equipments, packages).value();

    function addRelationship(colorCode, interiorCode) {
        if (_.find(catalogJson.relationship, function (x) {
            return x.colorCode == colorCode && x.interiorCode == interiorCode;
        })) return;
        catalogJson.relationship.push({ colorCode: colorCode, interiorCode: interiorCode });
    }

    function addColor(colorToAdd) {
        var color = (0, _selectableItem2["default"])({
            code: colorToAdd.code,
            description: colorToAdd.description });
        colors.push(color);
        allItems.push(color);
    }

    function addInterior(interiorToAdd) {
        var interior = (0, _selectableItem2["default"])({
            code: interiorToAdd.code,
            description: interiorToAdd.description });
        interiors.push(interior);
        allItems.push(interior);
    }

    function clean() {
        equipments.length = 0;
        interiors.length = 0;
        colors.length = 0;
        packages.length = 0;
        allItems.length = 0;
    }

    function getModel() {
        return model;
    }

    function createSelectablePackagesFrom(catalogJson) {
        return _.map(catalogJson.packages, function (x) {
            return (0, _selectableItem2["default"])(x, true);
        });
    }

    function createSelectableEquipmentsFrom(catalogJson) {
        return _.map(catalogJson.equipments, function (x) {
            return (0, _selectableItem2["default"])(x, false);
        });
    }

    function createSelectableInteriorsFrom(catalogJson) {
        return _.map(catalogJson.interiors, function (x) {
            return (0, _selectableItem2["default"])(x);
        });
    }

    function createSelectableColorsFrom(catalogJson) {
        return _.map(catalogJson.colors, function (x) {
            return (0, _selectableItem2["default"])(x);
        });
    }

    function findItems(codes) {
        return _.map(codes, function (code) {
            return findItem(code);
        });
    }

    function findItem(code) {
        var item = _.find(allItems, function (x) {
            return x.code == code;
        });
        if (_.isUndefined(item)) {
            return createEmptySelectableItem(code);
        }
        return item;
    }

    function createEmptySelectableItem(code) {
        return (0, _selectableItem2["default"])({ esmEquipment: false, code: code, description: '' });
    }

    function unselectAll() {
        _.each(allItems, function (x) {
            return x.selected(false);
        });
    }

    function compatibleColorsWith(interiorCode) {
        var interiorRelationships = _.filter(catalogJson.relationship, function (x) {
            return x.interiorCode == interiorCode;
        });
        return _.map(interiorRelationships, function (x) {
            return findColor(x.colorCode);
        });
    }

    function findColor(colorCode) {
        return _.find(colors, function (x) {
            return x.code == colorCode;
        });
    }

    function compatibleInteriorsWith(colorCode) {
        var colorRelationships = _.filter(catalogJson.relationship, function (x) {
            return x.colorCode == colorCode;
        });
        return _.map(colorRelationships, function (x) {
            return findInterior(x.interiorCode);
        });
    }

    function findInterior(interiorCode) {
        return _.find(interiors, function (x) {
            return x.code == interiorCode;
        });
    }

    return {
        equipments: equipments,
        packages: packages,
        colors: colors,
        interiors: interiors,
        findItem: findItem,
        findItems: findItems,
        unselectAll: unselectAll,
        compatibleColorsWith: compatibleColorsWith,
        compatibleInteriorsWith: compatibleInteriorsWith,
        getModel: getModel,
        clean: clean,
        addColor: addColor,
        addInterior: addInterior,
        addRelationship: addRelationship
    };
}

module.exports = exports["default"];

},{"./selectableItem":27}],26:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = ModelConfiguration;

function ModelConfiguration() {
    var modelGroupCode = undefined;
    var modelId = ko.observable();
    var modelDescription = ko.observable();
    var equipments = ko.observableArray();
    var configuredColor = ko.observable();
    var configuredInterior = ko.observable();
    var modelCompulsory = ko.observableArray();
    var showOrderCreation = ko.observable(false);
    var unableToRebuildItems = ko.observableArray();
    var isAVersion = ko.observable();
    var modelAutofixes = undefined;
    var modelCode = undefined;

    function addUnableToRebuildItem(item) {
        unableToRebuildItems.push(item);
    }

    function removeUnableToRebuildItem(item) {
        unableToRebuildItems.remove(item);
    }

    function setAutofixes(autofixes) {
        modelAutofixes = autofixes;
    }

    function canSaveOrder() {
        return hasModel() && hasColor() && hasInterior();
    }

    function addEquipment(equipment) {
        equipments.remove(equipment);
        equipments.push(equipment);
    }

    function addCompulsory(combinedItem) {
        modelCompulsory.push(combinedItem);
    }

    function setModelGroupCode(modelGroup) {
        modelGroupCode = modelGroup;
    }

    function setModel(model) {
        removeModel();
        modelCode = model.key.code;
        modelId(model.key.id);
        modelDescription(model.description);
        isAVersion(model.isAVersion);
    }

    function isNotTheSameModel(model) {
        return model.key.code != modelCode;
    }

    function clean() {
        modelGroupCode = '';
        modelCode = '';
        modelId(undefined);
        modelDescription(undefined);
        cleanSelections();
    }

    function removeModel() {
        modelCode = '';
        modelId(undefined);
        modelDescription(undefined);
        cleanSelections();
    }

    function cleanSelections() {
        showOrderCreation(false);
        equipments.removeAll();
        modelCompulsory.removeAll();
        configuredColor(undefined);
        configuredInterior(undefined);
    }

    function setColor(color) {
        configuredColor(color);
    }

    function setInterior(interior) {
        configuredInterior(interior);
    }

    function isEmpty() {
        return !hasModel();
    }

    function toJson() {
        return {
            modelGroupCode: modelGroupCode,
            modelKey: { id: modelId(), code: modelCode, description: modelDescription(), isAVersion: isAVersion() },
            color: configuredColor() != undefined ? configuredColor().toJson() : {},
            interior: configuredInterior() != undefined ? configuredInterior().toJson() : {},
            equipments: _.map(equipments(), function (x) {
                return x.toJson();
            }),
            modelCompulsory: {
                combinedItems: _.map(modelCompulsory(), function (x) {
                    return { code: x.code, type: x.type };
                })
            },
            autoFixes: modelAutofixes
        };
    }

    function hasForcedColor() {
        if (configuredColor() == undefined) return false;

        return _.any(equipments(), function (x) {
            return x.containsForcedItem(configuredColor().code);
        }) || configuredInterior() && configuredInterior().containsForcedItem(configuredColor().code) || _.any(modelCompulsory(), function (x) {
            return x.code == configuredColor().code;
        });
    }

    function hasForcedInterior() {
        if (configuredInterior() == undefined) return false;
        return _.any(equipments(), function (x) {
            return x.containsForcedItem(configuredInterior().code);
        }) || configuredColor() && configuredColor().containsForcedItem(configuredInterior().code) || _.any(modelCompulsory(), function (x) {
            return x.code == configuredInterior().code;
        });
    }

    function hasColor() {
        return !_.isUndefined(configuredColor());
    }

    function hasInterior() {
        return !_.isUndefined(configuredInterior());
    }

    function hasModel() {
        return !_.isUndefined(modelId());
    }

    function hasEquipment(equipmentCode) {
        return _.any(equipments(), function (x) {
            return x.code == equipmentCode;
        }) || _.any(modelCompulsory(), function (x) {
            return x.code == equipmentCode;
        }) || configuredColor() && configuredColor().containsForcedItem(equipmentCode) || configuredInterior() && configuredInterior().containsForcedItem(equipmentCode);
    }

    function colorHasChanged(newConfiguration) {
        return configuredColor() && newConfiguration.color && configuredColor().code != newConfiguration.color.code;
    }

    function interiorHasChanged(newConfiguration) {
        return configuredInterior() && newConfiguration.interior && configuredInterior().code != newConfiguration.interior.code;
    }

    return {
        modelId: modelId,
        modelDescription: modelDescription,
        equipments: equipments,
        modelCompulsory: modelCompulsory,
        setModelGroupCode: setModelGroupCode,
        setModel: setModel,
        setColor: setColor,
        setInterior: setInterior,
        addEquipment: addEquipment,
        addCompulsory: addCompulsory,
        clean: clean,
        removeModel: removeModel,
        toJson: toJson,
        hasColor: hasColor,
        hasInterior: hasInterior,
        hasForcedColor: hasForcedColor,
        hasForcedInterior: hasForcedInterior,
        configuredColor: configuredColor,
        configuredInterior: configuredInterior,
        colorHasChanged: colorHasChanged,
        interiorHasChanged: interiorHasChanged,
        canSaveOrder: canSaveOrder,
        showOrderCreation: showOrderCreation,
        cleanSelections: cleanSelections,
        setAutofixes: setAutofixes,
        unableToRebuildItems: unableToRebuildItems,
        addUnableToRebuildItem: addUnableToRebuildItem,
        removeUnableToRebuildItem: removeUnableToRebuildItem,
        isNotTheSameModel: isNotTheSameModel,
        hasEquipment: hasEquipment,
        isEmpty: isEmpty
    };
}

module.exports = exports['default'];

},{}],27:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = SelectableItem;

function SelectableItem(catalogItem, isTypePackage) {
    var selected = ko.observable(catalogItem.esmEquipment);
    var forcedItems = ko.observableArray();

    function contains(text) {
        if (!text) return false;
        return catalogItem.description.toUpperCase().indexOf(text.toUpperCase()) != -1 || catalogItem.code.toUpperCase().indexOf(text.toUpperCase()) != -1;
    }

    function isInCatalog() {
        return catalogItem.description != '';
    }

    function setCombination(combination) {
        forcedItems.removeAll();
        ko.utils.arrayPushAll(forcedItems, combination.items);
    }

    function toJson() {
        return {
            code: catalogItem.code,
            description: catalogItem.description,
            combination: combinationsToJson(),
            isPackage: isPackage
        };
    }

    function combinationsToJson() {
        return _.map(forcedItems(), function (x) {
            return { code: x.code, type: x.type };
        });
    }

    function containsForcedItem(code) {
        return _.any(forcedItems(), function (x) {
            return x.code == code;
        });
    }

    function isPackage() {
        return isTypePackage;
    }

    var self = {
        category: catalogItem.category,
        family: catalogItem.family,
        description: catalogItem.code + " - " + catalogItem.description,
        descriptionWithoutCode: catalogItem.description,
        selected: selected,
        contains: contains,
        containsForcedItem: containsForcedItem,
        code: catalogItem.code,
        type: catalogItem.type,
        isInCatalog: isInCatalog,
        hasForcedCombinations: catalogItem.hasForcedCombinations,
        compulsoryCombinations: catalogItem.compulsoryCombinations,
        toJson: toJson,
        setCombination: setCombination,
        isPackage: isPackage
    };
    return self;
}

module.exports = exports["default"];

},{}],28:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = VehicleSummary;

function VehicleSummary() {
    var model = ko.observable();
    var color = ko.observable();
    var interior = ko.observable();
    var equipment = ko.observableArray([]);

    function update(newModel, newColor, newInterior, newEquipment) {
        model(newModel);
        color(newColor);
        interior(newInterior);
        equipment.removeAll();
        ko.utils.arrayPushAll(equipment, newEquipment);
    }

    function isValid() {
        return model() && color() && interior();
    }

    return {
        update: update,
        isValid: isValid,
        model: model,
        color: color,
        interior: interior,
        equipment: equipment
    };
}

module.exports = exports["default"];

},{}],29:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = "\n<div class=\"box box-default\">\n    <div class=\"box-header with-border\">\n        <h3 class=\"box-title\" data-bind=\"text: labels.title\"></h3>\n    </div>\n    <div class=\"box-body\">\n        <ul class=\"nav nav-tabs\" role=\"tablist\">\n            <li role=\"presentation\" class=\"active\">\n                <a href=\"#all\" aria-controls=\"all\" role=\"tab\" data-toggle=\"tab\" data-bind=\"text: labels.allEquipments\"></a>\n            </li>\n            <li role=\"presentation\">\n                <a href=\"#search\" aria-controls=\"search\" role=\"tab\" data-toggle=\"tab\" data-bind=\"text: labels.searchEquipments\"></a>\n            </li>\n        </ul>\n        <div class=\"tab-content\">\n            <div role=\"tabpanel\" class=\"tab-pane active\" id=\"all\">\n                <div class=\"panel-group\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n                    <div data-bind=\"foreach: categories\">\n                        <div class=\"panel panel-default\">\n                            <div class=\"panel-heading\" role=\"tab\" id=\"headingOne\">\n                                <div class=\"panel-title\">\n                                    <a data-bind=\"text: name, attr: {href: '#' + id}\" role=\"button\" data-toggle=\"collapse\" data-parent=\"#accordion\" aria-expanded=\"false\">\n                                    </a>\n                                </div>\n                            </div>\n                            <div data-bind=\"attr: {id: id}\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingOne\">\n                                <div class=\"panel-body\">\n                                    <div data-bind=\"template: {name: 'equipment_template', data: {labels: $parent.labels, equipment: equipments}}\"></div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div role=\"tabpanel\" class=\"tab-pane\" id=\"search\">\n                <input style=\"padding: 10px\" id=\"search\" class=\"form-control\" data-bind=\"value: textToSearch,\n                                    valueUpdate: 'afterkeydown',\n                                    event: { 'keyup': search },\n                                    attr: { placeholder: labels.searchEquipments}\" type=\"text\" />\n                <div style=\"margin: 10px\" data-bind=\"template: {name: 'equipment_template', data: {labels: labels, equipment: searchResults}}\"></div>\n            </div>\n        </div>\n    </div>\n    <spinner params=\"show: loadingFlag\"></spinner>\n</div>\n\n<!-- templates -->\n<script type=\"text/html\" id=\"equipment_template\">\n    <!-- ko foreach: equipment -->\n    <div class=\"selectablebox\" data-bind=\"click: selectOrUnselect\">\n        <span data-bind=\"visible: isSelected()\">\n            <i class=\"fa fa-check\"></i>\n        </span>\n        <!-- ko if: descriptionWithoutCode != '' -->\n        <span data-bind=\"text: code + ' - ' + descriptionWithoutCode, attr: {'title': descriptionWithoutCode}\" class=\"truncate\" data-toggle=\"tooltip\"></span>\n        <!-- /ko -->\n        <!-- ko if: descriptionWithoutCode === '' -->\n        <span data-bind=\"text: code + ' - ' + $parent.labels.notAvailableDescription\"></span>\n        <!-- /ko -->\n    </div>\n    <!-- /ko -->\n</script>";
module.exports = exports["default"];

},{}],30:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = EquipmentsSelectorScript;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _equipmentsSelectorTemplate = require('./equipments-selector-template');

var _equipmentsSelectorTemplate2 = _interopRequireDefault(_equipmentsSelectorTemplate);

var _selectableEquipment = require('./selectableEquipment');

var _selectableEquipment2 = _interopRequireDefault(_selectableEquipment);

aidaCore.ComponentRegister('equipments-selector', {
    script: function script(props, dependencyProvider) {
        var translator = dependencyProvider.getTranslator();
        var equipments = props.equipments;
        var whenEquipmentSelected = props.whenEquipmentSelected;
        var whenEquipmentUnselected = props.whenEquipmentUnselected;
        var loadingFlag = props.loadingFlag;
        return EquipmentsSelectorScript({ equipments: equipments, loadingFlag: loadingFlag, translator: translator, whenEquipmentSelected: whenEquipmentSelected, whenEquipmentUnselected: whenEquipmentUnselected });
    },
    template: _equipmentsSelectorTemplate2['default']
});

function EquipmentsSelectorScript(_ref) {
    var equipments = _ref.equipments;
    var loadingFlag = _ref.loadingFlag;
    var translator = _ref.translator;
    var whenEquipmentSelected = _ref.whenEquipmentSelected;
    var whenEquipmentUnselected = _ref.whenEquipmentUnselected;

    var categories = ko.observableArray();
    var searcher = EquipmentsSearch();
    var allEquipments = [];

    equipments.subscribe(function () {
        setEquipments(equipments());
    });

    function setEquipments(equipments) {
        var allSelectableItems = ko.utils.unwrapObservable(equipments);
        var allSelectableEquipments = _.map(allSelectableItems, function (item) {
            return (0, _selectableEquipment2['default'])(item, whenEquipmentSelected, whenEquipmentUnselected);
        });
        clean(allSelectableEquipments);
        groupEquipmentsByCategory(allSelectableEquipments);
        initSearch();
    }

    function clean(selectableEquipments) {
        allEquipments = selectableEquipments;
        categories.removeAll();
    }

    function groupEquipmentsByCategory(equipments) {
        var categorizedEquipments = categorizeEquipments(equipments);
        var equipmentsGroupedByCategory = _.groupBy(categorizedEquipments, "category");
        _.each(equipmentsGroupedByCategory, function (equipments, category) {
            categories.push(EquipmentCategory(equipments, category));
        });
    }

    function categorizeEquipments(equipments) {
        var categorizedEquipments = _.cloneDeep(equipments);
        _.forEach(categorizedEquipments, function (e) {
            if (!e.category) {
                e.category = e.family;
            }
        });
        return categorizedEquipments;
    }

    function initSearch() {
        searcher.setEquipments(allEquipments);
    }

    function unselectAllEquipments() {
        _.each(allEquipments, function (x) {
            return x.unselect();
        });
    }

    function getLabels() {
        return {
            title: translator.translate("SharedDomain.Equipments"),
            allEquipments: translator.translate("SharedDomain.AllItems"),
            searchEquipments: translator.translate("SharedDomain.SearchButton.Text"),
            notAvailableDescription: translator.translate("Configurator.NotAvailableDescription")
        };
    }

    return {
        labels: getLabels(),
        categories: categories,
        loadingFlag: loadingFlag,
        textToSearch: searcher.textToSearch,
        searchResults: searcher.results,
        search: searcher.search,
        unselectAllEquipments: unselectAllEquipments
    };
}

function EquipmentCategory(equipments, name) {
    return {
        name: name,
        id: _.uniqueId('category_'),
        equipments: equipments
    };
}

function EquipmentsSearch() {
    var textToSearch = ko.observable('');
    var results = ko.observableArray([]);
    var elements = [];

    function setEquipments(equipments) {
        results.removeAll();
        elements.length = 0;
        _.each(equipments, function (equipment) {
            elements.push(equipment);
        });
        search();
    }

    function search() {
        results.removeAll();
        var filteredResults = _.filter(elements, function (element) {
            return element.contains(textToSearch());
        });
        ko.utils.arrayPushAll(results, filteredResults);
    }

    return {
        results: results,
        textToSearch: textToSearch,
        search: search,
        setEquipments: setEquipments
    };
}
module.exports = exports['default'];

},{"./equipments-selector-template":29,"./selectableEquipment":31}],31:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = SelectableEquipment;

function SelectableEquipment(selectableItem, whenSelected, whenUnselected) {
    var isSelected = selectableItem.selected;

    function selectOrUnselect() {
        if (isSelected()) {
            whenUnselected(self);
        } else {
            whenSelected(self);
        }
    }

    function unselect() {
        isSelected(false);
    }

    var self = {
        isSelected: isSelected,
        selectOrUnselect: selectOrUnselect,
        unselect: unselect,
        code: selectableItem.code,
        descriptionWithoutCode: selectableItem.descriptionWithoutCode,
        category: selectableItem.category,
        contains: selectableItem.contains,
        isPackage: selectableItem.isPackage,
        family: selectableItem.family
    };
    return self;
}

module.exports = exports["default"];

},{}],32:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
                        value: true
});
exports["default"] = "\n<search-select params=\"label: labels.label, \n                        placeholder: labels.placeholder, \n                        options: options, \n                        selected: selected,\n                        whenSelected: whenInteriorSelected\">\n</search-select>";
module.exports = exports["default"];

},{}],33:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _interiorSelectorTemplate = require('./interior-selector-template');

var _interiorSelectorTemplate2 = _interopRequireDefault(_interiorSelectorTemplate);

aidaCore.ComponentRegister('interior-selector', {
    script: function script(props, dependencyProvider) {
        var translator = dependencyProvider.getTranslator();
        var enableEvents = props.enableEvents || ko.observable(true);
        var whenInteriorSelected = props.whenInteriorSelected || function () {};

        function getLabels() {
            return {
                label: translator.translate('SharedDomain.Vehicle.Interior'),
                placeholder: translator.translate('SharedDomain.SelectValue')
            };
        }

        return {
            labels: getLabels(),
            options: props.options,
            selected: props.selected,
            enableEvents: enableEvents,
            whenInteriorSelected: whenInteriorSelected
        };
    },
    template: _interiorSelectorTemplate2['default']
});

},{"./interior-selector-template":32}],34:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
                        value: true
});
exports["default"] = "\n<!-- ko foreach: categories -->\n<search-select params=\"label: $parent.labels.modelGroupLabel,\n                        placeholder: $parent.labels.placeholder,\n                        options: options, \n                        enabled: enabled,\n                        selected: selected,\n                        whenSelected: whenFilterSelected\">\n</search-select>\n<!-- /ko -->\n<search-select params=\"label: labels.modelLabel,\n                        placeholder: labels.placeholder,\n                        optionsText: modelDescription,\n                        options: models, \n                        enabled: modelEnabled, \n                        selected: modelSelected,\n                        whenSelected: onModelSelected\">\n</search-select>\n<spinner params=\"show: loadingModels\"></spinner>";
module.exports = exports["default"];

},{}],35:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = ModelSelector;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _modelSelectorTemplate = require('./model-selector-template');

var _modelSelectorTemplate2 = _interopRequireDefault(_modelSelectorTemplate);

var _scriptsConfigurationFilter = require("./scripts/configurationFilter");

var _scriptsConfigurationFilter2 = _interopRequireDefault(_scriptsConfigurationFilter);

var _scriptsCategoriesSelector = require('./scripts/categoriesSelector');

var _scriptsCategoriesSelector2 = _interopRequireDefault(_scriptsCategoriesSelector);

var _infrastructureClientsCatalogClient = require('../../infrastructure/clients/catalogClient');

var _infrastructureClientsCatalogClient2 = _interopRequireDefault(_infrastructureClientsCatalogClient);

var _scriptsModelsCatalog = require("./scripts/modelsCatalog");

var _scriptsModelsCatalog2 = _interopRequireDefault(_scriptsModelsCatalog);

aidaCore.ComponentRegister('model-selector', {
    script: {
        create: function create(props, dependencyProvider) {
            var selectedBrand = props.selectedBrand;
            var selectedModel = props.selectedModel || ko.observable();
            var whenModelSelected = props.whenModelSelected;
            var whenModelUnselected = props.whenModelUnselected;
            var whenModelCategorySelected = props.whenModelCategorySelected;
            var whenModelCategoryUnselected = props.whenModelCategoryUnselected;
            var loadedModel = props.loadedModel;
            var translator = dependencyProvider.getTranslator();
            var catalogClient = (0, _infrastructureClientsCatalogClient2['default'])(dependencyProvider.getRestClient(), {}, {});

            return new ModelSelector({
                selectedBrand: selectedBrand,
                selectedModel: selectedModel,
                whenModelSelected: whenModelSelected,
                whenModelUnselected: whenModelUnselected,
                whenModelCategorySelected: whenModelCategorySelected,
                whenModelCategoryUnselected: whenModelCategoryUnselected,
                loadedModel: loadedModel
            }, {
                translator: translator,
                catalogClient: catalogClient
            });
        },
        onCreated: function onCreated(script) {
            return script.initialize();
        }
    },
    template: _modelSelectorTemplate2['default']
});

function ModelSelector(_ref, _ref2) {
    var selectedBrand = _ref.selectedBrand;
    var selectedModel = _ref.selectedModel;
    var whenModelSelected = _ref.whenModelSelected;
    var whenModelUnselected = _ref.whenModelUnselected;
    var whenModelCategorySelected = _ref.whenModelCategorySelected;
    var whenModelCategoryUnselected = _ref.whenModelCategoryUnselected;
    var loadedModel = _ref.loadedModel;
    var translator = _ref2.translator;
    var catalogClient = _ref2.catalogClient;

    var modelFilter = (0, _scriptsConfigurationFilter2['default'])("Model", [], whenModelFilterChanged, selectedModel);
    var categoriesSelector = (0, _scriptsCategoriesSelector2['default'])(onFinishFiltering, onResetAnyCategoryFilter);
    var loading = ko.observable(false);
    var catalog = undefined;

    selectedBrand.subscribe(function () {
        getModels();
    });

    loadedModel.subscribe(selectModel);

    function selectModel(modelToSelect) {
        var model = catalog.getModel(modelToSelect.id);
        categoriesSelector.selectCategoriesForModel(model);
        modelFilter.select(model);
    }

    function initialize() {
        getModels();
    }

    function getModels() {
        if (!selectedBrand()) return;
        loading(true);
        catalogClient.getModels(selectedBrand().id, whenModelsReceived, onModelsError);
    }

    function whenModelsReceived(models) {
        loading(false);
        if (_(models).isEmpty()) return;
        var catalogModels = _.cloneDeep(models);
        catalog = (0, _scriptsModelsCatalog2['default'])(catalogModels);
        modelFilter.resetOptions();
        categoriesSelector.initializeCategories(catalog);
    }

    function onModelsError() {
        loading(false);
        categoriesSelector.filtersAlreadyNotCreated(false);
    }

    function whenModelFilterChanged(name, selectedValue) {
        if (!_.isUndefined(selectedValue)) {
            whenModelSelected(selectedValue);
        } else {
            whenModelUnselected();
        }
    }

    function onFinishFiltering(selectedValueId, filteredOptions) {
        modelFilter.setNewOptions(filteredOptions);
        whenModelCategorySelected(selectedValueId, modelFilter);
    }

    function onResetAnyCategoryFilter() {
        modelFilter.resetOptions();
        whenModelCategoryUnselected();
    }

    function getLabels() {
        return {
            modelGroupLabel: translator.translate('SharedDomain.Vehicle.ModelGroup'),
            modelLabel: translator.translate('SharedDomain.Vehicle.Model'),
            placeholder: translator.translate('SharedDomain.SelectValue')
        };
    }

    function getModelDescription(model) {
        var description = model.key.code + ' - ' + model.description;
        if (model.isAVersion) return description + ' (B)';
        return description;
    }

    return {
        initialize: initialize,
        getModels: getModels,
        labels: getLabels(),
        categories: categoriesSelector.filters,
        models: modelFilter.options,
        modelEnabled: modelFilter.enabled,
        modelSelected: modelFilter.selected,
        onModelSelected: modelFilter.whenFilterSelected,
        whenModelSelected: whenModelSelected,
        loadingModels: loading,
        modelDescription: getModelDescription
    };
}

module.exports = exports['default'];

},{"../../infrastructure/clients/catalogClient":42,"./model-selector-template":34,"./scripts/categoriesSelector":36,"./scripts/configurationFilter":37,"./scripts/modelsCatalog":38}],36:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = CategoriesSelector;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _configurationFilter = require("./configurationFilter");

var _configurationFilter2 = _interopRequireDefault(_configurationFilter);

function CategoriesSelector(whenFinishFiltering, whenResetAnyFilter) {
    var FILTER_NOT_FOUND = -1;
    var filtersAlreadyNotCreated = ko.observable(true);
    var catalog = undefined;
    var categoryFilters = ko.observableArray();

    function initializeCategories(initialCatalog) {
        catalog = initialCatalog;
        createFilters();
        filtersAlreadyNotCreated(false);
    }

    function createFilters() {
        categoryFilters.removeAll();
        var categories = catalog.getNamesOfCategories();

        _.forEach(categories, function (category) {
            categoryFilters.push((0, _configurationFilter2["default"])(category, [], whenFilterChangeValue));
        });

        loadValuesForFirstfilter();
    }

    function loadValuesForFirstfilter() {
        var firstFilter = categoryFilters()[0];
        var options = catalog.valuesForCategory(firstFilter.name);
        firstFilter.setNewOptions(options);
    }

    function whenFilterChangeValue(filterName, selectedValue) {
        if (_.isUndefined(selectedValue)) {
            clearNextFilters(filterName);
            whenResetAnyFilter();
        } else {
            setOptionsForNextFilter(filterName, selectedValue);
        }
    }

    function setOptionsForNextFilter(filterName, selectedValue) {
        var filteredOptions = undefined;
        if (isLastFilter(filterName)) {
            filteredOptions = catalog.getModels(filterName, selectedValue);
            whenFinishFiltering(selectedValue.id, filteredOptions);
        } else {
            var nextFilter = findNextFilter(filterName);
            filteredOptions = catalog.valuesForCategory(nextFilter.name, selectedValue);
            clearNextFilters(nextFilter.name);
            whenResetAnyFilter();
            nextFilter.setNewOptions(filteredOptions);
        }
    }

    function clearNextFilters(filterName) {
        var filterIndex = indexOfFilter(filterName);
        if (filterIndex == FILTER_NOT_FOUND) return;

        for (var i = filterIndex + 1; i < categoryFilters().length; i++) {
            categoryFilters()[i].setNewOptions([]);
        }
    }

    function indexOfFilter(filterName) {
        for (var i = 0; i < categoryFilters().length; i++) {
            if (categoryFilters()[i].name === filterName) {
                return i;
            }
        }
        return FILTER_NOT_FOUND;
    }

    function findNextFilter(filterName) {
        for (var i = 0; i < categoryFilters().length; i++) {
            if (categoryFilters()[i].name === filterName) {
                if (i + 1 === categoryFilters().length) {
                    return null;
                } else {
                    return categoryFilters()[i + 1];
                }
            }
        }
    }

    function isLastFilter(filterName) {
        return _.findLastIndex(categoryFilters(), function (filter) {
            return filter.name == filterName;
        }) === categoryFilters().length - 1;
    }

    function selectCategoriesForModel(model) {
        _.forEach(categoryFilters(), function (categoryFilter) {
            categoryFilter.select(model.categories[categoryFilter.name]);
        });
    }

    return {
        filters: categoryFilters,
        filtersAlreadyNotCreated: filtersAlreadyNotCreated,
        initializeCategories: initializeCategories,
        selectCategoriesForModel: selectCategoriesForModel
    };
}

module.exports = exports["default"];

},{"./configurationFilter":37}],37:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = ConfigurationFilter;

function ConfigurationFilter(name, initialOptions, whenFilterChange, selectedModel) {

    var selected = selectedModel || ko.observable();
    var options = ko.observableArray(initialOptions);
    var enabled = ko.computed(function () {
        return options().length != 0;
    });

    function whenFilterSelected(selectedValue) {
        var description = _.isObject(selectedValue) ? selectedValue.description : null;
        selectValue(description);
        whenFilterChange(name, selected());
    }

    function selectValue(value) {
        var selectedOption = _.find(options(), function (option) {
            return option.description == value;
        });
        selected(selectedOption);
    }

    function select(value) {
        var selectedOption = _.find(options(), function (option) {
            return _.isEqual(option, value);
        });
        selected(selectedOption);
        whenFilterSelected(selected());
    }

    function setNewOptions(newOptions) {
        options.removeAll();
        ko.utils.arrayPushAll(options, newOptions);
        selected(undefined);
        whenFilterSelected(selected());
    }

    function resetOptions() {
        setNewOptions([]);
        select(undefined);
    }

    return {
        name: name,
        options: options,
        selected: selected,
        enabled: enabled,
        setNewOptions: setNewOptions,
        resetOptions: resetOptions,
        whenFilterSelected: whenFilterSelected,
        select: select
    };
}

module.exports = exports["default"];

},{}],38:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = ModelsCatalog;

function ModelsCatalog(catalogModels) {

    addHierarchicalIdsToModels();

    function addHierarchicalIdsToModels() {
        return _.map(catalogModels, addHierarchicalIdsToOneModel);
    }

    function addHierarchicalIdsToOneModel(model) {
        var parentId = "";
        _.forOwn(model.categories, function (category) {
            category.HierarchicalId = parentId + "_" + category.id;
            parentId = category.HierarchicalId;
        });
    }

    function getNamesOfCategories() {
        return _.keys(catalogModels[0].categories);
    }

    function valuesForCategory(category, parentFilter) {
        var selectedModels = undefined;

        if (_.isUndefined(parentFilter)) {
            selectedModels = catalogModels;
        } else {
            selectedModels = _(catalogModels).select(function (model) {
                var modelHierarchicalId = model.categories[category].HierarchicalId;
                return _(modelHierarchicalId).startsWith(parentFilter.HierarchicalId);
            }).value();
        }

        return _(selectedModels).map(function (model) {
            return model.categories[category];
        }).unique("id").value();
    }

    function getModels(category, filter) {
        return _(catalogModels).select(function (model) {
            return model.categories[category].HierarchicalId == filter.HierarchicalId;
        }).value();
    }

    function getModel(modelId) {
        return _.find(catalogModels, function (x) {
            return x.key.id == modelId;
        });
    }

    return {
        getNamesOfCategories: getNamesOfCategories,
        valuesForCategory: valuesForCategory,
        getModels: getModels,
        getModel: getModel
    };
}

module.exports = exports["default"];

},{}],39:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = VehicleImageIdentifier;

function VehicleImageIdentifier(modelId, colorCode, interiorCode) {
    var emptyValue = null;

    function reset() {
        if (modelId) modelId = emptyValue;
        if (colorCode) colorCode = emptyValue;
        if (interiorCode) interiorCode = emptyValue;
    }

    return {
        reset: reset,
        modelId: modelId, colorCode: colorCode, interiorCode: interiorCode
    };
}

module.exports = exports["default"];

},{}],40:[function(require,module,exports){
/* eslint-disable */ // Autogenerated with Gulp (task: parse-components-templates)
// Dont change this file, change the .html file instead and run Gulp
"use strict";

Object.defineProperty(exports, "__esModule", {
                            value: true
});
exports["default"] = "\n<!-- ko with: imageUrl -->\n<div data-bind=\"imageWithPreload: {\n                            url: $data,\n                            imgCss: 'center-block img-responsive',\n                            spinnerCss: 'fa fa-refresh fa-spinner fa-2x'\n                }\" class=\"image\">\n</div>\n<!-- /ko -->";
module.exports = exports["default"];

},{}],41:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = VehicleImage;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _vehicleImageTemplate = require('./vehicle-image-template');

var _vehicleImageTemplate2 = _interopRequireDefault(_vehicleImageTemplate);

aidaCore.ComponentRegister('vehicle-image', {
    script: function script(props, dependencyProvider) {
        var vehicleImageIdentifier = props.vehicleImageIdentifier;
        var apiBaseUrl = dependencyProvider.getApiBaseUrl();

        return VehicleImage({ vehicleImageIdentifier: vehicleImageIdentifier }, { apiBaseUrl: apiBaseUrl });
    },
    template: _vehicleImageTemplate2['default']
});

function VehicleImage(_ref, _ref2) {
    var vehicleImageIdentifier = _ref.vehicleImageIdentifier;
    var apiBaseUrl = _ref2.apiBaseUrl;

    var imageUrl = ko.computed(function () {
        if (vehicleImageIdentifier()) {
            return apiBaseUrl + 'vehicle/image?modelId=' + vehicleImageIdentifier().modelId + '&colorCode=' + vehicleImageIdentifier().colorCode + '&interiorCode=' + vehicleImageIdentifier().interiorCode;
        }
        return undefined;
    });

    return {
        imageUrl: imageUrl
    };
}

module.exports = exports['default'];

},{"./vehicle-image-template":40}],42:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = CatalogClient;

function CatalogClient(restClient, errorPublisher, errorTitles) {
    return {
        getModels: function getModels(brandId, callback, errorCallback) {
            var url = "brands/" + brandId + "/models";
            restClient.get(url, function (result) {
                return callback(result);
            }, function (xhr, error, errorType) {
                return errorPublisher.publish(errorType, errorTitles.CatalogError, xhr, errorCallback);
            });
        },
        getCatalog: function getCatalog(brandId, model, callback, errorCallback) {
            var url = "brands/" + brandId + "/models/" + model + "/catalog";
            restClient.get(url, function (result) {
                return callback(result);
            }, function (xhr, error, errorType) {
                return errorPublisher.publish(errorType, errorTitles.CatalogError, xhr, errorCallback);
            });
        }
    };
}

module.exports = exports["default"];

},{}],43:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = ConfigurationClient;

function ConfigurationClient(restClient, errorPublisher, errorTitles) {
    var ChangeColor = "ChangeColor";
    var ChangeInterior = "ChangeInterior";
    var ChangeEquipments = "ChangeEquipments";
    var NewConfiguration = "NewConfiguration";

    function actionType(action) {
        return {
            IsChangeColor: function IsChangeColor() {
                return action == ChangeColor;
            },
            IsChangeInterior: function IsChangeInterior() {
                return action == ChangeInterior;
            },
            IsChangeEquipments: function IsChangeEquipments() {
                return action == ChangeEquipments;
            },
            IsNewConfiguration: function IsNewConfiguration() {
                return action == NewConfiguration;
            }
        };
    }

    return {
        createConfiguration: function createConfiguration(brandId, model, callback, errorCallback) {
            var url = "/brands/" + brandId + "/models/" + model.code;

            restClient.post(url, {}, {}, function (result) {
                return callback(result, actionType(NewConfiguration));
            }, function (xhr, error, errorType) {
                return errorPublisher.publish(errorType, errorTitles.CannotCreateConfiguration, xhr, errorCallback);
            });
        },
        createConfigurationWithCombination: function createConfigurationWithCombination(brandId, combination, callback, errorCallback) {
            var combinationChoiceParam = _.pluck(combination.items, "code").join('_');
            var url = "/brands/" + brandId + "/models/" + combination.root.code + "?combinationChoice=" + combinationChoiceParam;

            restClient.post(url, {}, {}, function (result) {
                return callback(result, actionType(NewConfiguration));
            }, function (xhr, error, errorType) {
                return errorPublisher.publish(errorType, errorTitles.CannotCreateConfiguration, xhr, errorCallback);
            });
        },
        addPackage: function addPackage(modelConfiguration, combination, callback) {
            var combinationChoiceParam = _.pluck(combination.items, "code").join('_');
            var url = "configuration/package/" + combination.root.code + "?combinationChoice=" + combinationChoiceParam;

            restClient.put(url, { configuration: JSON.stringify(modelConfiguration.toJson()) }, {}, function (result) {
                return callback(result, actionType(ChangeEquipments));
            }, function (xhr, error, errorType) {
                return errorPublisher.publish(errorType, errorTitles.CannotSelectCombination, xhr);
            });
        },
        addPackageWithoutCombination: function addPackageWithoutCombination(modelConfiguration, equipmentCode, callback) {
            var url = "configuration/package/" + equipmentCode;

            restClient.put(url, { configuration: JSON.stringify(modelConfiguration.toJson()) }, {}, function (result) {
                return callback(result, actionType(ChangeEquipments));
            }, function (xhr, error, errorType) {
                return errorPublisher.publish(errorType, errorTitles.CannotSelectEquipment, xhr);
            });
        },
        removePackage: function removePackage(modelConfiguration, equipmentCode, callback) {
            var url = "configuration/package/" + equipmentCode;

            restClient.remove(url, { configuration: JSON.stringify(modelConfiguration.toJson()) }, function (result) {
                return callback(result, actionType(ChangeEquipments));
            }, function (xhr, error, errorType) {
                return errorPublisher.publish(errorType, errorTitles.CannotUnselect, xhr);
            });
        },
        addEquipment: function addEquipment(modelConfiguration, combination, callback) {
            var combinationChoiceParam = _.pluck(combination.items, "code").join('_');
            var url = "configuration/equipment/" + combination.root.code + "?combinationChoice=" + combinationChoiceParam;

            restClient.put(url, { configuration: JSON.stringify(modelConfiguration.toJson()) }, {}, function (result) {
                return callback(result, actionType(ChangeEquipments));
            }, function (xhr, error, errorType) {
                return errorPublisher.publish(errorType, errorTitles.CannotSelectCombination, xhr);
            });
        },
        addEquipmentWithoutCombination: function addEquipmentWithoutCombination(modelConfiguration, equipmentCode, callback) {
            var url = "configuration/equipment/" + equipmentCode;

            restClient.put(url, { configuration: JSON.stringify(modelConfiguration.toJson()) }, {}, function (result) {
                return callback(result, actionType(ChangeEquipments));
            }, function (xhr, error, errorType) {
                return errorPublisher.publish(errorType, errorTitles.CannotSelectEquipment, xhr);
            });
        },
        removeEquipment: function removeEquipment(modelConfiguration, equipmentCode, callback) {
            var url = "configuration/equipment/" + equipmentCode;

            restClient.remove(url, { configuration: JSON.stringify(modelConfiguration.toJson()) }, function (result) {
                return callback(result, actionType(ChangeEquipments));
            }, function (xhr, error, errorType) {
                return errorPublisher.publish(errorType, errorTitles.CannotUnselect, xhr);
            });
        },
        changeColor: function changeColor(modelConfiguration, combination, callback, errorCallback) {
            var combinationChoiceParam = _.pluck(combination.items, "code").join('_');
            var url = "configuration/color/" + combination.root.code + "?combinationChoice=" + combinationChoiceParam;

            restClient.put(url, { configuration: JSON.stringify(modelConfiguration.toJson()) }, {}, function (result) {
                return callback(result, actionType(ChangeColor));
            }, function (xhr, error, errorType) {
                return errorPublisher.publish(errorType, errorTitles.CannotChangeColor, xhr, errorCallback);
            });
        },
        removeColor: function removeColor(modelConfiguration, callback) {
            var url = "configuration/color/";

            restClient.remove(url, { configuration: JSON.stringify(modelConfiguration.toJson()) }, function (result) {
                return callback(result, actionType(ChangeColor));
            }, function (xhr, error, errorType) {
                return errorPublisher.publish(errorType, errorTitles.CannotChangeColor, xhr);
            });
        },
        changeColorWithoutCombination: function changeColorWithoutCombination(modelConfiguration, colorCode, callback, errorCallback) {
            var url = "configuration/color/" + colorCode;

            restClient.put(url, { configuration: JSON.stringify(modelConfiguration.toJson()) }, {}, function (result) {
                return callback(result, actionType(ChangeColor));
            }, function (xhr, error, errorType) {
                return errorPublisher.publish(errorType, errorTitles.CannotChangeColor, xhr, errorCallback);
            });
        },
        changeInterior: function changeInterior(modelConfiguration, combination, callback) {
            var combinationChoiceParam = _.pluck(combination.items, "code").join('_');
            var url = "configuration/interior/" + combination.root.code + "?combinationChoice=" + combinationChoiceParam;

            restClient.put(url, { configuration: JSON.stringify(modelConfiguration.toJson()) }, {}, function (result) {
                return callback(result, actionType(ChangeInterior));
            }, function (xhr, error, errorType) {
                return errorPublisher.publish(errorType, errorTitles.CannotChangeInterior, xhr);
            });
        },
        removeInterior: function removeInterior(modelConfiguration, callback) {
            var url = "configuration/interior/";

            restClient.remove(url, { configuration: JSON.stringify(modelConfiguration.toJson()) }, function (result) {
                return callback(result, actionType(ChangeInterior));
            }, function (xhr, error, errorType) {
                return errorPublisher.publish(errorType, errorTitles.CannotChangeInterior, xhr);
            });
        },
        changeInteriorWithoutCombination: function changeInteriorWithoutCombination(modelConfiguration, interiorCode, callback, errorCallback) {
            var url = "configuration/interior/" + interiorCode;

            restClient.put(url, { configuration: JSON.stringify(modelConfiguration.toJson()) }, {}, function (result) {
                return callback(result, actionType(ChangeInterior));
            }, function (xhr, error, errorType) {
                return errorPublisher.publish(errorType, errorTitles.CannotChangeInterior, xhr, errorCallback);
            });
        }
    };
}

module.exports = exports["default"];

},{}],"aida-configurator":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.exportApi = exportApi;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _domainConfiguratorConfigurator = require("./domain/configurator/configurator");

var _domainConfiguratorConfigurator2 = _interopRequireDefault(_domainConfiguratorConfigurator);

var _domainVehicleImageScriptsVehicleImageIdentifier = require("./domain/vehicle-image/scripts/vehicleImageIdentifier");

var _domainVehicleImageScriptsVehicleImageIdentifier2 = _interopRequireDefault(_domainVehicleImageScriptsVehicleImageIdentifier);

var _domainDtosVehicleSummary = require("./domain/dtos/vehicleSummary");

var _domainDtosVehicleSummary2 = _interopRequireDefault(_domainDtosVehicleSummary);

function exportApi() {
    return {
        Configurator: _domainConfiguratorConfigurator2["default"],
        VehicleImageIdentifier: _domainVehicleImageScriptsVehicleImageIdentifier2["default"],
        VehicleSummary: _domainDtosVehicleSummary2["default"]
    };
}

var aidaConfigurator = require('aida-configurator').exportApi();
window.aidaConfigurator = aidaConfigurator;

},{"./domain/configurator/configurator":17,"./domain/dtos/vehicleSummary":28,"./domain/vehicle-image/scripts/vehicleImageIdentifier":39,"aida-configurator":"aida-configurator"}]},{},[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,"aida-configurator"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
