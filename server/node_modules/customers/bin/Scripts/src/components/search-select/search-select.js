import ComponentRegister from '../../componentRegister';
import template from './search-select-template';

ComponentRegister('search-select', {
    script: {
        create: (props) => {
            const params = {
                label: props.label,
                placeholder: props.placeholder,
                options: props.options,
                enableEvents: props.enableEvents,
                allowUnselect: props.allowUnselect,
                selectedFromCaller: props.selected,
                whenSelected: props.whenSelected,
                optionsText: props.optionsText,
                enabledFromCaller: props.enabled
            };
            return new SearchSelect(params);
        },
        onCreated: (script) => script.initialize()
    },
    template: template
});

export default function SearchSelect(
    { label, placeholder, options, selectedFromCaller, enabledFromCaller, enableEvents, allowUnselect, optionsText, whenSelected }) {
    allowUnselect = (allowUnselect != undefined) ? allowUnselect : true;
    optionsText = optionsText || 'description';

    const enabled = ko.computed(() => isComponentEnabled());
    const eventsEnabled = areEventsEnabled();
    const selected = ko.observable();

    function initialize() {
        if (selectedFromCaller()) {
            selected(selectedFromCaller());
        }
    }

    function isComponentEnabled(){
        if (enabledFromCaller) return enabledFromCaller();
        return options != undefined && options().length > 0;
    }

    function areEventsEnabled() {
        if (enableEvents !== undefined) {
            return ko.unwrap(enableEvents);
        }
        return true;
    }

    selected.subscribe((value) => {
        if (!value) return;
        if (selectedFromCaller() && value == selectedFromCaller()) return;
        if (eventsEnabled && whenSelected) {
            selectedFromCaller(value);
            whenSelected(value);
        }
    });

    selectedFromCaller.subscribe((value) => {
        if (!value) return;
        if (selected() && selected() == value) return;
        selected(value);
    });

    return {
        initialize,
        label,
        placeholder,
        options,
        enabled,
        selected,
        allowUnselect,
        optionsText
    };
}