export default function defineRemoteSelect2(culture) {

    const cultureSelect2 = culture;

    function init(element, valueAccessor, allBindings) {
        const selectedValue = allBindings.get("valueSelect2");
        const visibles = allBindings.get("visiblesSelect2");
        const allowClear = allBindings.get("allowClearSelect2") || false;
        const placeholder = allBindings.get("placeholderSelect2") || "";
        const minimumInputLength = allBindings.get("minimumInputLengthSelect2") || "";
        const templateSelect2 = allBindings.get("templateSelect2");
        const optionsText = allBindings.get("optionsText");

        selectedValue.subscribe(() => {
            setSelectedValue();
        });

        createRemoteSelect2();
        subscribeToSelect2ChangesToNotifyViewModel();

        hackPreventOpenOnClear(element);

        function createRemoteSelect2() {
            $(element).select2(createSelect2Config());
        }

        function createSelect2Config() {
            let remoteUrl = ko.unwrap(valueAccessor());
            return {
                placeholder: placeholder,
                allowClear: allowClear,
                minimumInputLength: minimumInputLength,
                escapeMarkup: function (markup) { return markup; },
                templateResult: (option) => {
                    if (option.loading) return option.text;
                    return templateSelect2 ? renderTemplate(templateSelect2, option) : option.text;
                },
                language: cultureSelect2,                
                ajax: {
                    url: remoteUrl,
                    delay: 250,
                    data: (params) => {
                        return { query: params.term };
                    },
                    processResults: (data) => {
                        if (visibles) {
                            ko.utils.arrayPushAll(visibles, data);
                        }
                        return {
                            results: convertToSelect2Data(data, optionsText)
                        };
                    }
                }
            };
        }

        setSelectedValue();

        function convertToSelect2Data(options, optionsText) {
            return _.map(options, (item) => {
                let description = item.description;
                if (optionsText) {
                    description = optionsText(item);
                }
                //Bug: El Id debe ser string. https://github.com/select2/select2/issues/4052
                return {
                    id: item.id.toString(),
                    text: description,
                    associatedObject: item
                };
            });
        }

        function renderTemplate(template, option) {
            const temp = $("<div>");
            ko.applyBindingsToNode(temp[0], { template: { name: template, data: option } });
            const html = temp.html();
            temp.remove();
            return html;
        }

        function setSelectedValue() {
            if (selectedValue() && selectedValue().id) {
                let option = $("<option selected></option>").val(selectedValue().id).text(selectedValue().description);
                $(element).append(option).trigger('change');

                if (visibles) {
                    if (!_.find(visibles, (x) => x.id == selectedValue().id)) {
                        visibles.push(selectedValue());
                    }
                }
            } else {
                if (selectedValue() == "") return;
                if (placeholder != "") {
                    $(element).select2('val', '');
                    return;
                }
                $(element).parent().find("[class=select2-selection__rendered]").text('');
            }
        }

        function subscribeToSelect2ChangesToNotifyViewModel() {
            $(element).on("change", () => {
                let objectSelected = $(element).select2('data')[0];
                if (objectSelected == undefined) {
                    selectedValue(undefined);
                    return;
                }

                if (IsActualValueDifferentThan(objectSelected)) {
                    selectedValue({ id: objectSelected.id, description: objectSelected.text, value: objectSelected.associatedObject });
                }
            });
        }

        function IsActualValueDifferentThan(objectSelected) {
            return !selectedValue() ||
                !selectedValue().id ||
                selectedValue().id != objectSelected.id;
        }

        function hackPreventOpenOnClear(element) {
            $(element).on('select2:opening', function () {
                if ($(element).data('unselecting')) {
                    $(element).removeData('unselecting');
                    setTimeout(function () {
                        $(element).select2('close');
                    }, 1);
                }
            }).on('select2:unselecting', function () {
                $(element).data('unselecting', true);
            });
        }
    }

    ko.bindingHandlers.optionsRemoteSelect2 = {
        init: init
    };

    ko.bindingHandlers.isMissingRemoteSelect2 = {
        update: function (element, valueAccessor) {
            if (valueAccessor()) {
                const $select2 = $(element);
                $select2.data('select2').$selection.addClass("missing-field");
            } else {
                const $select2 = $(element);
                $select2.data('select2').$selection.removeClass("missing-field");
            }
        }
    };
}