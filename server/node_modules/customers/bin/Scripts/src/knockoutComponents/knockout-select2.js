let updatingComponent;

function init(element, valueAccessor, allBindings) {

    let initialOptions = ko.unwrap(valueAccessor());
    const selectedOption = allBindings.get("valueSelect2")();
    let subscriptionToViewModel;

    createSelect2ComponentWith(element, allBindings, initialOptions, selectedOption);
    subscribeToSelect2ChangesToNotifyViewModel();
    subscribeToViewModelChangesToNotifySelect2();
    cleanUpSubscriptionsWhenDomNodeIsDeleted();

    hackPreventOpenOnClear(element);

    function subscribeToViewModelChangesToNotifySelect2() {
        subscriptionToViewModel = valueAccessor().subscribe(function () {
            repaintElement(element, allBindings);
        });
        allBindings.get("valueSelect2").subscribe(function () {
            if (updatingComponent) return;

            let selectedOption = allBindings.get("valueSelect2")();
            let options = allBindings.get("optionsSelect2")();
            selectOption(element, options, selectedOption);
        });
    }

    function subscribeToSelect2ChangesToNotifyViewModel() {
        let selectedValue = allBindings.get("valueSelect2");
        $(element).on("change", function () {
            if (updatingComponent) return;

            updatingUI(function () {
                let objectSelected = $(element).select2('data')[0].associatedObject;
                selectedValue(objectSelected);
            });
        });
    }

    function hackPreventOpenOnClear(element) {
        $(element).on('select2:opening', function () {
            if ($(element).data('unselecting')) {
                $(element).removeData('unselecting');
                setTimeout(function () {
                    $(element).select2('close');
                }, 1);
            }
        }).on('select2:unselecting', function () {
            $(element).data('unselecting', true);
        });
    }

    function cleanUpSubscriptionsWhenDomNodeIsDeleted() {
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            subscriptionToViewModel.dispose();
        });
    }
}

function repaintElement(element, allBindings) {
    $(element).select2("destroy");
    let selectedValue = allBindings.get("valueSelect2")();
    let changedOptions = allBindings.get("optionsSelect2")();
    createSelect2ComponentWith(element, allBindings, changedOptions, selectedValue);
}

function createSelect2ComponentWith(element, allBindings, options, selectedOption) {
    let select2Config = createSelect2Configuration(element, allBindings, options);
    $(element).empty();
    $(element).append("<option></option>");
    $(element).select2(select2Config);

    selectOption(element, options, selectedOption);
}

function updatingUI(updateFunction) {
    updatingComponent = true;
    try {
        updateFunction();
    } finally {
        updatingComponent = false;
    }
}

function selectOption(element, options, selectedOption) {
    updatingUI(function () {
        let index = selectedOptionIndex(options, selectedOption);
        $(element).val(index).trigger("change");
    });
}

function selectedOptionIndex(options, selectedOption) {
    return _.findIndex(options, function (option) {
        return _.eq(option, selectedOption);
    });
}
function createSelect2Configuration(element, allBindings, options) {
    let select2Config = { allowClear: true };
    if (allBindings.has("allowClearSelect2")) {
        select2Config.allowClear = allBindings.get("allowClearSelect2");
    }
    if (allBindings.has("optionsCaption")) {
        select2Config.placeholder = allBindings.get("optionsCaption");
    }
    if (allBindings.has("dropdownCssClass")) {
        select2Config.dropdownCssClass = allBindings.get("dropdownCssClass");
    }

    let optionsText = allBindings.get("optionsText");
    select2Config.data = convertToSelect2Data(options, optionsText);

    return select2Config;
}

function convertToSelect2Data(options, optionsText) {
    let select2Data = [];
    for (let i = 0; i < options.length; i++) {
        let text;
        if ($.isFunction(optionsText)) {
            text = optionsText(options[i]);
        } else {
            text = options[i][optionsText];
        }
        select2Data.push({
            id: i,
            text: text,
            associatedObject: options[i]
        });
    }
    return select2Data;
}

ko.bindingHandlers.optionsSelect2 = {
    init: init
};

ko.bindingHandlers.isMissing = {
    update: function (element, valueAccessor) {
        if (valueAccessor()) {
            const $select2 = $(element);
            $select2.data('select2').$selection.addClass("missing-field");
        } else {
            const $select2 = $(element);
            $select2.data('select2').$selection.removeClass("missing-field");
        }
    }
};