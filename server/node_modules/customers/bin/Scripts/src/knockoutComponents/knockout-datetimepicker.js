ko.bindingHandlers.datetimepicker = {
    init: function (element, valueAccessor, allBindingsAccessor) {
        const selectedDate = getInitialValue();
        const endDate = allBindingsAccessor.get("endDate");
        const startDate = allBindingsAccessor.get("startDate");
        const viewMode = getViewMode();
        const clearButton = allBindingsAccessor.get("clearButton");
        const inline = allBindingsAccessor.get("inline") ? allBindingsAccessor.get("inline") : false;
        let subscriptionToStartDate;

        subscribeToStartDateChanges();

        $(element).datetimepicker({
            format: 'L',
            locale: moment.locale(),
            minDate: ko.unwrap(startDate),
            maxDate: endDate,
            viewMode: viewMode,
            showClear: clearButton,
            showClose: clearButton,
            inline: inline,
            keepOpen: false
        });

        $(element).data("DateTimePicker").date(moment(selectedDate()));

        ko.utils.registerEventHandler(element, "dp.change", function (event) {
            if (ko.isObservable(selectedDate)) {
                selectedDate(toISO8601Format(event.date));
            }
        });

        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            let picker = $(element).data("DateTimePicker");
            if (picker) {
                picker.destroy();
            }
            if (subscriptionToStartDate) {
                subscriptionToStartDate.dispose();
            }
        });

        function subscribeToStartDateChanges() {
            if (ko.isObservable(startDate)) {
                subscriptionToStartDate = startDate.subscribe(()=>{
                    const minDate = moment(startDate());
                    const maxDate = moment($(element).data("DateTimePicker").maxDate());
                    if (minDate.isSameOrBefore(maxDate)) {
                        $(element).data("DateTimePicker").minDate(minDate);
                    }
                });
            }
        }

        function getInitialValue() {
            let initialDate = valueAccessor();
            if (initialDate()) {
                return initialDate;
            }

            if (allBindingsAccessor.get("initialValue")) {
                let initialValue = allBindingsAccessor.get("initialValue");
                initialDate(initialValue);
            }
            return initialDate;
        }

        function getViewMode() {
            const DAY_VIEW = 'days';
            if (allBindingsAccessor.get("viewMode")) {
                return allBindingsAccessor.get("viewMode");
            }
            return DAY_VIEW;
        }

        function toISO8601Format(date) {
            if (!date) return null;
            return date.toISOString();
        }
    },
    update: function (element, valueAccessor) {
        let datePicker = $(element).data("DateTimePicker");
        if (datePicker) {
            let koDate = valueAccessor();
            if (koDate()) {
                datePicker.date(moment(koDate()));
            }
            else{
                datePicker.clear();
            }
        }
    }
};