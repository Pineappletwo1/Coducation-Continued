export let SimaEventBus = (function (){
    let simaEvents = [];

    function getSimaEvent (eventName) {
        const eventNameInLower = eventName.toLowerCase();
        if (!simaEvents[eventNameInLower]) {
            simaEvents[eventNameInLower] = {
                subscriptions: []
            };
        }
        return simaEvents[eventNameInLower];
    }

    function subscribe (eventName, callback, scope) {
        if (scope == undefined) throw "Scope was not specified on options";
        if (typeof callback !== "function") throw "Callback was not specified on options";

        let subscription = { callback: callback, scope: scope.toLowerCase() };
                
        const subscriptions = getSimaEvent(eventName).subscriptions;
        for (let i = 0; i < subscriptions.length; i++) {
            if (subscriptions[i].scope === scope.toLowerCase()) {
                getSimaEvent(eventName).subscriptions[i] = subscription;
                return;
            }
        }
        getSimaEvent(eventName).subscriptions.push(subscription);
    }

    function unsubscribe(eventName, scope) {
        if (scope == undefined) throw "Scope was not specified on options";
        
        const subscriptions = getSimaEvent(eventName).subscriptions;
        _.remove(subscriptions, (x) => x.scope === scope.toLowerCase());
    }

    function raise (eventName, data) {
        let subscriptions = getSimaEvent(eventName).subscriptions;

        for (let i = 0; i < subscriptions.length; i++) {
            (function (subscription, data) {
                try {
                    subscription.callback.call(null, data);
                }
                catch (ex) {}
            }(subscriptions[i], data));
        }
    }

    return {
        subscribe,
        raise,
        unsubscribe
    };
})();